{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/config-options","title":"Configuration Options","content":{"type":"markdown","value":"\nNEO•ONE compiler configuration options.\n\nConfigure NEO•ONE for your project.\n\n## Config File\n\nAn [initialized environment](https://neo-one.io/tutorial#Setup-for-the-Tutorial) will have a `.neo-one.config.ts` file within the project root.\n\n### Example NEO•ONE configuration file\n\nThe `.neo-one.config.ts` configuration file may look something like this:\n\n```typescript\nimport { defaultNetworks } from '@neo-one/cli';\n\nexport default {\n  contracts: {\n    // The NEO•ONE compile command will output the compile results in this directory.\n    outDir: 'neo-one/compiled',\n    // NEO•ONE will look for smart contracts in this directory.\n    path: 'neo-one/contracts',\n    // Set this to true if you want the compile command to output JSON.\n    // json: true,\n    // Set this to true if you want the compile command to output AVM.\n    // avm: false,\n    // Set this to true if you want the compile command to output additional debug information.\n    // debug: false,\n    // Set this to true if you want the compile command to output the AVM in a human-readable format for debugging (requires debug: true).\n    // opcodes: false,\n  },\n  artifacts: {\n    // NEO•ONE will store build and deployment artifacts that should be checked in to vcs in this directory.\n    path: 'neo-one/artifacts',\n  },\n  migration: {\n    // NEO•ONE will load the deployment migration from this path.\n    path: 'neo-one/migration.ts',\n  },\n  codegen: {\n    // NEO•ONE will write source artifacts to this directory. This directory should be committed.\n    path: 'src/neo-one',\n    // NEO•ONE will generate code in the language specified here. Can be one of 'javascript' or 'typescript'.\n    language: 'typescript',\n    // NEO•ONE will generate client helpers for the framework specified here. Can be one of 'react', 'angular', 'vue' or 'none'.\n    framework: 'react',\n    // Set this to true if you're using an environment like Expo that doesn't handle browserifying dependencies automatically.\n    browserify: false,\n    // Set this to true if you're running in codesandbox to workaround certain limitations of codesandbox.\n    codesandbox: false,\n  },\n  network: {\n    // NEO•ONE will store network data here. This path should be ignored by your vcs, e.g. by specifiying it in a .gitignore file.\n    path: '.neo-one/network',\n    // NEO•ONE will start the network on this port.\n    port: 9040,\n  },\n  // NEO•ONE will configure various parts of the CLI that require network accounts using the value provided here, for example, when deploying contracts.\n  // Refer to the documentation at https://neo-one.io/docs/config-options for more information.\n  networks: defaultNetworks,\n  neotracker: {\n    // NEO•ONE will start an instance of NEO Tracker using this path for local data. This directory should not be committed.\n    path: '.neo-one/neotracker',\n    // NEO•ONE will start an instance of NEO Tracker using this port.\n    port: 9041,\n    // Set to false if you'd like NEO•ONE to start an instance of NEO Tracker when running 'neo-one build'. You will need @neotracker/core installed as a dependency for this to work.\n    skip: true,\n  },\n};\n```\n\n## Networks\n\nWhile we provide defaults for deployment networks it is also possible to use your own! You can provide a `name` and `rpcUrl` to our helper function `createUserAccountProviderFunc` from `@neo-one/cli`, which will prompt you to provide a list of `privateKeys` for use on the network when deploying:\n\n```typescript\nimport { createUserAccountProviderFunc, defaultNetworks } from '@neo-one/cli';\n\nexport default {\n  // ...\n  networks: {\n    ...defaultNetworks,\n    exampleNetwork: createUserAccountProviderFunc('exampleNetwork', 'exampleRpcUrl.io/rpc');\n  }\n  // ...\n}\n```\n\nThis is what the `createUserAccountProviderFunc` will do to create the new `LocalUserAccountProvider`:\n\n```typescript\nexport const createUserAccountProviderFunc = (network: string, rpcURL: string) => async () => {\n  const keystore = new LocalKeyStore(new LocalMemoryStore());\n  const { privateKeys } = await prompts({\n    type: 'list',\n    name: 'privateKeys',\n    message: `Please enter one or more private keys separated by commas for use on the \"${network}\" network.`,\n    validate: (value) => (value.length > 0 ? true : 'Must enter at least one private key.'),\n  });\n  await Promise.all(privateKeys.map((privateKey: string) => keystore.addUserAccount({ network, privateKey })));\n\n  return new LocalUserAccountProvider({\n    keystore,\n    provider: new NEOONEProvider([{ network, rpcURL }]),\n  });\n};\n```\n\nOr you can create your own hard-coded `async` function that returns a `UserAccountProvider`, like so:\n\n```typescript\nexport default {\n  // ...\n  networks: {\n    ...defaultNetworks,\n    exampleNetwork: async () => {\n      const keystore = new LocalKeyStore(new LocalMemoryStore());\n      await keystore.addUserAccount('exampleNetwork', 'PRIVATE_KEY');\n\n      return new LocalUserAccountProvider({\n        keystore,\n        provider: new NEOONEProvider([{ network: 'exampleNetwork', rpcUrl: 'exampleRpcUrl.io/rpc' }]),\n      });\n    },\n  },\n  // ...\n};\n```\n\n::: warning\n\nNote\n\nWhile hard-coding the `LocalUserAccountProvider` is a viable option in testing this also requires storing a private key as plain text in the `.neo-one.config.ts` file that is traditionally checked into version control, like Git/GitHub. For this reason we recommend only using a hard coded private key value for local on-the-fly testing and debugging.\n\n:::\n"},"link":"packages/neo-one-website/docs/2-advanced-guides/09-configuration-options.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/node-docker","title":"Local Docker Development"},"previous":{"slug":"/docs/dapi-support","title":"dAPI Support"}},"path":"docs/config-options"}
