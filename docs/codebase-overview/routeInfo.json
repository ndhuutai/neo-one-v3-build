{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/codebase-overview","title":"Codebase Overview","content":{"type":"markdown","value":"\nNEO•ONE is a very large project, which is organized into 50+ interdependent packages. Below is a breakdown\nof what each package is used for, grouped by functionality.\n\n---\n\n[[toc]]\n\n---\n\n## Client\n\n### neo-one-client\n\nExports nearly everything from `neo-one-client-common` and `neo-one-client-core`, plus `DeveloperTools` from `neo-one-developer-tools`.\n\n### neo-one-client-common\n\nOne of the core client packages, which provides APIs for cryptography, commonly used client functions, reading binary input, building scripts, and more.\n\n### neo-one-client-core\n\nThe core client package, which exports the NEO•ONE Client, which is used to construct and send transactions, read accounts, hold keys, read the blockchain, and much more.\n\n### neo-one-client-full\n\nExports nearly everything from `neo-one-client` and `neo-one-client-full-core`.\n\n### neo-one-client-full-common\n\nExports common models.\n\n### neo-one-client-full-core\n\nContains an extension of the Client in `neo-one-client-core` which provides extra APIs and functionality, plus the ReadClient, and more.\n\n### neo-one-client-switch\n\nProvides NEO•ONE Client functionality that switches between NodeJS and browser environments.\n\n## Node\n\n### neo-one-node\n\nContains the `FullNode` class which is used by the NEO•ONE CLI, `neo-one-node-bin`, and for testing purposes.\n\n### neo-one-node-bin\n\nContains the `bin` for staring the NEO•ONE node.\n\n### neo-one-node-blockchain\n\nPrimarily contains the `Blockchain` class which handles nearly every blockchain function for the node.\n\n### neo-one-node-browser\n\nCreates the full NEO•ONE node used in the browser, especially for the NEO•ONE website courses.\n\n### neo-one-node-browser-worker\n\nThe web worker wrapper for the NEO•ONE node used in the browser.\n\n### neo-one-node-concensus\n\nHandles concensus for the node.\n\n### neo-one-node-core\n\nContains all the objects for Accounts, Blocks, Transactions, Contracts, Headers, etc. used in the node and other packages.\n\n### neo-one-node-http-rpc\n\nCreates the actual HTTP server used by the node for relaying RPC calls.\n\n### neo-one-node-neo-settings\n\nHandles the node settings, like creating the genesis block, defining the governing token, and setting other key blockchain constants.\n\n### neo-one-node-network\n\nContains the functionality for relaying information between the NEO•ONE node and other nodes in the network.\n\n### neo-one-node-offline\n\nHandles offline operations for the node, like dumping and loading chainfile data.\n\n### neo-one-node-protocol\n\nHandles the protocol for connecting to other nodes in the network.\n\n### neo-one-node-rpc-handler\n\nContains the function which creates the RPC handlers for the node. These handlers are what are called by the node when it receives RPC requests.\n\n### neo-one-node-storage-cache\n\nHandles storage data caching for the node.\n\n### neo-one-node-storage-common\n\nContains common functions used by node storage.\n\n### neo-one-node-storage-levelup\n\nCreates the storage and the storage APIs used by the node to store and access blockchain data.\n\n### neo-one-node-tools\n\nPrimarily provides the entrypoint for restoring a NEO•ONE node from blockchain data, like in a chainfile.\n\n### neo-one-node-vm\n\nContains the NEO•ONE implementation of the NeoVM, used in the NEO•ONE node and used for testing the compiler.\n\n### neo-one-http\n\nContains very basic Koa HTTP server utils.\n\n### neo-one-http-context\n\nContains very basic server utils, plus common functions and constants.\n\n## CLI\n\n### neo-one-cli\n\nThis is the main entrypoint for the NEO•ONE CLI code. It handles all NEO•ONE CLI commands.\n\n### neo-one-cli-common\n\nHandles more CLI functionality, like configuration, setting up wallets, setting up a NEO•ONE Client, etc.\n\n### neo-one-cli-common-node\n\nContains more CLI features, like configuration and network setup.\n\n## Compiler\n\n### neo-one-smart-contract\n\nExports declaration files that define custom types used in a NEO•ONE smart contract.\n\n### neo-one-smart-contract-codegen\n\nGenerates helpers for invoking smart contracts, and generates other code for creating dApps around smart contracts.\n\n### neo-one-smart-contract-compiler\n\nThe largest package in NEO•ONE. Contains the entire smart contract compiler, which creates the actual compiled NeoVM bytecode.\n\n### neo-one-smart-contract-compiler-node\n\nCreates the environment for compiling smart contracts, which is then used in the CLI and other packages.\n\n### neo-one-smart-contract-lib\n\nDefines NEP5 tokens and ICOs.\n\n### neo-one-smart-contract-test\n\nCreates the environment for testing smart contracts.\n\n### neo-one-smart-contract-test-browser\n\nCreates the environment for testing smart contracts in the browser.\n\n### neo-one-smart-contract-test-common\n\nRuns smart contract unit tests.\n\n### neo-one-smart-contract-typescript-plugin\n\nCreates a plugin for the NEO•ONE smart contract compiler.\n\n## Website\n\n### neo-one-react\n\nPrimarily creates and exports a `FromStream` React component for subscribing to `Observables` in React.\n\n### neo-one-react-common\n\nCreates additional React components that are used by the NEO•ONE website and exports everything from `neo-one-react-core`.\n\n### neo-one-react-core\n\nCreates all the base React components that are used by the NEO•ONE website and other React components.\n\n### neo-one-website\n\nContains the entire NEO•ONE website.\n\n### neo-one-worker\n\nContains helpers for creating and connecting web workers, especially for the NEO•ONE website.\n\n### neo-one-local-browser\n\nHandles a lot of the setup and execution of the courses on the NEO•ONE website, like loading files into a browser-implemented\nDB, compiling smart contracts, deploying contracts, testing contracts, etc.\n\n### neo-one-local-browser-worker\n\nA web worker wrapper for `neo-one-local-browser`.\n\n### neo-one-local-singleton\n\nContains functions that are used in the browser for the NEO•ONE courses.\n\n### neo-one-editor\n\nContains the code for the code editor used in the NEO•ONE website.\n\n### neo-one-editor-server\n\nContains the code for the code editor server used in the NEO•ONE website.\n\n## Build\n\n### neo-one-build-common\n\nCommon build modules.\n\n### neo-one-build-tests\n\nEnvironment setup for running Jest unit and end-to-end tests.\n\n### neo-one-build-tools\n\nContains all the build tools for checking, cleaning, formatting, preparing, and building NEO•ONE packages.\n\n### neo-one-build-tools-web\n\nContains all the webpack compilers and build configurations, primarily for the NEO•ONE website.\n\n## Other\n\n### neo-one-logger\n\nHandles almost all the logging for NEO•ONE packages.\n\n### neo-one-logger-config\n\nHandles configuration for `neo-one-logger`.\n\n### neo-one-developer-tools\n\nProvides the interface for controlling a private development network.\n\n### neo-one-developer-tools-frame\n\nCreates the developer tools iframe for controlling a private network.\n\n### neo-one-suite\n\nA simple user-friendly package that downloads `@neo-one/cli`, `@neo-one/client`, `@neo-one/smart-contract`,\n`@neo-one/smart-contract-lib`, `@neo-one/smart-contract-test`, `@neo-one/smart-contract-typescript-plugin`\nfor easy startup.\n\n### neo-one-ts-utils\n\nPrimarily exports TypeScript compiler API helper functions for use in build tools, the compiler, and more.\n\n### neo-one-typescript-concatenator\n\nHandles the concatenation of multiple TypeScript files into one file for the TypeScript compiler.\n\n### neo-one-utils\n\nContains various helper functions, utilities, and constants that are used throughout NEO•ONE.\n\n### neo-one-utils-node\n\nContains various helper functions, utilities, and constants that are used primarily in the node.\n"},"link":"packages/neo-one-website/docs/4-contributing/1-codebase-overview.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/smart-contract-compiler","title":"Smart Contract Compiler"},"previous":{"slug":"/docs/how-to-contribute","title":"How to Contribute"}},"path":"docs/codebase-overview"}
