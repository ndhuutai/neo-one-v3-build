{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/forward-values","title":"Forward Values","content":{"type":"markdown","value":"\nForward values allow advanced interactivity between smart contracts, enabling use-cases that would not normally be possible.\n\n---\n\n[[toc]]\n\n---\n\n## Forward Value\n\nBefore we dive into the specifics, let's look at an example of how forward values are used:\n\n```typescript\ninterface TokenPayableContract {\n  readonly approveReceiveTransfer: (from: Address, value: Fixed<8>, ...args: ForwardValue[]) => boolean;\n}\n\nexport class Token extends SmartContract {\n  // Note that the implementation here is only to show how we\n  // can use forward values and is an incomplete implementation of a\n  // Token transfer method.\n  public transfer(from: Address, to: Address, value: Fixed<8>, ...args: ForwardValue[]): boolean {\n    const contract = Contract.for(to);\n    if (contract !== undefined) {\n      const payableContract = SmartContract.for<TokenPayableContract>(to);\n\n      return payableContract.approveReceiveTransfer(from, value, ...args);\n    }\n\n    return true;\n  }\n}\n```\n\n::: warning\n\nNote\n\nWe're using a [rest](https://www.typescriptlang.org/docs/handbook/functions.html#rest-parameters) parameter as the final parameter of the `transfer` method. Declaring a rest parameter means that the function will accept 0 or more additional arguments of that type.\n\n:::\n\n`ForwardValue`s represent any type. They're opaque to the contract that declared them. Instead of using them directly, the contract forwards them to another contract. In the example above we check to see if the target or `to` `Address` is a smart contract. If it is, we get an instance of it and invoke the `approveReceiveTransfer` method, forwarding any additional arguments that we received in the call to `transfer`.\n\nThis pattern allows the target contract a chance to react to the transfer, as well as allows the user to provide any additional arguments the contract may require to react to the transfer.\n\n---\n\n## Forwarded Value\n\nThe counterpart to `ForwardValue` is the tagged type `ForwardedValue<T>`. `ForwardedValue<T>` tags the type `T` such that the NEO•ONE toolchain will generate client APIs that simplify forwarding values. Given the following smart contract:\n\n```typescript\nexport class Escrow extends SmartContract {\n  public approveReceiveTransfer(from: Address, value: Fixed<8>, to: ForwardedValue<Address>): boolean {\n    // Update the escrow account for [from, to] with value\n    return true;\n  }\n}\n```\n\nThe NEO•ONE toolchain will generate a method called `forwardApproveReceiveTransferArgs`:\n\n```typescript\nconst receipt = await token.transfer.confirmed(\n  from,\n  escrow.definition.networks[networkName].address,\n  value,\n  ...escrow.forwardApproveReceiveTransferArgs(to),\n);\n```\n\nThe `forwardApproveReceiveTransferArgs` call above not only sets up the call to forward the specified arguments, but it additionally adds the `Escrow` contracts events (if any) to the resulting `receipt`.\n\nForwarding values also works recursively. For example, if the `Escrow` contract also specified a rest parameter of `ForwardValue`s and called another smart contract `Foo`'s `bar` method that expected a `ForwardedValue<string>`, the client API invocation would look like:\n\n```typescript\nconst receipt = await token.transfer.confirmed(\n  from,\n  escrow.definition.networks[networkName].address,\n  value,\n  ...escrow.forwardApproveReceiveTransferArgs(to, ...foo.forwardBarArgs('value')),\n);\n```\n\nIn this case, the `receipt` would contain the events for the `transfer` call, the `approveReceiveTransfer` call and the `bar` call.\n\n---\n\n## Reactive Smart Contracts\n\nReactive smart contracts are powerful and enable many use-cases that would otherwise not be possible. We recommend the following pattern when implementing your smart contracts.\n\nWhenever your smart contract has a method that takes an `action` on an `Address`, always check to see if the target `Address` is a smart contract. If it is, invoke the `approveReceive<action>` method of that smart contract with the same arguments `action` was called with, except the argument that is the smart contract `Address` itself. Additionally, pass a rest parameter of `ForwardValue`s to the method. Take a look at the `Token` example above to see this pattern in action.\n"},"link":"packages/neo-one-website/docs/2-advanced-guides/01-forward-values.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/user-accounts","title":"User Accounts"},"previous":{"slug":"/docs/native-assets","title":"Native Assets"}},"path":"docs/forward-values"}
