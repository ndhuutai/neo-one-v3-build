{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/angular","title":"Angular","content":{"type":"markdown","value":"\nNEO•ONE has first-class integration with Angular applications.\n\nIntegrating NEO•ONE with Angular is a breeze using the generated NEO•ONE client APIs.\n\n---\n\n[[toc]]\n\n---\n\n## Generated Code\n\nThe NEO•ONE toolchain emits an [Angular Service](https://angular.io/guide/dependency-injection#injecting-services) that aids in integrating an Angular application with NEO•ONE: `ContractsService`.\n\n### ContractsService\n\nThe `ContractsService` can be injected into any component or service in which you need access to the client APIs or smart contract methods.\n\n```typescript\nimport { Component } from '@angular/core';\nimport { ContractsService } from './neo-one';\n\n@Component({\n  selector: 'app-test-component',\n  templateUrl: './test-component.component.html',\n  styleUrls: ['./test-component.component.css'],\n})\nexport class TestComponent implements OnInit {\n  constructor(private contractsService: ContractsService) {}\n\n  onWithdraw(): void {\n    this.contractsService.token.withdraw\n      .confirmed()\n      .then\n      // update something\n      ();\n  }\n}\n```\n\nThe `ContractsService` makes responding to updates in the blockchain easy by providing access to [Observables](https://angular.io/guide/observables-in-angular). Here's how you might use the `ContractsService` to build a simple Angular component to update the current block count.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { ContractsService } from './neo-one';\n\n@Component({\n  selector: 'block-counter-component',\n  templateUrl: './block-counter.component.html',\n  styleUrls: ['./block-counter.component.css'],\n})\nexport class BlockCounter implements OnInit {\n  blockCount: number;\n\n  constructor(private contractsService: ContractsService) {\n    this.blockCount = 0;\n  }\n\n  ngOnInit() {\n    this.getBlocks();\n  }\n\n  getBlocks(): void {\n    this.contractsService.client.block$.subscribe((block) => {\n      this.blockCount = block.block.index;\n    });\n  }\n}\n```\n\n### Important Notes\n\n- For the smoothest experience using NEO•ONE with Angular 6+, you should use the browserified version of NEO•ONE. This version of NEO•ONE replaces Node.js builtin modules with their browser compatible shims. To use this version, you simply need to import any NEO•ONE client modules with the `-browserify` suffix. So, `@neo-one/client` is imported as `@neo-one/client-browserify`.\n- `allowSyntheticDefaultImports` must be set to `true` in the top level `tsconfig.json`.\n- `(window as any).global = window;` must be added in the `polyfill.ts` file.\n"},"link":"packages/neo-one-website/docs/2-advanced-guides/06-angular.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/vue","title":"Vue"},"previous":{"slug":"/docs/react","title":"React"}},"path":"docs/angular"}
