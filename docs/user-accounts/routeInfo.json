{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/user-accounts","title":"User Accounts","content":{"type":"markdown","value":"\nNEO•ONE client APIs revolve around the concept of user accounts which represent a single address controlled by the user of the dapp.\n\nThe `Client` class is an abstraction layer over `UserAccountProvider`s which implement the core logic. By using the `Client` class and the generated smart contract APIs throughout your dapp, you can ensure that your business logic is independent of the underlying `UserAccountProvider`s.\n\n---\n\n[[toc]]\n\n---\n\n## Client Configuration\n\nThe `createClient` helper function generated by the NEO•ONE toolchain is configured with a `LocalUserAccountProvider` backed by an in-memory `LocalKeyStore` by default. This can be easily configured by passing in a callback of the form:\n\n```typescript\n(provider: NEOONEProvider) => { [name: string]: UserAccountProvider }\n```\n\nThis callback will be passed a default `NEOONEProvider` that's been configured to work with your local private network as well as public nodes for the TestNet and MainNet. The return value will be used to configure the `Client`.\n\n::: warning\n\nTip\n\nYou can configure the `Client` to only work with external wallets provided by an extension or a dapp browser by checking `process.env.NODE_ENV === 'production'` and returning a subset of the `UserAccountProvider`s used during development.\n\n:::\n\nLet's take a look at an example:\n\n```typescript\nconst getUserAccountProviders = (provider: NEOONEProvider) => {\n  const dapp = new DappBrowserUserAccountProvider();\n  const extension = new BrowserExtensionUserAccountProvider();\n  const other = new SomeOtherWalletProvider();\n  if (process.env.NODE_ENV === 'production') {\n    return { dapp, extension, other };\n  }\n\n  const memory = new LocalUserAccountProvider({\n    keystore: new LocalKeyStore(new LocalMemoryStore()),\n    provider,\n  });\n\n  return { dapp, extension, other, memory };\n};\n\nconst client = createClient(getUserAccountProviders);\n```\n\nThis would configure a `Client` that knows how to communicate with a dapp browser (e.g. nOS), a browser extension (e.g. NEX) and some other integration provided by `SomeOtherWalletProvider`. In production, it would only communicate with those providers, while in development we've additionally configured a `LocalUserAccountProvider` with an in-memory `LocalKeyStore` for use in testing.\n\n::: warning\n\nNote\n\nIn order to take advantage of the automatic local network configuration and pre-configured wallets, you must configure a `LocalUserAccountProvider` using the argument `provider` and an in-memory keystore, like the above example.\n\n:::\n\n---\n\n## LocalUserAccountProvider\n\n`LocalUserAccountProvider` is a completely local to the application `UserAccountProvider` which directly connects to NEO•ONE RPC nodes in order to process read requests as well as create and send transactions. `LocalUserAccountProvider` must be configured with a `KeyStore` instance and a `Provider` instance. The `KeyStore` interface abstracts over `UserAccount`s, selecting them, getting the current one, as well as signing a message with a specified `UserAccount`. The `Provider` interface abstracts over specific RPC requests the `LocalUserAccountProvider` requires to function.\n\nIn the example above, we've configured it to use a `LocalKeyStore` which is backed by a `LocalMemoryStore` which provides `UserAccount`s via an in-memory store. `LocalKeyStore` can be configured with any object that implements the `Store` interface and can be easily backed by persistent storage in files or within browser local storage:\n\n```typescript\nimport localforage from 'localforage';\n\nconst localStorage = new LocalUserAccountProvider({\n  keystore: new LocalKeyStore(new LocalStringStore(localforage)),\n  provider,\n});\n```\n\nNEO•ONE currently also supports a `LedgerKeyStore`, which enables connecting to ledger devices in both NodeJS-like environments and browser-like environments.\n\n```typescript\nconst ledger = new LocalUserAccountProvider({\n  keystore: new LedgerKeyStore(provider),\n  provider,\n});\n```\n\n---\n\n## UserAccount and UserAccountID\n\n`UserAccount` is the main abstraction used to define the user's available accounts for signing transactions. It contains three properties:\n\n```typescript\ninterface UserAccount {\n  /**\n   * Uniquely identifies a `UserAccount` by its address and the network its used on.\n   */\n  readonly id: UserAccountID;\n  /**\n   * The name to use when displaying this account in a user-facing UI. Can be a user configured name or just the address.\n   */\n  readonly name: string;\n  /**\n   * The public key for the address.\n   */\n  readonly publicKey: PublicKeyString;\n}\n```\n\n`UserAccountID` is used throughout the `@neo-one/client` APIs to specify a particular account to take an action with. For example, all of the smart contract APIs accept an options object as the last parameter that can specify a `from` `UserAccountID` to invoke a method with.\n\n---\n\n## Integrating With NEO•ONE\n\nWant to integrate your wallet with NEO•ONE? Then this section is for you. The best way to integrate is to use the NEO•ONE client APIs with a `LocalUserAccountProvider` within your wallet. As described above, the `LocalUserAccountProvider` can be customized with specific `KeyStore` implementations that should satisfy the majority of wallet use-cases.\n\nOnce you've done that, come talk to us on [Discord](https://discord.gg/S86PqDE). The integration is currently a work in progress, but it's coming very soon.\n"},"link":"packages/neo-one-website/docs/2-advanced-guides/02-user-accounts.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/extended-client-apis","title":"Extended Client APIs"},"previous":{"slug":"/docs/forward-values","title":"Forward Values"}},"path":"docs/user-accounts"}
