{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/node-docker","title":"Local Docker Development","content":{"type":"markdown","value":"\nIn this section we will cover how to deploy a NEO•ONE Node locally using the NEO•ONE Node Docker image.\n\nIf you are unfamiliar with Docker or do not have a version installed locally visit their [getting started](https://www.docker.com/get-started) page.\n\n---\n\n[[toc]]\n\n---\n\n## Requirements\n\n- [Docker](https://www.docker.com/get-started)\n  - Minimum: **_at least_** 2GB Memory, 1cpu, and 50GB Storage allocated\n  - Recommended: 4GB Memory, 2cpu, and 60GB+ Storage allocated\n    (if you plan to deploy to a cluster you will need this for _each_ pod/container)\n\n## Getting Started\n\nNEO•ONE pushes a new node image to [dockerhub](https://hub.docker.com/r/neoonesuite/node) every time a new version is published. We publish a new node image with each commit as well as tagged versions for official releases. We recommend using the most recent tagged version, such as `neoonesuite/node:neo-one-node-binv2.3.0`.\n\nAfter you have installed Docker, run the following in a terminal:\n\n```bash\ndocker pull neoonesuite/node\ndocker run neoonesuite/node\n```\n\nVoila! You should now be running the most recent NEO•ONE Node in a local docker container and will see logs to confirm it has started. Since the NEO•ONE Node uses [pino](https://www.npmjs.com/package/pino) for logging we recommend piping the logs through [pino-pretty](https://github.com/pinojs/pino-pretty) during development. Note that the node won't begin syncing with the blockchain until additional configuration is provided.\n\n## Configuring\n\nThere are **several** ways to configure the node; any [rc](https://github.com/dominictarr/rc#rc) type configuration is accepted. as an example we can set the `logger` level of the node to _trace_ using either:\n\n```bash\ndocker run neoonesuite/node --telemetry.logging.level=trace\n```\n\nor through environment variables\n\n```bash\ndocker run -e neo-one_telemetry__logging__level=trace neoonesuite/node\n```\n\nAdditionally you have the option of creating a `config` (no extension) file and mounting it directly to the container. By default the node will look for a config at `/etc/neo-one`.\n\nSo if we have a config\n\n```bash\n## /path/to/config\n{\n  \"telemetry\": {\n    \"logging\": {\n      \"level\": \"trace\"\n    }\n  }\n}\n```\n\nlocated at `/path/to/config` we could mount this to the default location as:\n\n```bash\ndocker run -v /path/to:/etc/neo-one/ neoonesuite/node\n```\n\n(Note that you must mount the **entire** folder the config file is in)\n\nAfter running any the above you should see more logging on startup! For more configuration options see the [configuration reference](/docs/node-configuration).\n\n## Storage\n\nSimilarly to how we can mount a configuration folder to the container for local testing we can also mount a folder for storing the blockchain data our node will collect. By default, the node will use `/root/.local/share/neo-one` as its storage. We can mount a local folder `/path/to/node-data/` using\n\n```bash\ndocker run -v /path/to/node-data:/root/.local/share/neo-one neoonesuite/node\n```\n\nThis is helpful when testing locally as you won't have to re-sync your node-data on every restart.\n\n## Port Publishing\n\nBy default the container will be able to access external resources, such as connecting and syncing with other relay nodes after setting `node.rpcURLs`.\n\nIf you would like your local Docker container to be able to send its own data, you'll need to `publish` the port using docker commands. As an example we can enable node metrics using the following command:\n\n```bash\ndocker run -p 8001:8001 neoonesuite/node --telemetry.port=8001\n```\n\nUpon visiting `localhost:8001/metrics` you should now see the node-metrics page.\n\n::: warning\n\nNote\n\nBy default metrics are **disabled** so you _must_ include the `--telemetry.port=8001` argument or provide a telemetry port through other means of configuration (see above).\n\n:::\n\n## Examples\n\nThe following configurations should be a solid jumping off point for working with the node. For each of the three examples here we will also show how to implement them using [Docker Compose](/docs/node-compose/).\n\nIn all three examples we will use\n\n```bash\ndocker run -v /node-config/:/etc/neo-one/ -v /node-data/:/root/.local/share/neo-one neoonesuite/node\n```\n\nto mount our configuration and local data file before starting the node. Go ahead and create the two folders `node-config` and `node-data` if you would like to follow along.\n\n### Sync\n\nTo sync your node with other nodes on the network, you must specify them using the `node.rpcURLs` configuration setting. A list of current mainnet nodes can be found at: http://monitor.cityofzion.io/\n\n```bash\n#/node-config/config\n{\n  \"node\": {\n    \"rpcURLs\": [\n      \"http://seed6.ngd.network:10332\",\n      \"http://node1.nyc3.bridgeprotocol.io:10332\"\n    ]\n  }\n}\n```\n\nNow, if we apply this configuration we can begin to request block information from other nodes. After saving this to `node-config/config`, run the command listed above.\n\nUpon successfully starting the node, you should begin to see `relay_block` events!\n\n::: warning\n\nNote\n\nIts worth mentioning that syncing the entire blockchain can take a **very** long time. If you plan on syncing/restoring multiple times it might be worth creating a backup of your `node-data` folder.\n\n:::\n"},"link":"packages/neo-one-website/docs/3-node/1-docker.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/node-kubernetes","title":"Kubernetes"},"previous":{"slug":"/docs/config-options","title":"Configuration Options"}},"path":"docs/node-docker"}
