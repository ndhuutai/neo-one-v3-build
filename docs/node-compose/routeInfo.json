{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/node-compose","title":"Docker Compose","content":{"type":"markdown","value":"\nIn this section we will cover how to deploy a NEO•ONE Node to a swarm using Docker Compose.\n\nIf you haven't already be sure to check out the local docker development [section](/docs/node-docker) to familiarize yourself with the container we are deploying. Additionally, brushing up on [Docker-Compose](https://docs.docker.com/compose/) would also be worthwhile.\n\n---\n\n[[toc]]\n\n## Getting Started\n\nWe'll be deploying with docker-compose using `swarm` mode. The `docker-compose.yml` below is a very similar deployment to what we saw in the [kubernetes](/docs/node-kubernetes) section. We create a persistent named-volume for each container started and run our backup and sync configuration.\n\n```yml\n## docker-compose.yml\nversion: \"3.1\"\nservices:\n  node:\n    image: neoonesuite/node\n    command: [\n      \"--node.rpcURLs=http://seed6.ngd.network:10332\",\n      \"--node.rpcURLs=https://seed1.red4sec.com:10332\"\n    ]\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"1\"\n          memory: 4G\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - node-data:/root/.local/share/neo-one\nvolumes:\n  node-data:\n```\n\nTo start a docker swarm and apply our deployment you can run\n\n```bash\ndocker swarm init\ndocker stack deploy -c docker-compose.yml test\n```\n\nYou can then check this service is running with\n\n```bash\ndocker service ls\n```\n\nFinally, to shutdown this deployment kill the swarm using\n\n```bash\ndocker swarm leave --force\n```\n\n::: warning\n\nNote\n\nIf you delete the service created by docker, you will still need to cleanup the volume, `node-data` in our example, that is created on startup. You can find the volume using `docker volume ls` and remove it using `docker volume rm <volume-name>`.\n\n:::\n\n## Logs\n\nYou can list all of the containers being run using\n\n```bash\ndocker container ls\n```\n\nthen to see its logs you can either attach directly to the container (we recommend this only for testing startup as SIGINT will kill the container) with\n\n```bash\ndocker attach <container_id>\n```\n\nor check its most recent logs\n\n```bash\ndocker logs <container_id>\n```\n\n## Health Checks\n\nYou can add health checks to a docker swarm similar to a kubernetes setup. After enabling live checks in the NEO•ONE Node configuration we can enable a probe by adding the following to our compose configuration:\n\n```yml\nhealthcheck:\n  test: ['CMD', 'curl', '-f', 'http://localhost:<node-port>/live_health_check']\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n  start_period: 45s\n```\n\nSee [docker documentation](https://docs.docker.com/compose/compose-file/#healthcheck) for more information about health check configurations.\n"},"link":"packages/neo-one-website/docs/3-node/3-docker-compose.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/node-source","title":"Building From Source"},"previous":{"slug":"/docs/node-kubernetes","title":"Kubernetes"}},"path":"docs/node-compose"}
