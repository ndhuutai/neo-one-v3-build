{"version":3,"sources":["webpack:////Users/tainguyen/neo-one/common/temp/node_modules/@render-props/viewport/es/ViewportConsumer.js","webpack:///Tutorial.tsx","webpack:///TutorialLoading.tsx","webpack:///tutorial.tsx"],"names":["ViewportConsumer","props","observer","observe","any","Array","isArray","x","length","createElement","ViewportContext","Consumer","unstable_observedBits","children","context","propTypes","func","isRequired","useState","Tutorial","subSections","sidebar","subsections","current","setCurrent","allSections","reduce","acc","section","newSections","undefined","concat","getElementOffset","scrollValue","sectionTitle","Math","abs","title","element","document","getElementById","offsetParent","parentElement","id","offsetTop","getElementPosition","scrollY","newSection","slice","done","offset","currentOffset","result","findClosestSection","Content","slug","sidebarAlwaysVisible","TutorialLoading","MainLayout","path","Suspense","Helmet","fallback","ContentLayout"],"mappings":"+KAkBe,SAASA,EAAiBC,GAKvC,IAAIC,EAEJ,QAAsB,IAAlBD,EAAME,QACRD,EAAW,IAAQE,SACd,GAAIC,MAAMC,QAAQL,EAAME,SAAU,CACvCD,EAAWD,EAAME,QAAQ,GAEzB,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAME,QAAQK,OAAQD,IACxCL,EAAW,IAAUD,EAAME,QAAQI,QAGrCL,EAAW,IAAQD,EAAME,SAG3B,OAAO,IAAMM,cAAcC,EAAA,EAAgBC,SAAU,CACnDC,sBAAuBV,EACvBW,SApBF,SAAkBC,GAChB,OAAOb,EAAMY,SAASC,MAsB1Bd,EAAiBe,UAAY,CAC3BF,SAAU,IAAUG,KAAKC,Y,gCCpC3B,MAAM,SAAEC,GAAa,IA8BRC,EAAYlB,IACvB,MAAMmB,EAAcnB,EAAMoB,QAAQ,GAAGC,aAC9BC,EAASC,GAAcN,EAASE,EAAY,IAE7CK,EAAcL,EAAYM,OAAkC,CAACC,EAAKC,KACtE,MAAMC,OAAsCC,IAAxBF,EAAQN,YAA4B,CAACM,GAASG,OAAOH,EAAQN,aAAe,CAACM,GAEjG,OAAOD,EAAII,OAAOF,IACjB,IAEGG,EAAmB,CAACC,EAAqBC,IAC7CC,KAAKC,IAAIH,EAtBeI,KAC1B,MAAMC,EAAUC,SAASC,eAAe,IAAQH,IAChD,GAAgB,OAAZC,GAA6C,OAAzBA,EAAQG,aAAuB,CACrD,MAAMC,EAAgBH,SAASC,eAAeF,EAAQG,aAAaE,IAEnE,OAAyB,OAAlBD,EAAyBJ,EAAQM,UAAYF,EAAcE,UAAYN,EAAQM,UAGxF,OAVyB,KAwBAC,CAAmBX,IA8B5C,OACE,kBAAClC,EAAgB,KACd,EAAG8C,cAEF,GAAwB,oBAAbP,SAA0B,CACnC,MAAMQ,EAjCcD,IAC1BrB,EAAYuB,MAAM,GAAGtB,OACnB,CAACC,EAAKC,KACJ,GAAID,EAAIsB,KACN,OAAOtB,EAGT,MAAMuB,EAASlB,EAAiBc,EAASlB,EAAQS,OACjD,OAAIa,EAASvB,EAAIwB,cACR,CACLC,OAAQxB,EACRuB,cAAeD,EACfD,MAAM,GAIV,+BACKtB,GAAG,CACNsB,MAAM,KAGV,CACEG,OAAQ3B,EAAY,GACpB0B,cAAenB,EAAiBc,EAASrB,EAAY,GAAGY,OACxDY,MAAM,IAERG,OAOuBC,CAAmBP,GAClCC,IAAexB,GACjBC,EAAWuB,GAIf,OAAO,kBAACO,EAAA,EAAO,eAAC/B,QAASA,EAAQgC,KAAMC,sBAAoB,GAAKvD,O,mBCrFjE,MAAMwD,EAAkB,IAC7B,gBAACC,EAAA,EAAU,CAACC,KAAK,YACf,gBAAC,UAAO,O,cCEZ,MAAM,SAAEC,GAAa,IAGN,eACb,MAAM3D,EAAQ,yBAEd,OACE,oCACE,kBAAC4D,EAAA,EAAM,CAACxB,MAAM,yCACd,kBAACuB,EAAQ,CAACE,SAAU,kBAACL,EAAe,OAClC,kBAACM,EAAA,EAAa,CAACJ,KAAK,YAClB,kBAACxC,EAAQ,iBAAKlB","file":"templates/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/tutorial.41d43ef3.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport ViewportContext, {observe} from './ViewportContext'\n/**\nconst ViewportContext = () => (\n  <ViewportConsumer>\n    {\n      ({inFullView}) => (\n        <div>\n          header fully in view?\n          {JSON.stringify(inFullView(document.getElementById('main-header')))}\n        </div>\n      )\n    }\n  </ViewportConsumer>\n)\n**/\n\nexport default function ViewportConsumer(props) {\n  function Consumer(context) {\n    return props.children(context)\n  }\n\n  let observer\n\n  if (props.observe === void 0) {\n    observer = observe.any\n  } else if (Array.isArray(props.observe)) {\n    observer = props.observe[0]\n\n    for (let x = 1; x < props.observe.length; x++) {\n      observer = observe | props.observe[x]\n    }\n  } else {\n    observer = observe[props.observe]\n  }\n\n  return React.createElement(ViewportContext.Consumer, {\n    unstable_observedBits: observer,\n    children: Consumer,\n  })\n}\nViewportConsumer.propTypes = {\n  children: PropTypes.func.isRequired,\n}\n","// @ts-ignore\nimport { ViewportConsumer } from '@render-props/viewport';\nimport React from 'react';\nimport slugify from 'slugify';\nimport { AdjacentInfo, SectionData, SubsectionData } from '../../types';\nimport { Content, MarkdownContent } from '../content';\n\nconst { useState } = React;\n\nexport interface TutorialProps {\n  readonly title: string;\n  readonly content: MarkdownContent;\n  readonly link: string;\n  readonly sidebar: readonly SectionData[];\n  readonly next?: AdjacentInfo;\n  readonly previous?: AdjacentInfo;\n}\n\ninterface SectionScanResult {\n  readonly result: SubsectionData;\n  readonly currentOffset: number;\n  readonly done: boolean;\n}\n\nconst NULL_OFFSET_RETURN = 10000000;\n\nconst getElementPosition = (title: string): number => {\n  const element = document.getElementById(slugify(title));\n  if (element !== null && element.offsetParent !== null) {\n    const parentElement = document.getElementById(element.offsetParent.id);\n\n    return parentElement === null ? element.offsetTop : parentElement.offsetTop + element.offsetTop;\n  }\n\n  return NULL_OFFSET_RETURN;\n};\n\nexport const Tutorial = (props: TutorialProps) => {\n  const subSections = props.sidebar[0].subsections;\n  const [current, setCurrent] = useState(subSections[0]);\n\n  const allSections = subSections.reduce<readonly SubsectionData[]>((acc, section) => {\n    const newSections = section.subsections !== undefined ? [section].concat(section.subsections) : [section];\n\n    return acc.concat(newSections);\n  }, []);\n\n  const getElementOffset = (scrollValue: number, sectionTitle: string) =>\n    Math.abs(scrollValue - getElementPosition(sectionTitle));\n\n  const findClosestSection = (scrollY: number) =>\n    allSections.slice(1).reduce<SectionScanResult>(\n      (acc, section) => {\n        if (acc.done) {\n          return acc;\n        }\n\n        const offset = getElementOffset(scrollY, section.title);\n        if (offset < acc.currentOffset) {\n          return {\n            result: section,\n            currentOffset: offset,\n            done: false,\n          };\n        }\n\n        return {\n          ...acc,\n          done: true,\n        };\n      },\n      {\n        result: allSections[0],\n        currentOffset: getElementOffset(scrollY, allSections[0].title),\n        done: false,\n      },\n    ).result;\n\n  return (\n    <ViewportConsumer>\n      {({ scrollY }: { readonly scrollY: number }) => {\n        // tslint:disable:strict-type-predicates\n        if (typeof document !== 'undefined') {\n          const newSection = findClosestSection(scrollY);\n          if (newSection !== current) {\n            setCurrent(newSection);\n          }\n        }\n\n        return <Content current={current.slug} sidebarAlwaysVisible {...props} />;\n      }}\n    </ViewportConsumer>\n  );\n};\n","import { Loading } from '@neo-one/react-common';\nimport * as React from 'react';\nimport { MainLayout } from './MainLayout';\n\nexport const TutorialLoading = () => (\n  <MainLayout path=\"tutorial\">\n    <Loading />\n  </MainLayout>\n);\n","// tslint:disable-next-line no-import-side-effect\nimport '../polyfill';\n\nimport React from 'react';\nimport { useRouteData } from 'react-static';\nimport { Helmet, Tutorial, TutorialProps } from '../components';\nimport { ContentLayout, TutorialLoading } from '../layout';\n\nconst { Suspense } = React;\n\n// tslint:disable-next-line:no-default-export export-name\nexport default () => {\n  const props = useRouteData<TutorialProps>();\n\n  return (\n    <>\n      <Helmet title=\"Tutorial: Intro to NEO•ONE - NEO•ONE\" />\n      <Suspense fallback={<TutorialLoading />}>\n        <ContentLayout path=\"tutorial\">\n          <Tutorial {...props} />\n        </ContentLayout>\n      </Suspense>\n    </>\n  );\n};\n"],"sourceRoot":""}