{"version":3,"sources":["webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/errors.js","webpack:///jsonRPCLocalProvider.init.ts","webpack:///./packages/neo-one-node-storage-common/dist/cjs/index.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/common.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/errors.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/getValidators.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/wrapExecuteScripts.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/BlockSentContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/InitialContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/SignatureSentContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/RequestSentContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/ViewChangingContext.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/Command.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/index.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/NetworkAddress.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/InventoryType.js","webpack:///FullNode.ts","webpack:///constants.ts","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/index.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/levelUpStorage.js","webpack:///./packages/neo-one-node-storage-common/dist/cjs/keys.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/convertChange.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/read.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/streamToObservable.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/index.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/Blockchain.js","webpack:///./packages/neo-one-logger/dist/cjs/loggers.js","webpack:///./packages/neo-one-logger-config/dist/cjs/index.js","webpack:///./packages/neo-one-logger-config/dist/cjs/pretty.js","webpack:///./packages/neo-one-logger/dist/cjs/types.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/ValidatorCache.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/WriteBatchBlockchain.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/StorageCache.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/index.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/Node.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/index.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/Consensus.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/RequestReceivedContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/types.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/cloneBlockSent.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/cloneInitial.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/ConsensusContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/ConsensusQueue.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/handleConsensusPayload.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/handlePersistBlock.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/handleTransactionReceived.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/runConsensus.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/errors.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/Message.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/AddrPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/FilterAddPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/FilterLoadPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/GetBlocksPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/HeadersPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/InvPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/MerkleBlockPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/VersionPayload.js","webpack:///Network.ts","webpack:///./packages/neo-one-node-rpc-handler/dist/cjs/index.js","webpack:///./packages/neo-one-node-rpc-handler/dist/cjs/createHandler.js","webpack:///JSONRPCLocalProvider.ts","webpack:///./packages/neo-one-node-consensus/dist/cjs/common.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/Context.js","webpack:///index.ts","webpack:///comlink.ts","webpack:///endpoint.ts","webpack:///./packages/neo-one-logger/dist/cjs/index.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/index.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/HeaderContext.js"],"names":["Object","defineProperty","exports","value","UnknownChangeTypeError","KeyNotFoundError","UnknownTypeError","NotFoundError","utils_1","makeErrorWithCode","type","undefined","keyString","expose","self","keys_1","enumerable","get","keys","deserializeBlockHash","serializeBlockHash","deserializeHeaderHash","serializeHeaderHash","client_common_1","hash","common","uInt256ToBuffer","bufferToUInt256","CoinUnspentError","CoinClaimedError","InvalidClaimError","UnknownVerifyError","WitnessVerifyError","ScriptVerifyError","GenesisBlockNotRegisteredError","message","asset","governingHash","unspentCoins","getValidators","processStateTransaction","getDescriptorChanges","tslib_1","node_core_1","bn_js_1","lodash_1","__importDefault","ValidatorCache_1","processTransaction","async","blockchain","cache","transaction","allOutputs","Promise","all","inputs","map","input","output","negative","concat","outputs","neg","account","getAccount","address","updateAccountBalance","uInt256Equal","settings","governingToken","votes","length","publicKey","updateValidatorVotes","updateValidatorsCountVotes","processOutput","accountHashes","Set","uInt160ToHex","hexToUInt160","touchedValidators","touchedValidatorsSet","reduce","acc","vote","ecPointToHex","hexToECPoint","validator","getValidator","registered","eq","utils","ZERO","deleteValidator","transactions","governingTokenHash","accountChanges","validatorVotesChanges","validatorRegisteredChanges","validatorsCountChanges","allDescriptors","descriptors","accountDescriptors","filter","descriptor","groupedAccountDescriptors","entries","default","groupBy","bufferToUInt160","key","balance","getBalance","voteHex","sub","reader","BinaryReader","readArray","readECPoint","add","validatorDescriptors","bufferToECPoint","some","byte","validatorChanges","current","tryGetValidatorsCount","addValidatorsCount","updateValidatorsCount","tryGetValidator","addValidator","updateValidator","validatorsCount","mutableValidatorsCountVotes","forEach","index","publicKeyHex","Validator","ValidatorsCount","ValidatorCache","TransactionType","State","StateTransaction","hashHex","getValidatorsCount","update","validators","getAllValidators","numValidators","Math","max","weightedAverage","weightedFilter","count","gt","BN","weight","standbyValidators","standbyValidatorsSet","validatorsPublicKeySet","take","has","sort","aValidator","bValidator","ecPointCompare","cmp","standbyValidatorsArray","i","size","hex","aKey","bKey","wrapExecuteScripts","execute","result","state","VMState","Halt","InvocationResultSuccess","gasConsumed","gasCost","stack","InvocationResultError","errorMessage","error","BlockSentContext","Context_1","Context","expectedView","this","previousHash","blockIndex","viewNumber","myIndex","primaryIndex","blockReceivedTimeSeconds","InitialContext","SignatureSentContext","HeaderContext_1","RequestSentContext_1","HeaderContext","signatures","header","block","transactionHashes","RequestSentContext","super","ViewChangingContext","assertCommand","InvalidCommandError","Command","command","isCommand","AddrPayload_1","AddrPayload","FilterAddPayload_1","FilterAddPayload","FilterLoadPayload_1","FilterLoadPayload","GetBlocksPayload_1","GetBlocksPayload","HeadersPayload_1","HeadersPayload","InvPayload_1","InvPayload","MerkleBlockPayload_1","MerkleBlockPayload","NetworkAddress_1","NetworkAddress","VersionPayload_1","VersionPayload","SERVICES","InventoryType_1","InventoryType","ip_address_1","host","port","timestamp","services","serializeWire","createSerializeWire","serializeWireBase","bind","readUInt32LE","readUInt64LE","Address6","fromByteArray","readBytes","readUInt16BE","canonical","canonicalForm","options","deserializeWireBase","context","buffer","getAddress6","toByteArray","_a","split","fromAddress4","writer","InvalidFormatError","writeUInt32LE","writeUInt64LE","addressSerialized","Buffer","from","writeBytes","alloc","writeUInt16BE","assertInventoryType","InvalidInventoryTypeError","inventoryType","isInventoryType","FullNode","developerClient","build","startPromise","startInternal","then","mutableDisposable","data","primaryPrivateKey","stringToPrivateKey","PRIVATE_NET_PRIVATE_KEY","primaryPublicKey","stringToECPoint","PRIVATE_NET_PUBLIC_KEY","addPublicKey","uInt160ToString","privateKeyToScriptHash","ecPointToString","privateNet","storage","db","id","messageMagic","create","vm","nodeOptions","consensus","privateKey","privateKeyToString","node","createNetwork","start","handleResetProject","reset","handleGetNEOTrackerURL","updateSettings","secondsPerBlock","constants","levelUpStorage_1","levelUpStorage","node_storage_common_1","__importStar","convertChange_1","errors_1","read","getHash","hashOrIndex","serializeHeaderIndexHashKey","notFound","headerBase","createReadStorage","serializeKey","typeKeyToSerializeKey","deserializeValue","Header","deserializeWire","getHeader","tryGet","createTryGet","tryGetLatest","createTryGetLatest","latestKey","maxHeaderHashKey","deserializeResult","blockBase","Block","getBlock","maxBlockHashKey","deserializeTransactionWire","Output","blockData","BlockData","createReadAllStorage","minKey","accountMinKey","maxKey","accountMaxKey","Account","accountUnclaimed","createReadGetAllStorage","getMinKey","getAccountUnclaimedKeyMin","getMaxKey","getAccountUnclaimedKeyMax","AccountUnclaimed","accountUnspent","getAccountUnspentKeyMin","getAccountUnspentKeyMax","AccountUnspent","action","getActionKeyMin","getActionKeyMax","deserializeActionWire","Asset","transactionData","TransactionData","contract","Contract","storageItem","getStorageItemKeyMin","getStorageItemKeyMax","StorageItem","validatorMinKey","validatorMaxKey","invocationData","InvocationData","createReadMetadataStorage","validatorsCountKey","close","changeSet","changes","convertChange","converted","push","batch","resolve","reject","createKeyStream","on","createPrefix","createMax","accountKeyPrefix","accountUnclaimedKeyPrefix","accountUnspentKeyPrefix","actionKeyPrefix","assetKeyPrefix","blockKeyPrefix","blockDataKeyPrefix","headerKeyPrefix","headerHashKeyPrefix","transactionKeyPrefix","outputKeyPrefix","transactionDataKeyPrefix","contractKeyPrefix","storageItemKeyPrefix","validatorKeyPrefix","invocationDataKeyPrefix","settingsPrefix","createSerializeAccountInputKey","prefix","uInt256ToString","createGetAccountInputKeyMin","createGetAccountInputKeyMax","toString","notNull","join","serializeActionKey","createSerializeUInt160Key","serializeUInt160Key","createSerializeUInt256Key","serializeUInt256Key","indexStart","indexStop","convertDeleteChange","change","assertNever","changeIn","convertAddChange","createTryGetMetadata","createAll$","operators_1","streamToObservable_1","code","serialized","streamToObservable","createValueStream","gte","lte","pipe","readStorage","all$","getAll$","rxjs_1","getStream","Observable","observer","stream","done","cleanup","removeListener","onEnd","onError","onData","complete","next","once","Blockchain_1","Blockchain","logger_1","js_priority_queue_1","getValidators_1","wrapExecuteScripts_1","WriteBatchBlockchain_1","logger","createChild","nodeLogger","component","mutablePersistingBlocks","mutableBlockQueue","comparator","a","b","mutableInQueue","mutableRunning","mutableBlock$","Subject","debug","name","calculateClaimAmount","claims","spentCoins","claim","tryGetSpentCoin","filteredSpentCoinsIn","filteredSpentCoins","spentCoin","claimed","coins","coin","startHeight","endHeight","decrementInterval","generationAmount","getSystemFee","systemFee","verifyScript","scriptContainer","witness","verification","builder","ScriptBuilder","emitAppCallVerification","uInt160Equal","crypto","toScriptHash","createWriteBlockchain","mutableActions","globalActionIndex","executeResult","executeScripts","scripts","invocation","triggerType","TriggerType","Verification","NULL_ACTION","gas","ONE_HUNDRED_MILLION","listeners","onLog","scriptHash","LogAction","ONE","onNotify","args","NotificationAction","actions","Fault","assign","failureMessage","asBoolean","tryGetInvocationData","contracts","assetHash","contractHashes","contractHash","actionIndexStart","actionIndexStop","toArray","toPromise","deletedContractHashes","migratedContractHashes","voteUpdates","storageChanges","tryGetTransactionData","getUnclaimed","values","getUnspent","isSpent","endHeights","mutableCurrentBlock","currentBlock","mutablePreviousBlock","previousBlock","mutableCurrentHeader","currentHeader","settings$","BehaviorSubject","deserializeWireContext","feeContext","utilityToken","fees","registerValidatorFee","serializeJSONContext","addressVersion","persistHeaders","genesisBlock","persistBlock","getValue","doneRunningPromise","mutableDoneRunningResolve","info","unsafe","queue","persistBlocksAsync","_headers","verify","tryGetBlock","tryGetHeader","getAsset","getOutput","tryGetAccount","currentHeight","payload","currentIndex","currentBlockHash","memPool","verifications","currentBlockIndex","includes","script","InvocationTransaction","ONE_HUNDRED_FIXED8","invokeTransaction","ScriptContainerType","Transaction","Application","skipWitnessVerify","stop","entry","cleanBlockQueue","entryNonNull","logData","Labels","NEO_BLOCK_INDEX","persistBlockInternal","err","dequeBlockQueue","dequeue","verifyBlock","commit","getChangeSet","WriteBatchBlockchain","getFinalLogger","setGlobalLogLevel","testLogger","httpLogger","cliLogger","rpcLogger","serverLogger","editorLogger","logger_config_1","pino_1","createLogger","service","browser","base","prettyPrint","getPretty","extreme","browserOptions","window","origin","asObject","loggers","level","final","parent","bindings","child","__exportStar","setPretty","pretty","newPretty","mutableAccounts","mutableValidators","assetHex","uInt256ToHex","balances","Error","newValidator","mutablePublicKeyToValidator","fromPairs","mutableValidatorsCount","slice","StorageCache_1","currentBlockInternal","currentHeaderInternal","OutputStorageCache","caches","ReadAllAddUpdateDeleteStorageCache","readAllStorage","getKeyFromValue","getKeyString","createAddChange","createDeleteChange","ReadGetAllAddDeleteStorageCache","readGetAllStorage","matchesPartialKey","ReadGetAllAddStorageCache","ReadAddUpdateStorageCache","BlockLikeStorageCache","ReadAddStorageCache","onAdd","out","allowDupes","ReadAddDeleteStorageCache","ReadGetAllAddUpdateDeleteStorageCache","every","idx","ReadAddUpdateMetadataStorageCache","getTrackedChangeSet","maybePrevBlockData","outputContractsList","stringToUInt160","prevBlockData","lastGlobalTransactionIndex","NEGATIVE_ONE","lastGlobalActionIndex","outputContracts","outputContract","utxo","rest","partition","Claim","ClaimTransaction","ContractTransaction","Miner","MinerTransaction","persistTransactions","persistUTXOTransactions","outputWithInputs","idxAndTransaction","getOutputWithInput","blockHash","globalIndex","updateAccounts","updateCoins","persistTransaction","transactionIn","transactionIndex","globalActionIndexIn","Register","RegisterTransaction","amount","precision","owner","admin","issuer","expiration","isFrozen","Issue","IssueTransaction","results","getTransactionResults","stringToUInt256","available","Enrollment","EnrollmentTransaction","Publish","PublishTransaction","Invocation","temporaryBlockchain","transactionHash","onMigrateContract","to","onSetVotes","persistingBlock","addActionsPromise","find","contractsChangeSet","addChange","subType","StorageChangeAdd","StorageChangeModify","deleteChange","StorageChangeDelete","addTrackedChange","validatorsCountVotes","delete","inputOutputs","claimOutputs","getInputOutputs","addressValues","addressSpent","groupByAddress","addressClaimed","mapValues","addressOutputs","spent","outs","updateAccount","_address","Input","promises","newAccount","isDeletable","inputClaims","hashInputClaims","updateCoin","hexToUInt256","inputClaim","BaseReadMetadataStorageCache","ReadAllAddStorageCache","ReadAddUpdateDeleteStorageCache","BaseReadStorageCache","mutableValues","tryGetTracked","trackedChange","createGet","tryGetValue","addValue","_key","ReadStorageCache","ReadAllStorageCache","defer","concatMap","EMPTY","of","ReadGetAllStorageCache","createAdd","createUpdate","updateFunc","updatedValue","createDelete","mutableIndexValues","getOutputValueKeyString","createGetMetadata","mutableValue","ReadMetadataStorageCache","createAddMetadata","createUpdateMetadata","Node_1","Node","node_consensus_1","bloem_1","bloom_filter_1","cross_fetch_1","lru_cache_1","Command_1","Message_1","payload_1","createScalingBloomFilter","ScalingBloem","initial_capacity","scaling","compareTransactionAndFees","val1","val2","networkFee","divn","lt","compare","LOCAL_HOST_ADDRESSES","mutableUnhealthyPeerSeconds","requestBlocks","debounce","peer","mutableBestPeer","mutableGetBlocksRequestsCount","findBestPeer","network","blacklistAndClose","shouldRequestBlocks","mutableGetBlocksRequestsIndex","mutableGetBlocksRequestTime","Date","now","sendMessage","createMessage","getblocks","hashStart","onRequestEndpoints","throttle","relay","getaddr","fetchEndpointsFromRPC","trimMemPool","mutableMemPool","transactionAndFees","getNetworkFee","memPoolSize","transactionAndFee","negotiate","version","protocolVersion","NODE_NETWORK","round","externalPort","nonce","userAgent","receiveMessage","versionPayload","NegotiationError","checkVersion","getEndpointConfig","endpoint","isValid","verack","nextMessage","mutableBloomFilter","checkPeerHealth","prevHealth","checkTimeSeconds","nowSeconds","mutableBlockIndex","healthy","onEvent","event","connectedPeer","resetRequestBlocks","createMessageTransform","MessageTransform","onMessageReceived","floor","random","UINT_MAX_NUMBER","mutableKnownBlockHashes","tempKnownBlockHashes","mutableKnownTransactionHashes","tempKnownTransactionHashes","mutableKnownHeaderHashes","tempKnownHeaderHashes","consensusCache","mutableConsensus","connectedPeers","clear","disposable","noopDisposable","composeDisposables","Consensus","consensusDisposable","unhealthyPeerSeconds","throwVerifyError","forceAdd","MEM_POOL_SIZE","finalResult","logLabels","NEO_TRANSACTION_HASH","foundTransaction","verifyResult","NEO_TRANSACTION_FOUND","verifyTransaction","onTransactionReceived","relayTransactionInternal","verificationTransaction","relayTransaction","InvalidRelayStrippedTransactionType","zip","equals","RelayStrippedTransactionMismatch","inv","hashes","set","mempool","messagePayload","testFilter","write","bestPeer","peers","maxBy","shuffle","getBlocksRequestTime","permanentlyBlacklist","otherPeer","AlreadyConnectedError","doFetchEndpointsFromRPC","rpcURLs","rpcURL","fetchEndpointsFromRPCURL","response","method","headers","body","JSON","stringify","jsonrpc","params","ok","status","statusText","json","connected","createEndpoint","addEndpoint","HTTP_URL","addr","onAddrMessageReceived","onBlockMessageReceived","onConsensusMessageReceived","filteradd","onFilterAddMessageReceived","filterclear","onFilterClearMessageReceived","filterload","onFilterLoadMessageReceived","onGetAddrMessageReceived","onGetBlocksMessageReceived","getdata","onGetDataMessageReceived","getheaders","onGetHeadersMessageReceived","onHeadersMessageReceived","onInvMessageReceived","onMemPoolMessageReceived","tx","onVerackMessageReceived","onVersionMessageReceived","alert","merkleblock","notfound","ping","pong","catch","addresses","relayBlock","onPersistBlock","verifyConsensusPayload","onConsensusPayloadReceived","filterAdd","insert","filterLoad","k","tweak","vData","nHashFuncs","nTweak","createPeerBloomFilter","getBlocks","getHeaders","getData","createMerkleBlockPayload","flags","headersPayload","ready","maxHeight","hashStopIndexPromise","hashStop","ZERO_UINT256","hashStopHeader","min","hashStartHeaders","hashEnd","hashStartHeader","head","orderBy","range","bloomFilterIn","bloomFilter","contains","tree","MerkleTree","trim","mutableBuffer","allocUnsafe","merkleRoot","consensusData","nextConsensus","transactionCount","toHashArray","Message","magic","Consensus_1","asynciterablex_1","scan_1","common_1","ConsensusContext_1","ConsensusQueue_1","handleConsensusPayload_1","handlePersistBlock_1","handleTransactionReceived_1","runConsensus_1","mutableQueue","ConsensusQueue","privateKeyToPublicKey","feeAddress","publicKeyToScriptHash","mutableConsensusContext","ConsensusContext","pause","doStart","promise","seconds","fastForwardOffset","fastForwardToTime","clearTimer","mutableStartPromise","completed","initialResult","initializeNewConsensus","consensusContext","AsyncIterableX","scan","handlePersistBlock","handleConsensusPayload","handleTransactionReceived","runConsensus","handleResult","timerSeconds","handleTimer","mutableTimerSeconds","mutableTimer","setTimeout","clearTimeout","RequestReceivedContext","SignatureSentContext_1","ViewChangingContext_1","cloneBlockSent","BlockSentContext_1","cloneInitial","InitialContext_1","mutableFastForwardSeconds","mutableItems","mutableResolvers","mutableDoneInternal","Symbol","asyncIterator","item","shift","pushTimer","resolver","context_1","consensusMessage","validatorIndex","ConsensusMessageType","ChangeView","contextIn","newViewNumber","mutableExpectedView","cloneExpectedView","checkExpectedView","initializeConsensus","handleChangeView","PrepareRequest","mutableSignatures","signature","newContext","nextContext","res","addTransaction","minerTransaction","syncMemPool","handlePrepareRequest","PrepareResponse","cloneSignatures","checkSignatures","handlePrepareResponse","transactionHashesSet","bignumber_js_1","requestSentContext","cloneRequestSent","randomUInt64","mutableTransactions","calculateNetworkFee","isZero","mod","UINT_MAX","addn","toNumber","createMinerTransaction","maxTransactionsPerBlock","mutableNetworkFees","first","second","div","comparedTo","_unused","unshift","previousHeader","getConsensusAddress","sign","signAndRelay","PrepareRequestConsensusMessage","nullthrows","incrementExpectedView","signAndRelayChangeView","initializeConsensusInitial","requestChangeView","reason","InvalidMessageTransformEncodingError","PAYLOAD_MAX_SIZE","COMMAND_LENGTH","stream_1","calculateChecksum","toUInt32LE","hash256","deserializeMessageHeader","readFixedString","checksum","payloadBuffer","payloadBufferChecksum","payloadOptions","ConsensusPayload","writeFixedString","SIZE_OF_MESSAGE_HEADER","IOHelper","sizeOfUInt32LE","sizeOfFixedString","Transform","readableObjectMode","chunk","encoding","callback","remainingBuffer","mutableMessages","processBuffer","remaining","clone","writeArray","readVarBytesLE","writeVarBytesLE","readUInt8","writeUInt8","readUInt256","writeUInt256","BlockBase","merkleBlockPayloadSizeInternal","lazy","sizeOfArray","sizeOfUInt256","sizeOfVarBytesLE","deserializeBlockBaseWireBase","readVarUIntLE","INT_MAX_VALUE","writeVarUIntLE","readUInt16LE","readVarString","readBoolean","writeUInt16LE","writeVarString","writeBoolean","Network","_peer","_buffer","_endpoint","createHandler","JSONRPCError","RPC_METHODS","getaccountstate","getassetstate","getbestblockhash","getblock","getblockcount","getblockhash","getblocksysfee","getconnectioncount","getcontractstate","getrawmempool","getrawtransaction","getstorage","gettxout","invoke","invokefunction","invokescript","sendrawtransaction","submitblock","validateaddress","getpeers","relaytransaction","relaystrippedtransaction","getoutput","getclaimamount","getallstorage","testinvocation","gettransactionreceipt","getinvocationdata","getvalidators","getnetworksettings","runconsensusnow","updatesettings","getsettings","fastforwardoffset","fastforwardtotime","getneotrackerurl","resetproject","UNKNOWN","INVALID","createJSONRPCHandler","handlers","handleSingleRequest","requestIn","labels","request","Array","isArray","validateRequest","RPC_METHOD","handler","handlerParams","handleRequestSafe","batchRequest","handleRequest","errorResponse","RPC_TYPE","getTransactionReceipt","JSONHelper","writeUInt64","checkHeight","height","addressToScriptHash","serializeJSON","watchTimeoutMS","block$","timeout","readUInt160","readBuffer","receipt","invokeScript","isvalid","transactionJSON","resultJSON","writeUInt160","relayStrippedTransaction","fixed8ToDecimal","switchMap","fee","issueGASFee","runConsensusNow","newSettings","resume","provider","req","LOCAL_NETWORK_NAME","JSONRPCLocalProvider","getOptions","handleResponse","getInitialContextAdd","initializeConsensusCommon","UnsignedConsensusPayload","relayConsensusPayload","findIndex","ecPointEqual","p","M","mutablePublicKeyToSignature","j","createMultiSignatureWitness","Witness","ChangeViewConsensusMessage","getPrimaryIndexType","verified","transactionsLength","consensusAddress","cloneSignatureSent","PrepareResponseConsensusMessage","cloneViewChanging","requestChangeViewBackup","_options","class","constructor","TRANSFERABLE_TYPES","ArrayBuffer","MessagePort","uid","Number","MAX_SAFE_INTEGER","proxyValueSymbol","throwSymbol","transferHandlers","Map","canHandle","obj","Function","serialize","port1","port2","MessageChannel","deserialize","proxy","pingPongMessageCounter","target","isWindow","windowEndpoint","isEndpoint","activateEndpoint","cbProxy","cb","callPath","Proxy","construct","_target","argumentsList","apply","_thisArg","property","r","_proxy","irequest","wrapValue","unwrapValue","msg","transferables","attachMessageHandler","f","removeEventListener","detachMessageHandler","postMessage","pingPongMessage","transferableProperties","proxyValue","rootObj","iresult","that","propName","e","makeInvocationResult","arg","transferHandler","wrappedChildren","iterateUnhandledProperties","handleProperty","path","visited","WeakSet","isView","wrappedValue","wrappedChild","isRawWrappedValue","wrappedChildValue","newValue","replaceValueInObjectAtPath","newVal","lastKey","w","addEventListener","transfer","isMessagePort","prop","isTransferable","thing","iterateAllProperties","getEndpoint","endpointIn","isWorker","worker","terminate","activate","endpointEndpoint","computeRoot","toJSON"],"mappings":"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","file":"workers.18.e770c5a7.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnknownChangeTypeError = exports.KeyNotFoundError = exports.UnknownTypeError = exports.NotFoundError = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nexports.NotFoundError = utils_1.makeErrorWithCode('NOT_FOUND', () => 'Not found.');\nexports.UnknownTypeError = utils_1.makeErrorWithCode('UNKNOWN_TYPE', (type) => `Unknown type${type === undefined ? `.` : `, found: ${type}`}`);\nexports.KeyNotFoundError = utils_1.makeErrorWithCode('KEY_NOT_FOUND', (keyString) => `Key ${keyString} not found in database.`);\nexports.UnknownChangeTypeError = utils_1.makeErrorWithCode('UNKNOWN_CHANGE_TYPE', () => 'Unknown change type.');\n\n//# sourceMappingURL=errors.js.map\n","import { JSONRPCLocalProvider } from '@neo-one/node-browser';\nimport { comlink } from '@neo-one/worker';\n\ncomlink.expose(JSONRPCLocalProvider, self);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keys_1 = require(\"./keys\");\nObject.defineProperty(exports, \"keys\", { enumerable: true, get: function () { return keys_1.keys; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeBlockHash = exports.serializeBlockHash = exports.deserializeHeaderHash = exports.serializeHeaderHash = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nexports.serializeHeaderHash = (hash) => client_common_1.common.uInt256ToBuffer(hash);\nexports.deserializeHeaderHash = (hash) => client_common_1.common.bufferToUInt256(hash);\nexports.serializeBlockHash = (hash) => client_common_1.common.uInt256ToBuffer(hash);\nexports.deserializeBlockHash = (hash) => client_common_1.common.bufferToUInt256(hash);\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinUnspentError = exports.CoinClaimedError = exports.InvalidClaimError = exports.UnknownVerifyError = exports.WitnessVerifyError = exports.ScriptVerifyError = exports.GenesisBlockNotRegisteredError = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nexports.GenesisBlockNotRegisteredError = utils_1.makeErrorWithCode('GENESIS_BLOCK_NOT_REGISTERED', () => 'Genesis block was not registered with storage.');\nexports.ScriptVerifyError = utils_1.makeErrorWithCode('SCRIPT_VERIFY', (message) => message);\nexports.WitnessVerifyError = utils_1.makeErrorWithCode('WITNESS_VERIFY', () => 'Witness verification failed.');\nexports.UnknownVerifyError = utils_1.makeErrorWithCode('UNKNOWN_VERIFY', (message) => message);\nexports.InvalidClaimError = utils_1.makeErrorWithCode('INVALID_CLAIM', (asset, governingHash) => `Invalid Claim. Coin with asset: ${asset} does not match governing hash: ${governingHash}`);\nexports.CoinClaimedError = utils_1.makeErrorWithCode('COIN_CLAIMED', (asset, value) => `Coin with asset: ${asset}, value: ${value} is already claimed.`);\nexports.CoinUnspentError = utils_1.makeErrorWithCode('COIN_UNSPENT', (unspentCoins) => `${unspentCoins} coins unspent.`);\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getValidators = exports.processStateTransaction = exports.getDescriptorChanges = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst ValidatorCache_1 = require(\"./ValidatorCache\");\nconst processOutput = async (blockchain, cache, output, negative) => {\n    let { value } = output;\n    if (negative) {\n        value = value.neg();\n    }\n    const [account] = await Promise.all([\n        cache.getAccount(output.address),\n        cache.updateAccountBalance(output.address, output.asset, value),\n    ]);\n    if (client_common_1.common.uInt256Equal(output.asset, blockchain.settings.governingToken.hash) && account.votes.length > 0) {\n        await Promise.all([\n            Promise.all(account.votes.map(async (publicKey) => cache.updateValidatorVotes(publicKey, value))),\n            cache.updateValidatorsCountVotes(account.votes.length - 1, value),\n        ]);\n    }\n};\nconst processTransaction = async (blockchain, cache, transaction) => {\n    let allOutputs = await Promise.all(transaction.inputs.map(async (input) => {\n        const output = await blockchain.output.get(input);\n        return { output, negative: true };\n    }));\n    allOutputs = allOutputs.concat(transaction.outputs.map((output) => ({ output, negative: false })));\n    await Promise.all(allOutputs.map(async ({ output, negative }) => processOutput(blockchain, cache, output, negative)));\n    const accountHashes = [...new Set(allOutputs.map(({ output }) => client_common_1.common.uInt160ToHex(output.address)))].map((hash) => client_common_1.common.hexToUInt160(hash));\n    const touchedValidators = await Promise.all(accountHashes.map(async (hash) => {\n        const account = await cache.getAccount(hash);\n        return account.votes;\n    }));\n    const touchedValidatorsSet = [\n        ...new Set(touchedValidators.reduce((acc, votes) => acc.concat(votes.map((vote) => client_common_1.common.ecPointToHex(vote))), [])),\n    ].map((publicKey) => client_common_1.common.hexToECPoint(publicKey));\n    await Promise.all(touchedValidatorsSet.map(async (publicKey) => {\n        const validator = await cache.getValidator(publicKey);\n        if (!validator.registered && validator.votes.eq(node_core_1.utils.ZERO)) {\n            await cache.deleteValidator(publicKey);\n        }\n    }));\n};\nexports.getDescriptorChanges = async ({ transactions, getAccount, governingTokenHash, }) => {\n    const accountChanges = {};\n    const validatorVotesChanges = {};\n    const validatorRegisteredChanges = {};\n    const validatorsCountChanges = [];\n    const allDescriptors = transactions.reduce((acc, transaction) => acc.concat(transaction.descriptors), []);\n    const accountDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x40);\n    const groupedAccountDescriptors = Object.entries(lodash_1.default.groupBy(accountDescriptors, (descriptor) => client_common_1.common.uInt160ToHex(client_common_1.common.bufferToUInt160(descriptor.key))));\n    await Promise.all(groupedAccountDescriptors.map(async ([hash, descriptors]) => {\n        const account = await getAccount(client_common_1.common.hexToUInt160(hash));\n        const balance = account.getBalance(governingTokenHash);\n        for (const vote of account.votes) {\n            const voteHex = client_common_1.common.ecPointToHex(vote);\n            validatorVotesChanges[voteHex] = (validatorVotesChanges[voteHex] === undefined\n                ? node_core_1.utils.ZERO\n                : validatorVotesChanges[voteHex]).sub(balance);\n        }\n        const descriptor = descriptors[descriptors.length - 1];\n        const reader = new node_core_1.BinaryReader(descriptor.value);\n        const votes = reader.readArray(() => reader.readECPoint());\n        if (votes.length !== account.votes.length) {\n            if (account.votes.length > 0) {\n                validatorsCountChanges[account.votes.length - 1] = (validatorsCountChanges[account.votes.length - 1] === undefined\n                    ? node_core_1.utils.ZERO\n                    : validatorsCountChanges[account.votes.length - 1]).sub(balance);\n            }\n            if (votes.length > 0) {\n                validatorsCountChanges[votes.length - 1] = (validatorsCountChanges[votes.length - 1] ===\n                    undefined\n                    ? node_core_1.utils.ZERO\n                    : validatorsCountChanges[votes.length - 1]).add(balance);\n            }\n        }\n        accountChanges[hash] = votes;\n        for (const vote of votes) {\n            const voteHex = client_common_1.common.ecPointToHex(vote);\n            validatorVotesChanges[voteHex] = (validatorVotesChanges[voteHex] === undefined\n                ? node_core_1.utils.ZERO\n                : validatorVotesChanges[voteHex]).add(balance);\n        }\n    }));\n    const validatorDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x48);\n    for (const descriptor of validatorDescriptors) {\n        const publicKey = client_common_1.common.bufferToECPoint(descriptor.key);\n        validatorRegisteredChanges[client_common_1.common.ecPointToHex(publicKey)] = descriptor.value.some((byte) => byte !== 0);\n    }\n    const validatorChanges = {};\n    for (const [publicKey, votes] of Object.entries(validatorVotesChanges)) {\n        validatorChanges[publicKey] = { votes };\n    }\n    for (const [publicKey, registered] of Object.entries(validatorRegisteredChanges)) {\n        const current = validatorChanges[publicKey] === undefined ? {} : validatorChanges[publicKey];\n        validatorChanges[publicKey] = {\n            registered,\n            votes: current.votes,\n        };\n    }\n    return {\n        accountChanges,\n        validatorChanges,\n        validatorsCountChanges,\n    };\n};\nexports.processStateTransaction = async ({ validatorChanges, validatorsCountChanges, tryGetValidatorsCount, addValidatorsCount, updateValidatorsCount, tryGetValidator, addValidator, deleteValidator, updateValidator, }) => {\n    const validatorsCount = await tryGetValidatorsCount();\n    const mutableValidatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n    [...validatorsCountChanges.entries()].forEach(([index, value]) => {\n        mutableValidatorsCountVotes[index] = value;\n    });\n    await Promise.all([\n        Promise.all(Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n            const publicKey = client_common_1.common.hexToECPoint(publicKeyHex);\n            const validator = await tryGetValidator({ publicKey });\n            if (validator === undefined) {\n                await addValidator(new node_core_1.Validator({\n                    publicKey,\n                    registered,\n                    votes,\n                }));\n            }\n            else if (((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n                ((votes !== undefined && votes.eq(node_core_1.utils.ZERO)) || (votes === undefined && validator.votes.eq(node_core_1.utils.ZERO)))) {\n                await deleteValidator({ publicKey: validator.publicKey });\n            }\n            else {\n                await updateValidator(validator, { votes, registered });\n            }\n        })),\n        validatorsCount === undefined\n            ? addValidatorsCount(new node_core_1.ValidatorsCount({\n                votes: mutableValidatorsCountVotes,\n            }))\n            : updateValidatorsCount(validatorsCount, {\n                votes: mutableValidatorsCountVotes,\n            }),\n    ]);\n};\nexports.getValidators = async (blockchain, transactions) => {\n    const cache = new ValidatorCache_1.ValidatorCache(blockchain);\n    await Promise.all(transactions.map(async (transaction) => processTransaction(blockchain, cache, transaction)));\n    const { validatorChanges, validatorsCountChanges } = await exports.getDescriptorChanges({\n        transactions: transactions.filter((transaction) => transaction.type === node_core_1.TransactionType.State && transaction instanceof node_core_1.StateTransaction),\n        getAccount: async (hash) => cache.getAccount(hash),\n        governingTokenHash: blockchain.settings.governingToken.hashHex,\n    });\n    await exports.processStateTransaction({\n        validatorChanges,\n        validatorsCountChanges,\n        tryGetValidatorsCount: async () => cache.getValidatorsCount(),\n        addValidatorsCount: async (value) => cache.addValidatorsCount(value),\n        updateValidatorsCount: async (update) => {\n            await cache.updateValidatorsCount(update);\n        },\n        tryGetValidator: async (key) => cache.getValidator(key.publicKey),\n        addValidator: async (validator) => cache.addValidator(validator),\n        deleteValidator: async (key) => cache.deleteValidator(key.publicKey),\n        updateValidator: async (value, update) => cache.updateValidator(value.publicKey, update),\n    });\n    const [validatorsCount, validators] = await Promise.all([cache.getValidatorsCount(), cache.getAllValidators()]);\n    const numValidators = Math.max(node_core_1.utils.weightedAverage(node_core_1.utils\n        .weightedFilter(validatorsCount.votes\n        .map((votes, count) => ({ count, votes: votes === undefined ? node_core_1.utils.ZERO : votes }))\n        .filter(({ votes }) => votes.gt(node_core_1.utils.ZERO)), 0.25, 0.75, ({ count }) => new bn_js_1.BN(count))\n        .map(([{ count }, weight]) => ({ value: count, weight }))), blockchain.settings.standbyValidators.length);\n    const standbyValidatorsSet = new Set(blockchain.settings.standbyValidators.map((publicKey) => client_common_1.common.ecPointToHex(publicKey)));\n    const validatorsPublicKeySet = new Set(lodash_1.default.take(validators\n        .filter((validator) => (validator.registered && validator.votes.gt(node_core_1.utils.ZERO)) ||\n        standbyValidatorsSet.has(client_common_1.common.ecPointToHex(validator.publicKey)))\n        .sort((aValidator, bValidator) => aValidator.votes.eq(bValidator.votes)\n        ? client_common_1.common.ecPointCompare(aValidator.publicKey, bValidator.publicKey)\n        : -aValidator.votes.cmp(bValidator.votes))\n        .map((validator) => client_common_1.common.ecPointToHex(validator.publicKey)), numValidators));\n    const standbyValidatorsArray = [...standbyValidatorsSet];\n    for (let i = 0; i < standbyValidatorsArray.length && validatorsPublicKeySet.size < numValidators; i += 1) {\n        validatorsPublicKeySet.add(standbyValidatorsArray[i]);\n    }\n    const validatorsPublicKeys = [...validatorsPublicKeySet].map((hex) => client_common_1.common.hexToECPoint(hex));\n    return validatorsPublicKeys.sort((aKey, bKey) => client_common_1.common.ecPointCompare(aKey, bKey));\n};\n\n//# sourceMappingURL=getValidators.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapExecuteScripts = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nexports.wrapExecuteScripts = async (execute) => {\n    try {\n        const result = await execute();\n        if (result.state === client_common_1.VMState.Halt) {\n            return new node_core_1.InvocationResultSuccess({\n                gasConsumed: result.gasConsumed,\n                gasCost: result.gasCost,\n                stack: result.stack,\n            });\n        }\n        return new node_core_1.InvocationResultError({\n            gasConsumed: result.gasConsumed,\n            gasCost: result.gasCost,\n            stack: result.stack,\n            message: result.errorMessage === undefined ? 'Unknown Error' : result.errorMessage,\n        });\n    }\n    catch (error) {\n        return new node_core_1.InvocationResultError({\n            gasConsumed: client_common_1.utils.ZERO,\n            gasCost: client_common_1.utils.ZERO,\n            stack: [],\n            message: error.message,\n        });\n    }\n};\n\n//# sourceMappingURL=wrapExecuteScripts.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockSentContext = void 0;\nconst Context_1 = require(\"./Context\");\nclass BlockSentContext extends Context_1.Context {\n    cloneExpectedView({ expectedView }) {\n        return new BlockSentContext({\n            type: this.type,\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.BlockSentContext = BlockSentContext;\n\n//# sourceMappingURL=BlockSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialContext = void 0;\nconst Context_1 = require(\"./Context\");\nclass InitialContext extends Context_1.Context {\n    cloneExpectedView({ expectedView }) {\n        return new InitialContext({\n            type: this.type,\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.InitialContext = InitialContext;\n\n//# sourceMappingURL=InitialContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignatureSentContext = void 0;\nconst HeaderContext_1 = require(\"./HeaderContext\");\nconst RequestSentContext_1 = require(\"./RequestSentContext\");\nclass SignatureSentContext extends HeaderContext_1.HeaderContext {\n    clone({ type, primaryIndex, viewNumber, }) {\n        return new SignatureSentContext({\n            type,\n            viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneRequestSent() {\n        return new RequestSentContext_1.RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.SignatureSentContext = SignatureSentContext;\n\n//# sourceMappingURL=SignatureSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestSentContext = void 0;\nconst HeaderContext_1 = require(\"./HeaderContext\");\nclass RequestSentContext extends HeaderContext_1.HeaderContext {\n    constructor({ viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        super({\n            type: 'primary',\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n            transactions,\n            signatures,\n            header,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.RequestSentContext = RequestSentContext;\n\n//# sourceMappingURL=RequestSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ViewChangingContext = void 0;\nconst Context_1 = require(\"./Context\");\nclass ViewChangingContext extends Context_1.Context {\n    constructor({ previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n        super({\n            type: 'backup',\n            previousHash,\n            blockIndex,\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new ViewChangingContext({\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.ViewChangingContext = ViewChangingContext;\n\n//# sourceMappingURL=ViewChangingContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertCommand = exports.InvalidCommandError = exports.Command = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nvar Command;\n(function (Command) {\n    Command[\"addr\"] = \"addr\";\n    Command[\"block\"] = \"block\";\n    Command[\"consensus\"] = \"consensus\";\n    Command[\"filteradd\"] = \"filteradd\";\n    Command[\"filterclear\"] = \"filterclear\";\n    Command[\"filterload\"] = \"filterload\";\n    Command[\"getaddr\"] = \"getaddr\";\n    Command[\"getblocks\"] = \"getblocks\";\n    Command[\"getdata\"] = \"getdata\";\n    Command[\"getheaders\"] = \"getheaders\";\n    Command[\"headers\"] = \"headers\";\n    Command[\"inv\"] = \"inv\";\n    Command[\"mempool\"] = \"mempool\";\n    Command[\"tx\"] = \"tx\";\n    Command[\"verack\"] = \"verack\";\n    Command[\"version\"] = \"version\";\n    Command[\"alert\"] = \"alert\";\n    Command[\"merkleblock\"] = \"merkleblock\";\n    Command[\"notfound\"] = \"notfound\";\n    Command[\"ping\"] = \"ping\";\n    Command[\"pong\"] = \"pong\";\n    Command[\"reject\"] = \"reject\";\n})(Command = exports.Command || (exports.Command = {}));\nexports.InvalidCommandError = utils_1.makeErrorWithCode('INVALID_COMMAND', (command) => `Invalid Command. Found: ${command}`);\nconst isCommand = (command) => Command[command] !== undefined;\nexports.assertCommand = (command) => {\n    if (isCommand(command)) {\n        return command;\n    }\n    throw new exports.InvalidCommandError(command);\n};\n\n//# sourceMappingURL=Command.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AddrPayload_1 = require(\"./AddrPayload\");\nObject.defineProperty(exports, \"AddrPayload\", { enumerable: true, get: function () { return AddrPayload_1.AddrPayload; } });\nvar FilterAddPayload_1 = require(\"./FilterAddPayload\");\nObject.defineProperty(exports, \"FilterAddPayload\", { enumerable: true, get: function () { return FilterAddPayload_1.FilterAddPayload; } });\nvar FilterLoadPayload_1 = require(\"./FilterLoadPayload\");\nObject.defineProperty(exports, \"FilterLoadPayload\", { enumerable: true, get: function () { return FilterLoadPayload_1.FilterLoadPayload; } });\nvar GetBlocksPayload_1 = require(\"./GetBlocksPayload\");\nObject.defineProperty(exports, \"GetBlocksPayload\", { enumerable: true, get: function () { return GetBlocksPayload_1.GetBlocksPayload; } });\nvar HeadersPayload_1 = require(\"./HeadersPayload\");\nObject.defineProperty(exports, \"HeadersPayload\", { enumerable: true, get: function () { return HeadersPayload_1.HeadersPayload; } });\nvar InvPayload_1 = require(\"./InvPayload\");\nObject.defineProperty(exports, \"InvPayload\", { enumerable: true, get: function () { return InvPayload_1.InvPayload; } });\nvar MerkleBlockPayload_1 = require(\"./MerkleBlockPayload\");\nObject.defineProperty(exports, \"MerkleBlockPayload\", { enumerable: true, get: function () { return MerkleBlockPayload_1.MerkleBlockPayload; } });\nvar NetworkAddress_1 = require(\"./NetworkAddress\");\nObject.defineProperty(exports, \"NetworkAddress\", { enumerable: true, get: function () { return NetworkAddress_1.NetworkAddress; } });\nvar VersionPayload_1 = require(\"./VersionPayload\");\nObject.defineProperty(exports, \"VersionPayload\", { enumerable: true, get: function () { return VersionPayload_1.VersionPayload; } });\nObject.defineProperty(exports, \"SERVICES\", { enumerable: true, get: function () { return VersionPayload_1.SERVICES; } });\nvar InventoryType_1 = require(\"./InventoryType\");\nObject.defineProperty(exports, \"InventoryType\", { enumerable: true, get: function () { return InventoryType_1.InventoryType; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkAddress = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst ip_address_1 = require(\"ip-address\");\nconst BYTE_LENGTH = 16;\nclass NetworkAddress {\n    constructor({ host, port, timestamp, services }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.host = host;\n        this.port = port;\n        this.timestamp = timestamp;\n        this.services = services;\n    }\n    static deserializeWireBase({ reader }) {\n        const timestamp = reader.readUInt32LE();\n        const services = reader.readUInt64LE();\n        const address = ip_address_1.Address6.fromByteArray([...reader.readBytes(16)]);\n        const port = reader.readUInt16BE();\n        const canonical = address == undefined ? '' : address.canonicalForm();\n        return new this({\n            timestamp,\n            services,\n            host: canonical == undefined ? '' : canonical,\n            port,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    static isValid(host) {\n        const address = this.getAddress6(host);\n        if (address == undefined) {\n            return false;\n        }\n        try {\n            address.toByteArray();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    static getAddress6(host) {\n        const parts = host.split('.');\n        return parts.length === 4 ? ip_address_1.Address6.fromAddress4(host) : new ip_address_1.Address6(host);\n    }\n    serializeWireBase(writer) {\n        const address = NetworkAddress.getAddress6(this.host);\n        if (address == undefined) {\n            throw new client_common_1.InvalidFormatError('Network IP address undefined');\n        }\n        writer.writeUInt32LE(this.timestamp);\n        writer.writeUInt64LE(this.services);\n        const addressSerialized = Buffer.from(address.toByteArray());\n        writer.writeBytes(Buffer.concat([Buffer.alloc(BYTE_LENGTH - addressSerialized.length, 0), addressSerialized]));\n        writer.writeUInt16BE(this.port);\n    }\n}\nexports.NetworkAddress = NetworkAddress;\n\n//# sourceMappingURL=NetworkAddress.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertInventoryType = exports.InvalidInventoryTypeError = exports.InventoryType = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nvar InventoryType;\n(function (InventoryType) {\n    InventoryType[InventoryType[\"Transaction\"] = 1] = \"Transaction\";\n    InventoryType[InventoryType[\"Block\"] = 2] = \"Block\";\n    InventoryType[InventoryType[\"Consensus\"] = 224] = \"Consensus\";\n})(InventoryType = exports.InventoryType || (exports.InventoryType = {}));\nexports.InvalidInventoryTypeError = utils_1.makeErrorWithCode('INVALID_INVENTORY_TYPE', (inventoryType) => `Expected inventory type, found: ${inventoryType}`);\nconst isInventoryType = (inventoryType) => InventoryType[inventoryType] !== undefined;\nexports.assertInventoryType = (inventoryType) => {\n    if (isInventoryType(inventoryType)) {\n        return inventoryType;\n    }\n    throw new exports.InvalidInventoryTypeError(inventoryType);\n};\n\n//# sourceMappingURL=InventoryType.js.map\n","import { common, crypto } from '@neo-one/client-common';\nimport { DeveloperClient } from '@neo-one/client-core';\nimport { Blockchain } from '@neo-one/node-blockchain';\nimport { createMain } from '@neo-one/node-neo-settings';\nimport { Node } from '@neo-one/node-protocol';\nimport { createHandler, RPCHandler } from '@neo-one/node-rpc-handler';\nimport { storage as levelupStorage } from '@neo-one/node-storage-levelup';\nimport { vm } from '@neo-one/node-vm';\nimport { Disposable } from '@neo-one/utils';\nimport Level from 'level-js';\nimport LevelUp from 'levelup';\nimport MemDown from 'memdown';\nimport { constants } from './constants';\nimport { Network } from './Network';\n\nexport interface PersistentFullNode {\n  readonly type: 'persistent';\n  readonly id: string;\n}\n\nexport interface InMemoryFullNode {\n  readonly type: 'memory';\n}\n\nexport type FullNodeOptions = PersistentFullNode | InMemoryFullNode;\n\nexport class FullNode {\n  private mutableDisposable: Disposable | undefined;\n  private readonly startPromise: Promise<RPCHandler>;\n\n  public constructor(\n    private readonly options: FullNodeOptions,\n    private readonly developerClient: DeveloperClient,\n    private readonly build: () => Promise<void>,\n  ) {\n    this.startPromise = this.startInternal();\n  }\n\n  public async start(): Promise<void> {\n    return this.startPromise.then(() => {\n      // do nothing\n    });\n  }\n\n  public async stop(): Promise<void> {\n    if (this.mutableDisposable !== undefined) {\n      await this.mutableDisposable();\n      this.mutableDisposable = undefined;\n    }\n  }\n\n  // tslint:disable-next-line no-any\n  public async handleRequest(data: any): Promise<any> {\n    const handler = await this.startPromise;\n\n    return handler(data);\n  }\n\n  private async startInternal(): Promise<RPCHandler> {\n    const primaryPrivateKey = common.stringToPrivateKey(constants.PRIVATE_NET_PRIVATE_KEY);\n    const primaryPublicKey = common.stringToECPoint(constants.PRIVATE_NET_PUBLIC_KEY);\n    crypto.addPublicKey(primaryPrivateKey, primaryPublicKey);\n\n    const settings = createMain({\n      address: common.uInt160ToString(crypto.privateKeyToScriptHash(primaryPrivateKey)),\n      standbyValidators: [common.ecPointToString(primaryPublicKey)],\n      privateNet: true,\n    });\n    const storage = levelupStorage({\n      db: LevelUp(this.options.type === 'persistent' ? Level(this.options.id) : MemDown()),\n      context: { messageMagic: settings.messageMagic },\n    });\n\n    const blockchain = await Blockchain.create({\n      settings,\n      storage,\n      vm,\n    });\n    const nodeOptions = {\n      consensus: {\n        privateKey: common.privateKeyToString(primaryPrivateKey),\n        privateNet: true,\n      },\n    };\n    const node = new Node({\n      blockchain,\n      options: nodeOptions,\n      createNetwork: () => new Network(),\n    });\n\n    this.mutableDisposable = await node.start();\n\n    return createHandler({\n      blockchain,\n      node,\n      handleResetProject: this.reset.bind(this),\n      handleGetNEOTrackerURL: async () => undefined,\n    });\n  }\n\n  private async reset(): Promise<void> {\n    await this.developerClient.reset();\n    await this.developerClient.updateSettings({ secondsPerBlock: 15 });\n\n    await this.build();\n  }\n}\n","import { constants as utilsConstants } from '@neo-one/utils';\n\nexport const constants = {\n  ...utilsConstants,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar levelUpStorage_1 = require(\"./levelUpStorage\");\nObject.defineProperty(exports, \"storage\", { enumerable: true, get: function () { return levelUpStorage_1.levelUpStorage; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.levelUpStorage = void 0;\nconst tslib_1 = require(\"tslib\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst node_storage_common_1 = require(\"@neo-one/node-storage-common\");\nconst common = tslib_1.__importStar(require(\"./common\"));\nconst convertChange_1 = require(\"./convertChange\");\nconst errors_1 = require(\"./errors\");\nconst read = tslib_1.__importStar(require(\"./read\"));\nexports.levelUpStorage = ({ db, context }) => {\n    const getHash = async ({ hashOrIndex }) => {\n        let hash = hashOrIndex;\n        if (typeof hash === 'number') {\n            try {\n                const result = await db.get(node_storage_common_1.keys.serializeHeaderIndexHashKey(hash));\n                hash = common.deserializeHeaderHash(result);\n            }\n            catch (error) {\n                if (error.notFound) {\n                    throw new errors_1.KeyNotFoundError(`${hash}`);\n                }\n                throw error;\n            }\n        }\n        return hash;\n    };\n    const headerBase = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.header,\n        deserializeValue: (buffer) => node_core_1.Header.deserializeWire({\n            context,\n            buffer,\n        }),\n    });\n    const getHeader = async ({ hashOrIndex }) => {\n        const hash = await getHash({ hashOrIndex });\n        return headerBase.get({ hash });\n    };\n    const header = {\n        get: getHeader,\n        tryGet: read.createTryGet({ get: getHeader }),\n        tryGetLatest: read.createTryGetLatest({\n            db,\n            latestKey: node_storage_common_1.keys.maxHeaderHashKey,\n            deserializeResult: (result) => ({\n                hash: common.deserializeHeaderHash(result),\n            }),\n            get: headerBase.get,\n        }),\n    };\n    const blockBase = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.block,\n        deserializeValue: (buffer) => node_core_1.Block.deserializeWire({\n            context,\n            buffer,\n        }),\n    });\n    const getBlock = async ({ hashOrIndex }) => {\n        const hash = await getHash({ hashOrIndex });\n        return blockBase.get({ hash });\n    };\n    const block = {\n        get: getBlock,\n        tryGet: read.createTryGet({ get: getBlock }),\n        tryGetLatest: read.createTryGetLatest({\n            db,\n            latestKey: node_storage_common_1.keys.maxBlockHashKey,\n            deserializeResult: (result) => ({\n                hash: common.deserializeBlockHash(result),\n            }),\n            get: blockBase.get,\n        }),\n    };\n    const transaction = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.transaction,\n        deserializeValue: (buffer) => node_core_1.deserializeTransactionWire({\n            context,\n            buffer,\n        }),\n    });\n    const output = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.output,\n        deserializeValue: (buffer) => node_core_1.Output.deserializeWire({ context, buffer }),\n    });\n    return {\n        header,\n        block,\n        blockData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.blockData,\n            deserializeValue: (buffer) => node_core_1.BlockData.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        account: read.createReadAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.account,\n            minKey: node_storage_common_1.keys.accountMinKey,\n            maxKey: node_storage_common_1.keys.accountMaxKey,\n            deserializeValue: (buffer) => node_core_1.Account.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        accountUnclaimed: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed,\n            getMinKey: node_storage_common_1.keys.getAccountUnclaimedKeyMin,\n            getMaxKey: node_storage_common_1.keys.getAccountUnclaimedKeyMax,\n            deserializeValue: (buffer) => node_core_1.AccountUnclaimed.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        accountUnspent: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent,\n            getMinKey: node_storage_common_1.keys.getAccountUnspentKeyMin,\n            getMaxKey: node_storage_common_1.keys.getAccountUnspentKeyMax,\n            deserializeValue: (buffer) => node_core_1.AccountUnspent.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        action: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.action,\n            getMinKey: node_storage_common_1.keys.getActionKeyMin,\n            getMaxKey: node_storage_common_1.keys.getActionKeyMax,\n            deserializeValue: (buffer) => node_core_1.deserializeActionWire({\n                context,\n                buffer,\n            }),\n        }),\n        asset: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.asset,\n            deserializeValue: (buffer) => node_core_1.Asset.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        transaction,\n        transactionData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.transactionData,\n            deserializeValue: (buffer) => node_core_1.TransactionData.deserializeWire({ context, buffer }),\n        }),\n        output,\n        contract: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.contract,\n            deserializeValue: (buffer) => node_core_1.Contract.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        storageItem: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem,\n            getMinKey: node_storage_common_1.keys.getStorageItemKeyMin,\n            getMaxKey: node_storage_common_1.keys.getStorageItemKeyMax,\n            deserializeValue: (buffer) => node_core_1.StorageItem.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        validator: read.createReadAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.validator,\n            minKey: node_storage_common_1.keys.validatorMinKey,\n            maxKey: node_storage_common_1.keys.validatorMaxKey,\n            deserializeValue: (buffer) => node_core_1.Validator.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        invocationData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.invocationData,\n            deserializeValue: (buffer) => node_core_1.InvocationData.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        validatorsCount: read.createReadMetadataStorage({\n            db,\n            key: node_storage_common_1.keys.validatorsCountKey,\n            deserializeValue: (buffer) => node_core_1.ValidatorsCount.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        async close() {\n            await db.close();\n        },\n        async commit(changeSet) {\n            const changesList = changeSet.map(convertChange_1.convertChange);\n            const changes = changesList.reduce((acc, converted) => {\n                acc.push(...converted);\n                return acc;\n            }, []);\n            await db.batch(changes);\n        },\n        async reset() {\n            const batch = [];\n            await new Promise((resolve, reject) => {\n                db.createKeyStream()\n                    .on('data', (key) => {\n                    batch.push({ type: 'del', key });\n                })\n                    .on('error', (error) => {\n                    reject(error);\n                })\n                    .on('end', () => {\n                    resolve();\n                });\n            });\n            await db.batch(batch);\n        },\n    };\n};\n\n//# sourceMappingURL=levelUpStorage.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keys = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst DELIMITER = '\\x00';\nconst createPrefix = (value) => `${value}${DELIMITER}`;\nconst MAX_CHAR = '\\xff';\nconst createMax = (value) => `${value}${MAX_CHAR}`;\nconst accountKeyPrefix = createPrefix('0');\nconst accountUnclaimedKeyPrefix = createPrefix('1');\nconst accountUnspentKeyPrefix = createPrefix('2');\nconst actionKeyPrefix = createPrefix('3');\nconst assetKeyPrefix = createPrefix('4');\nconst blockKeyPrefix = createPrefix('5');\nconst blockDataKeyPrefix = createPrefix('6');\nconst headerKeyPrefix = createPrefix('7');\nconst headerHashKeyPrefix = createPrefix('8');\nconst transactionKeyPrefix = createPrefix('9');\nconst outputKeyPrefix = createPrefix('a');\nconst transactionDataKeyPrefix = createPrefix('b');\nconst contractKeyPrefix = createPrefix('c');\nconst storageItemKeyPrefix = createPrefix('d');\nconst validatorKeyPrefix = createPrefix('e');\nconst invocationDataKeyPrefix = createPrefix('f');\nconst settingsPrefix = createPrefix('g');\nconst validatorsCountKey = createPrefix('h');\nconst serializeHeaderIndexHashKey = (index) => `${headerHashKeyPrefix}${index}`;\nconst maxHeaderHashKey = `${settingsPrefix}0`;\nconst maxBlockHashKey = `${settingsPrefix}1`;\nconst createSerializeAccountInputKey = (prefix) => ({ hash, input }) => `${prefix}${client_common_1.common.uInt160ToString(hash)}${client_common_1.common.uInt256ToString(input.hash)}${input.index}`;\nconst createGetAccountInputKeyMin = (prefix) => ({ hash }) => `${prefix}${client_common_1.common.uInt160ToString(hash)}`;\nconst createGetAccountInputKeyMax = (prefix) => ({ hash }) => createMax(`${prefix}${client_common_1.common.uInt160ToString(hash)}`);\nconst getAccountUnclaimedKeyMin = createGetAccountInputKeyMin(accountUnclaimedKeyPrefix);\nconst getAccountUnclaimedKeyMax = createGetAccountInputKeyMax(accountUnclaimedKeyPrefix);\nconst getAccountUnspentKeyMin = createGetAccountInputKeyMin(accountUnspentKeyPrefix);\nconst getAccountUnspentKeyMax = createGetAccountInputKeyMax(accountUnspentKeyPrefix);\nconst serializeStorageItemKey = ({ hash, key }) => `${storageItemKeyPrefix}${client_common_1.common.uInt160ToString(hash)}${key.toString('hex')}`;\nconst getStorageItemKeyMin = ({ hash, prefix }) => [\n    storageItemKeyPrefix,\n    hash === undefined ? undefined : client_common_1.common.uInt160ToString(hash),\n    prefix === undefined ? undefined : prefix.toString('hex'),\n]\n    .filter(utils_1.utils.notNull)\n    .join('');\nconst getStorageItemKeyMax = (key) => createMax(getStorageItemKeyMin(key));\nconst serializeActionKey = ({ index }) => `${actionKeyPrefix}${index.toString(10, 8)}`;\nconst getActionKeyMin = ({ indexStart }) => [actionKeyPrefix, indexStart === undefined ? undefined : indexStart.toString(10, 8)].filter(utils_1.utils.notNull).join('');\nconst getActionKeyMax = ({ indexStop }) => createMax([actionKeyPrefix, indexStop === undefined ? undefined : indexStop.toString(10, 8)].filter(utils_1.utils.notNull).join(''));\nconst serializeValidatorKey = ({ publicKey }) => `${validatorKeyPrefix}${client_common_1.common.ecPointToString(publicKey)}`;\nconst validatorMinKey = validatorKeyPrefix;\nconst validatorMaxKey = createMax(validatorKeyPrefix);\nconst serializeUInt160Key = ({ hash }) => client_common_1.common.uInt160ToString(hash);\nconst serializeUInt256Key = ({ hash }) => client_common_1.common.uInt256ToString(hash);\nconst createSerializeUInt160Key = (prefix) => (input) => `${prefix}${serializeUInt160Key(input)}`;\nconst createSerializeUInt256Key = (prefix) => (input) => `${prefix}${serializeUInt256Key(input)}`;\nconst accountMinKey = accountKeyPrefix;\nconst accountMaxKey = createMax(accountKeyPrefix);\nconst serializeOutputKey = ({ index, hash }) => `${outputKeyPrefix}${client_common_1.common.uInt256ToString(hash)}${index}`;\nconst typeKeyToSerializeKey = {\n    account: createSerializeUInt160Key(accountKeyPrefix),\n    accountUnclaimed: createSerializeAccountInputKey(accountUnclaimedKeyPrefix),\n    accountUnspent: createSerializeAccountInputKey(accountUnspentKeyPrefix),\n    action: serializeActionKey,\n    asset: createSerializeUInt256Key(assetKeyPrefix),\n    block: createSerializeUInt256Key(blockKeyPrefix),\n    blockData: createSerializeUInt256Key(blockDataKeyPrefix),\n    header: createSerializeUInt256Key(headerKeyPrefix),\n    transaction: createSerializeUInt256Key(transactionKeyPrefix),\n    output: serializeOutputKey,\n    transactionData: createSerializeUInt256Key(transactionDataKeyPrefix),\n    contract: createSerializeUInt160Key(contractKeyPrefix),\n    storageItem: serializeStorageItemKey,\n    validator: serializeValidatorKey,\n    invocationData: createSerializeUInt256Key(invocationDataKeyPrefix),\n};\nexports.keys = {\n    validatorsCountKey,\n    serializeHeaderIndexHashKey,\n    maxHeaderHashKey,\n    maxBlockHashKey,\n    getAccountUnclaimedKeyMin,\n    getAccountUnclaimedKeyMax,\n    getAccountUnspentKeyMin,\n    getAccountUnspentKeyMax,\n    getStorageItemKeyMin,\n    getStorageItemKeyMax,\n    serializeActionKey,\n    getActionKeyMin,\n    getActionKeyMax,\n    validatorMinKey,\n    validatorMaxKey,\n    accountMinKey,\n    accountMaxKey,\n    typeKeyToSerializeKey,\n};\n\n//# sourceMappingURL=keys.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertChange = void 0;\nconst tslib_1 = require(\"tslib\");\nconst node_storage_common_1 = require(\"@neo-one/node-storage-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst common = tslib_1.__importStar(require(\"./common\"));\nconst errors_1 = require(\"./errors\");\nconst convertAddChange = (changeIn) => {\n    const change = changeIn;\n    switch (change.type) {\n        case 'account':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.account(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'accountUnspent':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent({\n                        hash: change.value.hash,\n                        input: change.value.input,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'accountUnclaimed':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed({\n                        hash: change.value.hash,\n                        input: change.value.input,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'action':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.action({\n                        index: change.value.index,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'asset':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.asset(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'block':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.block(change.value),\n                    value: change.value.serializeWire(),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.maxBlockHashKey,\n                    value: common.serializeBlockHash(change.value.hash),\n                },\n            ];\n        case 'blockData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.blockData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'header':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.header(change.value),\n                    value: change.value.serializeWire(),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.maxHeaderHashKey,\n                    value: common.serializeHeaderHash(change.value.hash),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.serializeHeaderIndexHashKey(change.value.index),\n                    value: common.serializeHeaderHash(change.value.hash),\n                },\n            ];\n        case 'transaction':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.transaction(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'output':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.output({\n                        hash: change.value.hash,\n                        index: change.value.index,\n                    }),\n                    value: change.value.output.serializeWire(),\n                },\n            ];\n        case 'transactionData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.transactionData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'contract':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.contract(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'storageItem':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem({\n                        hash: change.value.hash,\n                        key: change.value.key,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'validator':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.validator({\n                        publicKey: change.value.publicKey,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'invocationData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.invocationData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'validatorsCount':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.validatorsCountKey,\n                    value: change.value.serializeWire(),\n                },\n            ];\n        default:\n            utils_1.utils.assertNever(change);\n            throw new errors_1.UnknownTypeError(changeIn.type);\n    }\n};\nconst convertDeleteChange = (change) => {\n    switch (change.type) {\n        case 'account':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.account(change.key),\n            };\n        case 'accountUnspent':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent(change.key),\n            };\n        case 'accountUnclaimed':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed(change.key),\n            };\n        case 'contract':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.contract(change.key),\n            };\n        case 'storageItem':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem(change.key),\n            };\n        case 'validator':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.validator(change.key),\n            };\n        default:\n            utils_1.utils.assertNever(change);\n            throw new errors_1.UnknownTypeError();\n    }\n};\nexports.convertChange = (change) => {\n    if (change.type === 'add') {\n        return convertAddChange(change.change);\n    }\n    if (change.type === 'delete') {\n        return [convertDeleteChange(change.change)];\n    }\n    utils_1.utils.assertNever(change);\n    throw new errors_1.UnknownChangeTypeError();\n};\n\n//# sourceMappingURL=convertChange.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createReadMetadataStorage = exports.createTryGetMetadata = exports.createReadGetAllStorage = exports.createReadAllStorage = exports.createAll$ = exports.createReadStorage = exports.createTryGetLatest = exports.createTryGet = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst errors_1 = require(\"./errors\");\nconst streamToObservable_1 = require(\"./streamToObservable\");\nfunction createTryGet({ get, }) {\n    return async (key) => {\n        try {\n            const result = await get(key);\n            return result;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGet = createTryGet;\nfunction createTryGetLatest({ db, latestKey, deserializeResult, get, }) {\n    return async () => {\n        try {\n            const result = await db.get(latestKey);\n            const value = await get(deserializeResult(result));\n            return value;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGetLatest = createTryGetLatest;\nfunction createReadStorage({ db, serializeKey, deserializeValue, }) {\n    const get = async (key) => {\n        const serialized = serializeKey(key);\n        try {\n            const result = await db.get(serialized);\n            return deserializeValue(result);\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                throw new errors_1.KeyNotFoundError(serialized);\n            }\n            throw error;\n        }\n    };\n    return { get, tryGet: createTryGet({ get }) };\n}\nexports.createReadStorage = createReadStorage;\nfunction createAll$({ db, minKey, maxKey, deserializeValue, }) {\n    return streamToObservable_1.streamToObservable(() => db.createValueStream({\n        gte: minKey,\n        lte: maxKey,\n    })).pipe(operators_1.map(deserializeValue));\n}\nexports.createAll$ = createAll$;\nfunction createReadAllStorage({ db, serializeKey, minKey, maxKey, deserializeValue, }) {\n    const readStorage = createReadStorage({\n        db,\n        serializeKey,\n        deserializeValue,\n    });\n    return {\n        get: readStorage.get,\n        tryGet: readStorage.tryGet,\n        all$: createAll$({ db, minKey, maxKey, deserializeValue }),\n    };\n}\nexports.createReadAllStorage = createReadAllStorage;\nfunction createReadGetAllStorage({ db, serializeKey, getMinKey, getMaxKey, deserializeValue, }) {\n    const readStorage = createReadStorage({\n        db,\n        serializeKey,\n        deserializeValue,\n    });\n    return {\n        get: readStorage.get,\n        tryGet: readStorage.tryGet,\n        getAll$: (keys) => createAll$({\n            db,\n            minKey: getMinKey(keys),\n            maxKey: getMaxKey(keys),\n            deserializeValue,\n        }),\n    };\n}\nexports.createReadGetAllStorage = createReadGetAllStorage;\nfunction createTryGetMetadata({ get, }) {\n    return async () => {\n        try {\n            const result = await get();\n            return result;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGetMetadata = createTryGetMetadata;\nfunction createReadMetadataStorage({ db, key, deserializeValue, }) {\n    const get = async () => {\n        try {\n            const result = await db.get(key);\n            return deserializeValue(result);\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                throw new errors_1.KeyNotFoundError(key);\n            }\n            throw error;\n        }\n    };\n    return { get, tryGet: createTryGet({ get }) };\n}\nexports.createReadMetadataStorage = createReadMetadataStorage;\n\n//# sourceMappingURL=read.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.streamToObservable = void 0;\nconst rxjs_1 = require(\"rxjs\");\nexports.streamToObservable = (getStream) => new rxjs_1.Observable((observer) => {\n    const stream = getStream();\n    let done = false;\n    const cleanup = () => {\n        if (!done) {\n            done = true;\n            stream.removeListener('end', onEnd);\n            stream.removeListener('error', onError);\n            stream.removeListener('data', onData);\n        }\n    };\n    const onEnd = () => {\n        cleanup();\n        observer.complete();\n    };\n    const onError = (error) => {\n        cleanup();\n        observer.error(error);\n    };\n    const onData = (data) => observer.next(data);\n    stream.once('error', onError);\n    stream.once('end', onEnd);\n    stream.on('data', onData);\n    return cleanup;\n});\n\n//# sourceMappingURL=streamToObservable.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Blockchain_1 = require(\"./Blockchain\");\nObject.defineProperty(exports, \"Blockchain\", { enumerable: true, get: function () { return Blockchain_1.Blockchain; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Blockchain = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nconst js_priority_queue_1 = tslib_1.__importDefault(require(\"js-priority-queue\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst errors_1 = require(\"./errors\");\nconst getValidators_1 = require(\"./getValidators\");\nconst wrapExecuteScripts_1 = require(\"./wrapExecuteScripts\");\nconst WriteBatchBlockchain_1 = require(\"./WriteBatchBlockchain\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'blockchain' });\nclass Blockchain {\n    constructor(options) {\n        this.mutablePersistingBlocks = false;\n        this.mutableBlockQueue = new js_priority_queue_1.default({\n            comparator: (a, b) => a.block.index - b.block.index,\n        });\n        this.mutableInQueue = new Set();\n        this.mutableRunning = false;\n        this.mutableBlock$ = new rxjs_1.Subject();\n        this.getValidators = async (transactions) => {\n            logger.debug({ name: 'neo_blockchain_get_validators' });\n            return getValidators_1.getValidators(this, transactions);\n        };\n        this.calculateClaimAmount = async (claims) => {\n            logger.debug({ name: 'neo_blockchain_calculate_claim_amount' });\n            const spentCoins = await Promise.all(claims.map(async (claim) => this.tryGetSpentCoin(claim)));\n            const filteredSpentCoinsIn = spentCoins.filter(utils_1.utils.notNull);\n            if (spentCoins.length !== filteredSpentCoinsIn.length) {\n                throw new errors_1.CoinUnspentError(spentCoins.length - filteredSpentCoinsIn.length);\n            }\n            const filteredSpentCoins = filteredSpentCoinsIn.filter((spentCoin) => {\n                if (spentCoin.claimed) {\n                    throw new errors_1.CoinClaimedError(client_common_1.common.uInt256ToString(spentCoin.output.asset), spentCoin.output.value.toString(10));\n                }\n                if (!client_common_1.common.uInt256Equal(spentCoin.output.asset, this.settings.governingToken.hash)) {\n                    throw new errors_1.InvalidClaimError(client_common_1.common.uInt256ToString(spentCoin.output.asset), client_common_1.common.uInt256ToString(this.settings.governingToken.hash));\n                }\n                return true;\n            });\n            return node_core_1.utils.calculateClaimAmount({\n                coins: filteredSpentCoins.map((coin) => ({\n                    value: coin.output.value,\n                    startHeight: coin.startHeight,\n                    endHeight: coin.endHeight,\n                })),\n                decrementInterval: this.settings.decrementInterval,\n                generationAmount: this.settings.generationAmount,\n                getSystemFee: async (index) => {\n                    const header = await this.header.get({\n                        hashOrIndex: index,\n                    });\n                    const blockData = await this.blockData.get({\n                        hash: header.hash,\n                    });\n                    return blockData.systemFee;\n                },\n            });\n        };\n        this.verifyScript = async ({ scriptContainer, hash, witness, }) => {\n            let { verification } = witness;\n            if (verification.length === 0) {\n                const builder = new client_common_1.ScriptBuilder();\n                builder.emitAppCallVerification(hash);\n                verification = builder.build();\n            }\n            else if (!client_common_1.common.uInt160Equal(hash, client_common_1.crypto.toScriptHash(verification))) {\n                throw new errors_1.WitnessVerifyError();\n            }\n            const blockchain = this.createWriteBlockchain();\n            const mutableActions = [];\n            let globalActionIndex = new bn_js_1.BN(0);\n            const executeResult = await this.vm.executeScripts({\n                scripts: [{ code: witness.invocation }, { code: verification }],\n                blockchain,\n                scriptContainer,\n                triggerType: node_core_1.TriggerType.Verification,\n                action: node_core_1.NULL_ACTION,\n                gas: node_core_1.utils.ONE_HUNDRED_MILLION,\n                listeners: {\n                    onLog: ({ message, scriptHash }) => {\n                        mutableActions.push(new node_core_1.LogAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            message,\n                        }));\n                        globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                    },\n                    onNotify: ({ args, scriptHash }) => {\n                        mutableActions.push(new node_core_1.NotificationAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            args,\n                        }));\n                        globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                    },\n                },\n            });\n            const result = { actions: mutableActions, hash, witness };\n            const { stack, state, errorMessage } = executeResult;\n            if (state === client_common_1.VMState.Fault) {\n                return Object.assign(Object.assign({}, result), { failureMessage: errorMessage === undefined ? 'Script execution ended in a FAULT state' : errorMessage });\n            }\n            if (stack.length !== 1) {\n                return Object.assign(Object.assign({}, result), { failureMessage: `Verification did not return one result. This may be a bug in the ` +\n                        `smart contract compiler or the smart contract itself. If you are using the NEO•ONE compiler please file an issue. Found ${stack.length} results.` });\n            }\n            const top = stack[0];\n            if (!top.asBoolean()) {\n                return Object.assign(Object.assign({}, result), { failureMessage: 'Verification did not succeed.' });\n            }\n            return result;\n        };\n        this.tryGetInvocationData = async (transaction) => {\n            const data = await this.invocationData.tryGet({\n                hash: transaction.hash,\n            });\n            if (data === undefined) {\n                return undefined;\n            }\n            const [asset, contracts, actions] = await Promise.all([\n                data.assetHash === undefined ? Promise.resolve(undefined) : this.asset.get({ hash: data.assetHash }),\n                Promise.all(data.contractHashes.map(async (contractHash) => this.contract.tryGet({ hash: contractHash }))),\n                data.actionIndexStart.eq(data.actionIndexStop)\n                    ? Promise.resolve([])\n                    : this.action\n                        .getAll$({\n                        indexStart: data.actionIndexStart,\n                        indexStop: data.actionIndexStop.sub(node_core_1.utils.ONE),\n                    })\n                        .pipe(operators_1.toArray())\n                        .toPromise(),\n            ]);\n            return {\n                asset,\n                contracts: contracts.filter(utils_1.utils.notNull),\n                deletedContractHashes: data.deletedContractHashes,\n                migratedContractHashes: data.migratedContractHashes,\n                voteUpdates: data.voteUpdates,\n                result: data.result,\n                actions,\n                storageChanges: data.storageChanges,\n            };\n        };\n        this.tryGetTransactionData = async (transaction) => this.transactionData.tryGet({ hash: transaction.hash });\n        this.getUnclaimed = async (hash) => this.accountUnclaimed\n            .getAll$({ hash })\n            .pipe(operators_1.toArray())\n            .toPromise()\n            .then((values) => values.map((value) => value.input));\n        this.getUnspent = async (hash) => {\n            const unspent = await this.accountUnspent.getAll$({ hash }).pipe(operators_1.toArray()).toPromise();\n            return unspent.map((value) => value.input);\n        };\n        this.getAllValidators = async () => this.validator.all$.pipe(operators_1.toArray()).toPromise();\n        this.isSpent = async (input) => {\n            const transactionData = await this.transactionData.tryGet({\n                hash: input.hash,\n            });\n            return (transactionData !== undefined && transactionData.endHeights[input.index] !== undefined);\n        };\n        this.tryGetSpentCoin = async (input) => {\n            const [transactionData, output] = await Promise.all([\n                this.transactionData.tryGet({ hash: input.hash }),\n                this.output.get(input),\n            ]);\n            if (transactionData === undefined) {\n                return undefined;\n            }\n            const endHeight = transactionData.endHeights[input.index];\n            if (endHeight === undefined) {\n                return undefined;\n            }\n            const claimed = transactionData.claimed[input.index];\n            return {\n                output,\n                startHeight: transactionData.startHeight,\n                endHeight,\n                claimed: !!claimed,\n            };\n        };\n        this.storage = options.storage;\n        this.mutableCurrentBlock = options.currentBlock;\n        this.mutablePreviousBlock = options.previousBlock;\n        this.mutableCurrentHeader = options.currentHeader;\n        this.vm = options.vm;\n        this.settings$ = new rxjs_1.BehaviorSubject(options.settings);\n        const self = this;\n        this.deserializeWireContext = {\n            get messageMagic() {\n                return self.settings.messageMagic;\n            },\n        };\n        this.feeContext = {\n            get getOutput() {\n                return self.output.get;\n            },\n            get governingToken() {\n                return self.settings.governingToken;\n            },\n            get utilityToken() {\n                return self.settings.utilityToken;\n            },\n            get fees() {\n                return self.settings.fees;\n            },\n            get registerValidatorFee() {\n                return self.settings.registerValidatorFee;\n            },\n        };\n        this.serializeJSONContext = {\n            get addressVersion() {\n                return self.settings.addressVersion;\n            },\n            get feeContext() {\n                return self.feeContext;\n            },\n            get tryGetInvocationData() {\n                return self.tryGetInvocationData;\n            },\n            get tryGetTransactionData() {\n                return self.tryGetTransactionData;\n            },\n            get getUnclaimed() {\n                return self.getUnclaimed;\n            },\n            get getUnspent() {\n                return self.getUnspent;\n            },\n        };\n        this.start();\n    }\n    static async create({ settings, storage, vm }) {\n        const [currentBlock, currentHeader] = await Promise.all([\n            storage.block.tryGetLatest(),\n            storage.header.tryGetLatest(),\n        ]);\n        let previousBlock;\n        if (currentBlock !== undefined) {\n            previousBlock = await storage.block.tryGet({ hashOrIndex: currentBlock.index - 1 });\n        }\n        const blockchain = new Blockchain({\n            currentBlock,\n            currentHeader,\n            previousBlock,\n            settings,\n            storage,\n            vm,\n        });\n        if (currentHeader === undefined) {\n            await blockchain.persistHeaders([settings.genesisBlock.header]);\n        }\n        if (currentBlock === undefined) {\n            await blockchain.persistBlock({ block: settings.genesisBlock });\n        }\n        return blockchain;\n    }\n    get settings() {\n        return this.settings$.getValue();\n    }\n    get currentBlock() {\n        if (this.mutableCurrentBlock === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.mutableCurrentBlock;\n    }\n    get previousBlock() {\n        return this.mutablePreviousBlock;\n    }\n    get currentHeader() {\n        if (this.mutableCurrentHeader === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.mutableCurrentHeader;\n    }\n    get currentBlockIndex() {\n        return this.mutableCurrentBlock === undefined ? -1 : this.currentBlock.index;\n    }\n    get block$() {\n        return this.mutableBlock$;\n    }\n    get isPersistingBlock() {\n        return this.mutablePersistingBlocks;\n    }\n    get account() {\n        return this.storage.account;\n    }\n    get accountUnclaimed() {\n        return this.storage.accountUnclaimed;\n    }\n    get accountUnspent() {\n        return this.storage.accountUnspent;\n    }\n    get action() {\n        return this.storage.action;\n    }\n    get asset() {\n        return this.storage.asset;\n    }\n    get block() {\n        return this.storage.block;\n    }\n    get blockData() {\n        return this.storage.blockData;\n    }\n    get header() {\n        return this.storage.header;\n    }\n    get transaction() {\n        return this.storage.transaction;\n    }\n    get transactionData() {\n        return this.storage.transactionData;\n    }\n    get output() {\n        return this.storage.output;\n    }\n    get contract() {\n        return this.storage.contract;\n    }\n    get storageItem() {\n        return this.storage.storageItem;\n    }\n    get validator() {\n        return this.storage.validator;\n    }\n    get invocationData() {\n        return this.storage.invocationData;\n    }\n    get validatorsCount() {\n        return this.storage.validatorsCount;\n    }\n    async stop() {\n        if (!this.mutableRunning) {\n            return;\n        }\n        if (this.mutablePersistingBlocks) {\n            const doneRunningPromise = new Promise((resolve) => {\n                this.mutableDoneRunningResolve = resolve;\n            });\n            this.mutableRunning = false;\n            await doneRunningPromise;\n            this.mutableDoneRunningResolve = undefined;\n        }\n        else {\n            this.mutableRunning = false;\n        }\n        logger.info({ name: 'neo_blockchain_stop' }, 'NEO blockchain stopped.');\n    }\n    updateSettings(settings) {\n        this.settings$.next(settings);\n    }\n    async persistBlock({ block, unsafe = false, }) {\n        return new Promise((resolve, reject) => {\n            if (this.mutableInQueue.has(block.hashHex)) {\n                resolve();\n                return;\n            }\n            this.mutableInQueue.add(block.hashHex);\n            this.mutableBlockQueue.queue({\n                block,\n                resolve,\n                reject,\n                unsafe,\n            });\n            this.persistBlocksAsync();\n        });\n    }\n    async persistHeaders(_headers) {\n    }\n    async verifyBlock(block) {\n        await block.verify({\n            genesisBlock: this.settings.genesisBlock,\n            tryGetBlock: this.block.tryGet,\n            tryGetHeader: this.header.tryGet,\n            isSpent: this.isSpent,\n            getAsset: this.asset.get,\n            getOutput: this.output.get,\n            tryGetAccount: this.account.tryGet,\n            getValidators: this.getValidators,\n            standbyValidators: this.settings.standbyValidators,\n            getAllValidators: this.getAllValidators,\n            calculateClaimAmount: async (claims) => this.calculateClaimAmount(claims),\n            verifyScript: async (options) => this.verifyScript(options),\n            currentHeight: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n            governingToken: this.settings.governingToken,\n            utilityToken: this.settings.utilityToken,\n            fees: this.settings.fees,\n            registerValidatorFee: this.settings.registerValidatorFee,\n        });\n    }\n    async verifyConsensusPayload(payload) {\n        await payload.verify({\n            getValidators: async () => this.getValidators([]),\n            verifyScript: async (options) => this.verifyScript(options),\n            currentIndex: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n            currentBlockHash: this.currentBlock.hash,\n        });\n    }\n    async verifyTransaction({ transaction, memPool, }) {\n        try {\n            const verifications = await transaction.verify({\n                calculateClaimAmount: this.calculateClaimAmount,\n                isSpent: this.isSpent,\n                getAsset: this.asset.get,\n                getOutput: this.output.get,\n                tryGetAccount: this.account.tryGet,\n                standbyValidators: this.settings.standbyValidators,\n                getAllValidators: this.getAllValidators,\n                verifyScript: async (options) => this.verifyScript(options),\n                governingToken: this.settings.governingToken,\n                utilityToken: this.settings.utilityToken,\n                fees: this.settings.fees,\n                registerValidatorFee: this.settings.registerValidatorFee,\n                currentHeight: this.currentBlockIndex,\n                memPool,\n            });\n            return { verifications };\n        }\n        catch (error) {\n            if (error.code === undefined || typeof error.code !== 'string' || !error.code.includes('VERIFY')) {\n                throw new errors_1.UnknownVerifyError(error.message);\n            }\n            throw error;\n        }\n    }\n    async invokeScript(script) {\n        const transaction = new node_core_1.InvocationTransaction({\n            script,\n            gas: client_common_1.common.ONE_HUNDRED_FIXED8,\n        });\n        return this.invokeTransaction(transaction);\n    }\n    async invokeTransaction(transaction) {\n        const blockchain = this.createWriteBlockchain();\n        const mutableActions = [];\n        let globalActionIndex = new bn_js_1.BN(0);\n        const result = await wrapExecuteScripts_1.wrapExecuteScripts(async () => this.vm.executeScripts({\n            scripts: [{ code: transaction.script }],\n            blockchain,\n            scriptContainer: {\n                type: node_core_1.ScriptContainerType.Transaction,\n                value: transaction,\n            },\n            listeners: {\n                onLog: ({ message, scriptHash }) => {\n                    mutableActions.push(new node_core_1.LogAction({\n                        index: globalActionIndex,\n                        scriptHash,\n                        message,\n                    }));\n                    globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                },\n                onNotify: ({ args, scriptHash }) => {\n                    mutableActions.push(new node_core_1.NotificationAction({\n                        index: globalActionIndex,\n                        scriptHash,\n                        args,\n                    }));\n                    globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                },\n            },\n            triggerType: node_core_1.TriggerType.Application,\n            action: node_core_1.NULL_ACTION,\n            gas: transaction.gas,\n            skipWitnessVerify: true,\n        }));\n        return {\n            result,\n            actions: mutableActions,\n        };\n    }\n    async reset() {\n        await this.stop();\n        await this.storage.reset();\n        this.mutableCurrentHeader = undefined;\n        this.mutableCurrentBlock = undefined;\n        this.mutablePreviousBlock = undefined;\n        this.start();\n        await this.persistHeaders([this.settings.genesisBlock.header]);\n        await this.persistBlock({ block: this.settings.genesisBlock });\n    }\n    async persistBlocksAsync() {\n        if (this.mutablePersistingBlocks || !this.mutableRunning) {\n            return;\n        }\n        this.mutablePersistingBlocks = true;\n        let entry;\n        try {\n            entry = this.cleanBlockQueue();\n            while (this.mutableRunning && entry !== undefined && entry.block.index === this.currentBlockIndex + 1) {\n                const entryNonNull = entry;\n                const logData = {\n                    [utils_1.Labels.NEO_BLOCK_INDEX]: entry.block.index,\n                    name: 'neo_blockchain_persist_block_top_level',\n                };\n                try {\n                    await this.persistBlockInternal(entryNonNull.block, entryNonNull.unsafe);\n                    logger.debug(logData);\n                }\n                catch (err) {\n                    logger.error(Object.assign({ err }, logData));\n                    throw err;\n                }\n                entry.resolve();\n                this.mutableBlock$.next(entry.block);\n                entry = this.cleanBlockQueue();\n            }\n            if (entry !== undefined) {\n                this.mutableBlockQueue.queue(entry);\n            }\n        }\n        catch (error) {\n            if (entry !== undefined) {\n                entry.reject(error);\n            }\n        }\n        finally {\n            this.mutablePersistingBlocks = false;\n            if (this.mutableDoneRunningResolve !== undefined) {\n                this.mutableDoneRunningResolve();\n                this.mutableDoneRunningResolve = undefined;\n            }\n        }\n    }\n    cleanBlockQueue() {\n        let entry = this.dequeBlockQueue();\n        while (entry !== undefined && entry.block.index <= this.currentBlockIndex) {\n            entry.resolve();\n            entry = this.dequeBlockQueue();\n        }\n        return entry;\n    }\n    dequeBlockQueue() {\n        if (this.mutableBlockQueue.length > 0) {\n            return this.mutableBlockQueue.dequeue();\n        }\n        return undefined;\n    }\n    start() {\n        this.mutableBlock$ = new rxjs_1.Subject();\n        this.mutablePersistingBlocks = false;\n        this.mutableBlockQueue = new js_priority_queue_1.default({\n            comparator: (a, b) => a.block.index - b.block.index,\n        });\n        this.mutableInQueue = new Set();\n        this.mutableDoneRunningResolve = undefined;\n        this.mutableRunning = true;\n        logger.info({ name: 'neo_blockchain_start' }, 'Neo blockchain started.');\n    }\n    async persistBlockInternal(block, unsafe) {\n        if (!unsafe) {\n            await this.verifyBlock(block);\n        }\n        const blockchain = this.createWriteBlockchain();\n        await blockchain.persistBlock(block);\n        await this.storage.commit(blockchain.getChangeSet());\n        this.mutablePreviousBlock = this.mutableCurrentBlock;\n        this.mutableCurrentBlock = block;\n        this.mutableCurrentHeader = block.header;\n    }\n    createWriteBlockchain() {\n        return new WriteBatchBlockchain_1.WriteBatchBlockchain({\n            settings: this.settings,\n            currentBlock: this.mutableCurrentBlock,\n            currentHeader: this.mutableCurrentHeader,\n            storage: this.storage,\n            vm: this.vm,\n            getValidators: this.getValidators,\n        });\n    }\n}\nexports.Blockchain = Blockchain;\n\n//# sourceMappingURL=Blockchain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createChild = exports.getFinalLogger = exports.setGlobalLogLevel = exports.testLogger = exports.httpLogger = exports.cliLogger = exports.rpcLogger = exports.nodeLogger = exports.serverLogger = exports.editorLogger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst logger_config_1 = require(\"@neo-one/logger-config\");\nconst pino_1 = tslib_1.__importDefault(require(\"pino\"));\nconst createLogger = (service, options = {}) => options.browser !== undefined\n    ? pino_1.default(Object.assign(Object.assign({}, options), { base: { service }, prettyPrint: logger_config_1.getPretty() }))\n    : pino_1.default(Object.assign(Object.assign({}, options), { base: { service }, prettyPrint: logger_config_1.getPretty() }), process.env.NODE_ENV === 'production' ? pino_1.default.extreme(1) : pino_1.default.destination(1));\nconst browserOptions = typeof window === 'undefined' && typeof origin === 'undefined' ? {} : { browser: { asObject: true } };\nexports.editorLogger = createLogger('editor-server', browserOptions);\nexports.serverLogger = createLogger('server', browserOptions);\nexports.nodeLogger = createLogger('node', browserOptions);\nexports.rpcLogger = createLogger('rpc', browserOptions);\nexports.cliLogger = createLogger('cli', browserOptions);\nexports.httpLogger = createLogger('http', browserOptions);\nexports.testLogger = createLogger('test', browserOptions);\nlet loggers = [\n    exports.editorLogger,\n    exports.serverLogger,\n    exports.nodeLogger,\n    exports.rpcLogger,\n    exports.cliLogger,\n    exports.httpLogger,\n    exports.testLogger,\n];\nexports.setGlobalLogLevel = (level) => loggers.forEach((logger) => {\n    logger.level = level;\n});\nexports.getFinalLogger = (logger) => pino_1.default.final(logger);\nexports.createChild = (parent, bindings) => {\n    const child = parent.child(bindings);\n    loggers = loggers.concat(child);\n    return child;\n};\n\n//# sourceMappingURL=loggers.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./pretty\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setPretty = exports.getPretty = void 0;\nlet pretty = false;\nexports.getPretty = () => pretty;\nexports.setPretty = (newPretty) => {\n    pretty = newPretty;\n};\n\n//# sourceMappingURL=pretty.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=types.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidatorCache = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst operators_1 = require(\"rxjs/operators\");\nclass ValidatorCache {\n    constructor(blockchain) {\n        this.blockchain = blockchain;\n        this.mutableAccounts = {};\n        this.mutableValidators = {};\n    }\n    async getAccount(hash) {\n        let account = this.mutableAccounts[client_common_1.common.uInt160ToHex(hash)];\n        if (account === undefined) {\n            account = await this.blockchain.account.tryGet({ hash });\n        }\n        if (account === undefined) {\n            account = new node_core_1.Account({ hash });\n        }\n        this.mutableAccounts[client_common_1.common.uInt160ToHex(hash)] = account;\n        return account;\n    }\n    async updateAccountBalance(hash, asset, value) {\n        const assetHex = client_common_1.common.uInt256ToHex(asset);\n        await this.getAccount(hash);\n        const hashHex = client_common_1.common.uInt160ToHex(hash);\n        const account = this.mutableAccounts[hashHex];\n        const balance = account.balances[assetHex];\n        this.mutableAccounts[hashHex] = account.update({\n            balances: Object.assign(Object.assign({}, account.balances), { [assetHex]: value.add(balance === undefined ? client_common_1.utils.ZERO : balance) }),\n        });\n    }\n    async getValidator(publicKey) {\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        let validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            validator = await this.blockchain.validator.tryGet({ publicKey });\n        }\n        if (validator === undefined) {\n            validator = new node_core_1.Validator({ publicKey });\n        }\n        this.mutableValidators[publicKeyHex] = validator;\n        return validator;\n    }\n    async addValidator(validator) {\n        this.mutableValidators[client_common_1.common.ecPointToHex(validator.publicKey)] = validator;\n    }\n    async deleteValidator(publicKey) {\n        this.mutableValidators[client_common_1.common.ecPointToHex(publicKey)] = undefined;\n    }\n    async updateValidatorVotes(publicKey, value) {\n        await this.getValidator(publicKey);\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        const validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            throw new Error('For Flow');\n        }\n        this.mutableValidators[publicKeyHex] = validator.update({\n            votes: validator.votes.add(value),\n        });\n    }\n    async updateValidator(publicKey, update) {\n        await this.getValidator(publicKey);\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        const validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            throw new Error('For Flow');\n        }\n        const newValidator = validator.update(update);\n        this.mutableValidators[publicKeyHex] = newValidator;\n        return newValidator;\n    }\n    async getAllValidators() {\n        const validators = await this.blockchain.validator.all$.pipe(operators_1.toArray()).toPromise();\n        const mutablePublicKeyToValidator = lodash_1.default.fromPairs(validators.map((validator) => [client_common_1.common.ecPointToHex(validator.publicKey), validator]));\n        Object.entries(this.mutableValidators).forEach(([publicKey, validator]) => {\n            const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n            if (validator === undefined) {\n                delete mutablePublicKeyToValidator[publicKeyHex];\n            }\n            else {\n                mutablePublicKeyToValidator[publicKeyHex] = validator;\n            }\n        });\n        return Object.values(mutablePublicKeyToValidator);\n    }\n    async getValidatorsCount() {\n        let validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            validatorsCount = await this.blockchain.validatorsCount.tryGet();\n        }\n        if (validatorsCount === undefined) {\n            validatorsCount = new node_core_1.ValidatorsCount();\n        }\n        this.mutableValidatorsCount = validatorsCount;\n        return validatorsCount;\n    }\n    async updateValidatorsCountVotes(index, value) {\n        await this.getValidatorsCount();\n        const validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            throw new Error('For Flow');\n        }\n        const votes = validatorsCount.votes[index];\n        this.mutableValidatorsCount = validatorsCount.update({\n            votes: validatorsCount.votes\n                .slice(0, index)\n                .concat((votes === undefined ? client_common_1.utils.ZERO : votes).add(value))\n                .concat(validatorsCount.votes.slice(index + 1)),\n        });\n    }\n    async addValidatorsCount(validatorsCount) {\n        this.mutableValidatorsCount = validatorsCount;\n    }\n    async updateValidatorsCount(update) {\n        await this.getValidatorsCount();\n        const validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            throw new Error('For Flow');\n        }\n        this.mutableValidatorsCount = validatorsCount.update(update);\n        return this.mutableValidatorsCount;\n    }\n}\nexports.ValidatorCache = ValidatorCache;\n\n//# sourceMappingURL=ValidatorCache.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteBatchBlockchain = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst errors_1 = require(\"./errors\");\nconst getValidators_1 = require(\"./getValidators\");\nconst StorageCache_1 = require(\"./StorageCache\");\nconst wrapExecuteScripts_1 = require(\"./wrapExecuteScripts\");\nclass WriteBatchBlockchain {\n    constructor(options) {\n        this.settings = options.settings;\n        this.currentBlockInternal = options.currentBlock;\n        this.currentHeaderInternal = options.currentHeader;\n        this.storage = options.storage;\n        this.vm = options.vm;\n        this.getValidators = options.getValidators;\n        const output = new StorageCache_1.OutputStorageCache(() => this.storage.output);\n        this.caches = {\n            account: new StorageCache_1.ReadAllAddUpdateDeleteStorageCache({\n                name: 'account',\n                readAllStorage: () => this.storage.account,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt160ToString(key.hash),\n                createAddChange: (value) => ({ type: 'account', value }),\n                createDeleteChange: (key) => ({ type: 'account', key }),\n            }),\n            accountUnspent: new StorageCache_1.ReadGetAllAddDeleteStorageCache({\n                name: 'accountUnspent',\n                readGetAllStorage: () => this.storage.accountUnspent,\n                getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${client_common_1.common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n                matchesPartialKey: (value, key) => client_common_1.common.uInt160Equal(value.hash, key.hash),\n                createAddChange: (value) => ({ type: 'accountUnspent', value }),\n                createDeleteChange: (key) => ({ type: 'accountUnspent', key }),\n            }),\n            accountUnclaimed: new StorageCache_1.ReadGetAllAddDeleteStorageCache({\n                name: 'accountUnclaimed',\n                readGetAllStorage: () => this.storage.accountUnclaimed,\n                getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${client_common_1.common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n                matchesPartialKey: (value, key) => client_common_1.common.uInt160Equal(value.hash, key.hash),\n                createAddChange: (value) => ({ type: 'accountUnclaimed', value }),\n                createDeleteChange: (key) => ({ type: 'accountUnclaimed', key }),\n            }),\n            action: new StorageCache_1.ReadGetAllAddStorageCache({\n                name: 'action',\n                readGetAllStorage: () => this.storage.action,\n                getKeyFromValue: (value) => ({\n                    index: value.index,\n                }),\n                getKeyString: (key) => key.index.toString(10),\n                matchesPartialKey: (value, key) => (key.indexStart === undefined || value.index.gte(key.indexStart)) &&\n                    (key.indexStop === undefined || value.index.lte(key.indexStop)),\n                createAddChange: (value) => ({ type: 'action', value }),\n            }),\n            asset: new StorageCache_1.ReadAddUpdateStorageCache({\n                name: 'asset',\n                readStorage: () => this.storage.asset,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'asset', value }),\n            }),\n            block: new StorageCache_1.BlockLikeStorageCache({\n                name: 'block',\n                readStorage: () => ({\n                    get: this.storage.block.get,\n                    tryGet: this.storage.block.tryGet,\n                }),\n                createAddChange: (value) => ({ type: 'block', value }),\n            }),\n            blockData: new StorageCache_1.ReadAddStorageCache({\n                name: 'blockData',\n                readStorage: () => this.storage.blockData,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'blockData', value }),\n            }),\n            header: new StorageCache_1.BlockLikeStorageCache({\n                name: 'header',\n                readStorage: () => ({\n                    get: this.storage.header.get,\n                    tryGet: this.storage.header.tryGet,\n                }),\n                createAddChange: (value) => ({ type: 'header', value }),\n            }),\n            transaction: new StorageCache_1.ReadAddStorageCache({\n                name: 'transaction',\n                readStorage: () => this.storage.transaction,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'transaction', value }),\n                onAdd: async (value) => {\n                    await Promise.all(value.outputs.map(async (out, index) => output.add({ hash: value.hash, index, output: out })));\n                },\n                allowDupes: true,\n            }),\n            transactionData: new StorageCache_1.ReadAddUpdateStorageCache({\n                name: 'transactionData',\n                readStorage: () => this.storage.transactionData,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'transactionData', value }),\n                allowDupes: true,\n            }),\n            output,\n            contract: new StorageCache_1.ReadAddDeleteStorageCache({\n                name: 'contract',\n                readStorage: () => this.storage.contract,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt160ToString(key.hash),\n                createAddChange: (value) => ({ type: 'contract', value }),\n                createDeleteChange: (key) => ({ type: 'contract', key }),\n            }),\n            storageItem: new StorageCache_1.ReadGetAllAddUpdateDeleteStorageCache({\n                name: 'storageItem',\n                readGetAllStorage: () => this.storage.storageItem,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({\n                    hash: value.hash,\n                    key: value.key,\n                }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${key.key.toString('hex')}`,\n                matchesPartialKey: (value, key) => (key.hash === undefined || client_common_1.common.uInt160Equal(value.hash, key.hash)) &&\n                    (key.prefix === undefined || key.prefix.every((byte, idx) => value.key[idx] === byte)),\n                createAddChange: (value) => ({ type: 'storageItem', value }),\n                createDeleteChange: (key) => ({ type: 'storageItem', key }),\n            }),\n            validator: new StorageCache_1.ReadAllAddUpdateDeleteStorageCache({\n                name: 'validator',\n                readAllStorage: () => this.storage.validator,\n                getKeyFromValue: (value) => ({ publicKey: value.publicKey }),\n                getKeyString: (key) => client_common_1.common.ecPointToString(key.publicKey),\n                createAddChange: (value) => ({ type: 'validator', value }),\n                update: (value, update) => value.update(update),\n                createDeleteChange: (key) => ({ type: 'validator', key }),\n            }),\n            invocationData: new StorageCache_1.ReadAddStorageCache({\n                name: 'invocationData',\n                readStorage: () => this.storage.invocationData,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'invocationData', value }),\n            }),\n            validatorsCount: new StorageCache_1.ReadAddUpdateMetadataStorageCache({\n                name: 'validatorsCount',\n                readStorage: () => this.storage.validatorsCount,\n                createAddChange: (value) => ({ type: 'validatorsCount', value }),\n                update: (value, update) => value.update(update),\n            }),\n        };\n        this.account = this.caches.account;\n        this.accountUnspent = this.caches.accountUnspent;\n        this.accountUnclaimed = this.caches.accountUnclaimed;\n        this.action = this.caches.action;\n        this.asset = this.caches.asset;\n        this.block = this.caches.block;\n        this.blockData = this.caches.blockData;\n        this.header = this.caches.header;\n        this.transaction = this.caches.transaction;\n        this.transactionData = this.caches.transactionData;\n        this.output = this.caches.output;\n        this.contract = this.caches.contract;\n        this.storageItem = this.caches.storageItem;\n        this.validator = this.caches.validator;\n        this.invocationData = this.caches.invocationData;\n        this.validatorsCount = this.caches.validatorsCount;\n    }\n    get currentBlock() {\n        if (this.currentBlockInternal === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.currentBlockInternal;\n    }\n    get currentBlockIndex() {\n        return this.currentBlockInternal === undefined ? 0 : this.currentBlockInternal.index;\n    }\n    get currentHeader() {\n        if (this.currentHeaderInternal === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.currentHeaderInternal;\n    }\n    getChangeSet() {\n        return Object.values(this.caches).reduce((acc, cache) => acc.concat(cache.getChangeSet()), []);\n    }\n    getTrackedChangeSet() {\n        return Object.values(this.caches).reduce((acc, cache) => acc.concat(cache.getTrackedChangeSet()), []);\n    }\n    async persistBlock(block) {\n        const [maybePrevBlockData, outputContractsList] = await Promise.all([\n            block.index === 0 ? Promise.resolve(undefined) : this.blockData.get({ hash: block.previousHash }),\n            Promise.all([\n                ...new Set(block.transactions.reduce((acc, transaction) => acc.concat(transaction.outputs.map((output) => client_common_1.common.uInt160ToString(output.address))), [])),\n            ].map(async (hash) => this.contract.tryGet({ hash: client_common_1.common.stringToUInt160(hash) }))),\n            this.block.add(block),\n            this.header.add(block.header),\n        ]);\n        const prevBlockData = maybePrevBlockData === undefined\n            ? {\n                lastGlobalTransactionIndex: client_common_1.utils.NEGATIVE_ONE,\n                lastGlobalActionIndex: client_common_1.utils.NEGATIVE_ONE,\n                systemFee: client_common_1.utils.ZERO,\n            }\n            : {\n                lastGlobalTransactionIndex: maybePrevBlockData.lastGlobalTransactionIndex,\n                lastGlobalActionIndex: maybePrevBlockData.lastGlobalActionIndex,\n                systemFee: maybePrevBlockData.systemFee,\n            };\n        const outputContracts = {};\n        outputContractsList.filter(utils_1.utils.notNull).forEach((outputContract) => {\n            outputContracts[outputContract.hashHex] = outputContract;\n        });\n        const [utxo, rest] = lodash_1.default.partition(block.transactions.map((transaction, idx) => [idx, transaction]), ([idx, transaction]) => ((transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction) ||\n            (transaction.type === node_core_1.TransactionType.Contract && transaction instanceof node_core_1.ContractTransaction) ||\n            (transaction.type === node_core_1.TransactionType.Miner && transaction instanceof node_core_1.MinerTransaction)) &&\n            !transaction.outputs.some((output) => outputContracts[client_common_1.common.uInt160ToString(output.address)] !== undefined));\n        const [globalActionIndex] = await Promise.all([\n            rest.length > 0\n                ? this.persistTransactions(block, rest, prevBlockData.lastGlobalTransactionIndex, prevBlockData.lastGlobalActionIndex)\n                : Promise.resolve(prevBlockData.lastGlobalActionIndex),\n            utxo.length > 0\n                ?\n                    this.persistUTXOTransactions(block, utxo, prevBlockData.lastGlobalTransactionIndex)\n                : Promise.resolve(),\n        ]);\n        await this.blockData.add(new node_core_1.BlockData({\n            hash: block.hash,\n            lastGlobalTransactionIndex: prevBlockData.lastGlobalTransactionIndex.add(new bn_js_1.BN(block.transactions.length)),\n            lastGlobalActionIndex: globalActionIndex,\n            systemFee: prevBlockData.systemFee.add(block.getSystemFee({\n                getOutput: this.output.get,\n                governingToken: this.settings.governingToken,\n                utilityToken: this.settings.utilityToken,\n                fees: this.settings.fees,\n                registerValidatorFee: this.settings.registerValidatorFee,\n            })),\n        }));\n    }\n    async persistUTXOTransactions(block, transactions, lastGlobalTransactionIndex) {\n        const inputs = [];\n        const claims = [];\n        const outputWithInputs = [];\n        for (const idxAndTransaction of transactions) {\n            const transaction = idxAndTransaction[1];\n            inputs.push(...transaction.inputs);\n            if (transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction) {\n                claims.push(...transaction.claims);\n            }\n            outputWithInputs.push(...this.getOutputWithInput(transaction));\n        }\n        await Promise.all([\n            Promise.all(transactions.map(async ([idx, transaction]) => this.transaction.add(transaction))),\n            Promise.all(transactions.map(async ([idx, transaction]) => this.transactionData.add(new node_core_1.TransactionData({\n                hash: transaction.hash,\n                startHeight: block.index,\n                blockHash: block.hash,\n                index: idx,\n                globalIndex: lastGlobalTransactionIndex.add(new bn_js_1.BN(idx + 1)),\n            })))),\n            this.updateAccounts(inputs, claims, outputWithInputs),\n            this.updateCoins(inputs, claims, block),\n        ]);\n    }\n    async persistTransactions(block, transactions, lastGlobalTransactionIndex, lastGlobalActionIndex) {\n        let globalActionIndex = lastGlobalActionIndex.add(client_common_1.utils.ONE);\n        for (const [idx, transaction] of transactions) {\n            globalActionIndex = await this.persistTransaction(block, transaction, idx, lastGlobalTransactionIndex, globalActionIndex);\n        }\n        return globalActionIndex.sub(client_common_1.utils.ONE);\n    }\n    async persistTransaction(block, transactionIn, transactionIndex, lastGlobalTransactionIndex, globalActionIndexIn) {\n        let globalActionIndex = globalActionIndexIn;\n        const transaction = transactionIn;\n        const claims = transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction ? transaction.claims : [];\n        let accountChanges = {};\n        let validatorChanges = {};\n        let validatorsCountChanges = [];\n        if (transaction.type === node_core_1.TransactionType.State && transaction instanceof node_core_1.StateTransaction) {\n            ({ accountChanges, validatorChanges, validatorsCountChanges } = await getValidators_1.getDescriptorChanges({\n                transactions: [transaction],\n                getAccount: async (hash) => this.account.tryGet({ hash }).then((account) => (account === undefined ? new node_core_1.Account({ hash }) : account)),\n                governingTokenHash: this.settings.governingToken.hashHex,\n            }));\n        }\n        await Promise.all([\n            this.transaction.add(transaction),\n            this.transactionData.add(new node_core_1.TransactionData({\n                hash: transaction.hash,\n                blockHash: block.hash,\n                startHeight: block.index,\n                index: transactionIndex,\n                globalIndex: lastGlobalTransactionIndex.add(new bn_js_1.BN(transactionIndex + 1)),\n            })),\n            this.updateAccounts(transaction.inputs, claims, this.getOutputWithInput(transaction), accountChanges),\n            this.updateCoins(transaction.inputs, claims, block),\n            this.processStateTransaction(validatorChanges, validatorsCountChanges),\n        ]);\n        if (transaction.type === node_core_1.TransactionType.Register && transaction instanceof node_core_1.RegisterTransaction) {\n            await this.asset.add(new node_core_1.Asset({\n                hash: transaction.hash,\n                type: transaction.asset.type,\n                name: transaction.asset.name,\n                amount: transaction.asset.amount,\n                precision: transaction.asset.precision,\n                owner: transaction.asset.owner,\n                admin: transaction.asset.admin,\n                issuer: transaction.asset.admin,\n                expiration: this.currentBlockIndex + 2 * 2000000,\n                isFrozen: false,\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Issue && transaction instanceof node_core_1.IssueTransaction) {\n            const results = await Promise.all(Object.entries(transaction.getTransactionResults({\n                getOutput: this.output.get,\n            })));\n            await Promise.all(results.map(async ([assetHex, value]) => {\n                const hash = client_common_1.common.stringToUInt256(assetHex);\n                const asset = await this.asset.get({ hash });\n                await this.asset.update(asset, {\n                    available: asset.available.add(value.neg()),\n                });\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Enrollment && transaction instanceof node_core_1.EnrollmentTransaction) {\n            await this.validator.add(new node_core_1.Validator({\n                publicKey: transaction.publicKey,\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Publish && transaction instanceof node_core_1.PublishTransaction) {\n            const contract = await this.contract.tryGet({\n                hash: transaction.contract.hash,\n            });\n            if (contract === undefined) {\n                await this.contract.add(transaction.contract);\n            }\n        }\n        else if (transaction.type === node_core_1.TransactionType.Invocation && transaction instanceof node_core_1.InvocationTransaction) {\n            const temporaryBlockchain = new WriteBatchBlockchain({\n                settings: this.settings,\n                currentBlock: this.currentBlockInternal,\n                currentHeader: this.currentHeader,\n                storage: this,\n                vm: this.vm,\n                getValidators: this.getValidators,\n            });\n            const migratedContractHashes = [];\n            const voteUpdates = [];\n            const actions = [];\n            const result = await wrapExecuteScripts_1.wrapExecuteScripts(async () => this.vm.executeScripts({\n                scripts: [{ code: transaction.script }],\n                blockchain: temporaryBlockchain,\n                scriptContainer: {\n                    type: node_core_1.ScriptContainerType.Transaction,\n                    value: transaction,\n                },\n                triggerType: node_core_1.TriggerType.Application,\n                action: {\n                    blockIndex: block.index,\n                    blockHash: block.hash,\n                    transactionIndex,\n                    transactionHash: transaction.hash,\n                },\n                gas: transaction.gas,\n                listeners: {\n                    onLog: ({ message, scriptHash }) => {\n                        actions.push(new node_core_1.LogAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            message,\n                        }));\n                        globalActionIndex = globalActionIndex.add(client_common_1.utils.ONE);\n                    },\n                    onNotify: ({ args, scriptHash }) => {\n                        actions.push(new node_core_1.NotificationAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            args,\n                        }));\n                        globalActionIndex = globalActionIndex.add(client_common_1.utils.ONE);\n                    },\n                    onMigrateContract: ({ from, to }) => {\n                        migratedContractHashes.push([from, to]);\n                    },\n                    onSetVotes: ({ address, votes }) => {\n                        voteUpdates.push([address, votes]);\n                    },\n                },\n                persistingBlock: block,\n            }));\n            const addActionsPromise = Promise.all(actions.map(async (action) => this.action.add(action)));\n            if (result instanceof node_core_1.InvocationResultSuccess) {\n                const assetChangeSet = temporaryBlockchain.asset.getChangeSet();\n                const assetHash = assetChangeSet\n                    .map((change) => change.type === 'add' && change.change.type === 'asset' ? change.change.value.hash : undefined)\n                    .find((value) => value !== undefined);\n                const contractsChangeSet = temporaryBlockchain.contract.getChangeSet();\n                const contractHashes = contractsChangeSet\n                    .map((change) => change.type === 'add' && change.change.type === 'contract' ? change.change.value.hash : undefined)\n                    .filter(utils_1.utils.notNull);\n                const deletedContractHashes = contractsChangeSet\n                    .map((change) => change.type === 'delete' && change.change.type === 'contract' ? change.change.key.hash : undefined)\n                    .filter(utils_1.utils.notNull);\n                const storageChanges = temporaryBlockchain.storageItem\n                    .getChangeSet()\n                    .map((change) => {\n                    const addChange = change.type === 'add' && change.change.type === 'storageItem'\n                        ? { value: change.change.value, subType: change.subType }\n                        : undefined;\n                    if (addChange !== undefined) {\n                        const options = {\n                            hash: addChange.value.hash,\n                            key: addChange.value.key,\n                            value: addChange.value.value,\n                        };\n                        return addChange.subType === 'add' ? new node_core_1.StorageChangeAdd(options) : new node_core_1.StorageChangeModify(options);\n                    }\n                    const deleteChange = change.type === 'delete' && change.change.type === 'storageItem' ? change.change.key : undefined;\n                    if (deleteChange !== undefined) {\n                        return new node_core_1.StorageChangeDelete(deleteChange);\n                    }\n                    return undefined;\n                })\n                    .filter(utils_1.utils.notNull);\n                temporaryBlockchain.getTrackedChangeSet().forEach((change) => {\n                    this.caches[change.type].addTrackedChange(change.key, change.value);\n                });\n                await Promise.all([\n                    this.invocationData.add(new node_core_1.InvocationData({\n                        hash: transaction.hash,\n                        assetHash,\n                        contractHashes,\n                        deletedContractHashes,\n                        migratedContractHashes,\n                        voteUpdates,\n                        blockIndex: block.index,\n                        transactionIndex,\n                        actionIndexStart: globalActionIndexIn,\n                        actionIndexStop: globalActionIndex,\n                        result,\n                        storageChanges,\n                    })),\n                    addActionsPromise,\n                ]);\n            }\n            else {\n                await Promise.all([\n                    this.invocationData.add(new node_core_1.InvocationData({\n                        hash: transaction.hash,\n                        assetHash: undefined,\n                        contractHashes: [],\n                        deletedContractHashes: [],\n                        migratedContractHashes: [],\n                        voteUpdates: [],\n                        blockIndex: block.index,\n                        transactionIndex,\n                        actionIndexStart: globalActionIndexIn,\n                        actionIndexStop: globalActionIndex,\n                        result,\n                        storageChanges: [],\n                    })),\n                    addActionsPromise,\n                ]);\n            }\n        }\n        return globalActionIndex;\n    }\n    async processStateTransaction(validatorChanges, validatorsCountChanges) {\n        const validatorsCount = await this.validatorsCount.tryGet();\n        const validatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n        for (const [index, value] of validatorsCountChanges.entries()) {\n            validatorsCountVotes[index] = value;\n        }\n        await Promise.all([\n            Promise.all(Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n                const publicKey = client_common_1.common.hexToECPoint(publicKeyHex);\n                const validator = await this.validator.tryGet({ publicKey });\n                if (validator === undefined) {\n                    await this.validator.add(new node_core_1.Validator({\n                        publicKey,\n                        registered,\n                        votes,\n                    }));\n                }\n                else if (((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n                    ((votes !== undefined && votes.eq(client_common_1.utils.ZERO)) || (votes === undefined && validator.votes.eq(client_common_1.utils.ZERO)))) {\n                    await this.validator.delete({ publicKey: validator.publicKey });\n                }\n                else {\n                    await this.validator.update(validator, { votes, registered });\n                }\n            })),\n            validatorsCount === undefined\n                ? this.validatorsCount.add(new node_core_1.ValidatorsCount({\n                    votes: validatorsCountVotes,\n                }))\n                : (async () => {\n                    await this.validatorsCount.update(validatorsCount, {\n                        votes: validatorsCountVotes,\n                    });\n                })(),\n        ]);\n    }\n    async updateAccounts(inputs, claims, outputs, accountChanges = {}) {\n        const [inputOutputs, claimOutputs] = await Promise.all([\n            this.getInputOutputs(inputs),\n            this.getInputOutputs(claims),\n        ]);\n        const addressValues = Object.entries(lodash_1.default.groupBy(inputOutputs\n            .map(({ output }) => [output.address, output.asset, output.value.neg()])\n            .concat(outputs.map(({ output }) => [output.address, output.asset, output.value])), ([address]) => client_common_1.common.uInt160ToHex(address)));\n        const addressSpent = this.groupByAddress(inputOutputs);\n        const addressClaimed = lodash_1.default.mapValues(this.groupByAddress(claimOutputs), (values) => values.map(({ input }) => input));\n        const addressOutputs = lodash_1.default.groupBy(outputs, (output) => client_common_1.common.uInt160ToHex(output.output.address));\n        await Promise.all(addressValues.map(async ([address, values]) => {\n            const spent = addressSpent[address];\n            const claimed = addressClaimed[address];\n            const outs = addressOutputs[address];\n            const changes = accountChanges[address];\n            await this.updateAccount(client_common_1.common.hexToUInt160(address), values.map(([_address, asset, value]) => [asset, value]), spent === undefined ? [] : spent, claimed === undefined ? [] : claimed, outs === undefined ? [] : outs, changes === undefined ? [] : changes);\n        }));\n    }\n    getOutputWithInput(transaction) {\n        return transaction.outputs.map((output, index) => ({\n            output,\n            input: new node_core_1.Input({ hash: transaction.hash, index }),\n        }));\n    }\n    async getInputOutputs(inputs) {\n        return Promise.all(inputs.map(async (input) => {\n            const output = await this.output.get(input);\n            return { input, output };\n        }));\n    }\n    groupByAddress(inputOutputs) {\n        return lodash_1.default.groupBy(inputOutputs, ({ output }) => client_common_1.common.uInt160ToHex(output.address));\n    }\n    async updateAccount(address, values, spent, claimed, outputs, votes) {\n        const account = await this.account.tryGet({ hash: address });\n        const balances = values.reduce((acc, [asset, value]) => {\n            const key = client_common_1.common.uInt256ToHex(asset);\n            if (acc[key] === undefined) {\n                acc[key] = client_common_1.utils.ZERO;\n            }\n            acc[key] = acc[key].add(value);\n            return acc;\n        }, account === undefined\n            ? {}\n            : Object.entries(account.balances).reduce((acc, [key, value]) => {\n                if (value === undefined) {\n                    return Object.assign(Object.assign({}, acc), { [key]: client_common_1.utils.ZERO });\n                }\n                return Object.assign(Object.assign({}, acc), { [key]: value });\n            }, {}));\n        const promises = [];\n        promises.push(...spent.map(async ({ input }) => this.accountUnspent.delete({\n            hash: address,\n            input,\n        })));\n        promises.push(...outputs.map(async ({ input }) => this.accountUnspent.add(new node_core_1.AccountUnspent({ hash: address, input }))));\n        promises.push(...claimed.map(async (input) => this.accountUnclaimed.delete({\n            hash: address,\n            input,\n        })));\n        promises.push(...spent\n            .filter(({ output }) => client_common_1.common.uInt256Equal(output.asset, this.settings.governingToken.hash))\n            .map(async ({ input }) => this.accountUnclaimed.add(new node_core_1.AccountUnclaimed({ hash: address, input }))));\n        if (account === undefined) {\n            promises.push(this.account.add(new node_core_1.Account({\n                hash: address,\n                balances,\n                votes,\n            })));\n        }\n        else {\n            promises.push(this.account.update(account, { balances, votes }).then(async (newAccount) => {\n                if (newAccount.isDeletable()) {\n                    await this.account.delete({ hash: address });\n                }\n            }));\n        }\n        await Promise.all(promises);\n    }\n    async updateCoins(inputs, claims, block) {\n        const inputClaims = inputs\n            .map((input) => ({ type: 'input', input, hash: input.hash }))\n            .concat(claims.map((input) => ({ type: 'claim', input, hash: input.hash })));\n        const hashInputClaims = Object.entries(lodash_1.default.groupBy(inputClaims, ({ hash }) => client_common_1.common.uInt256ToHex(hash)));\n        await Promise.all(hashInputClaims.map(async ([hash, values]) => this.updateCoin(client_common_1.common.hexToUInt256(hash), values, block)));\n    }\n    async updateCoin(hash, inputClaims, block) {\n        const spentCoins = await this.transactionData.get({ hash });\n        const endHeights = Object.assign({}, spentCoins.endHeights);\n        const claimed = Object.assign({}, spentCoins.claimed);\n        for (const inputClaim of inputClaims) {\n            if (inputClaim.type === 'input') {\n                endHeights[inputClaim.input.index] = block.index;\n            }\n            else {\n                claimed[inputClaim.input.index] = true;\n            }\n        }\n        await this.transactionData.update(spentCoins, {\n            endHeights,\n            claimed,\n        });\n    }\n}\nexports.WriteBatchBlockchain = WriteBatchBlockchain;\n\n//# sourceMappingURL=WriteBatchBlockchain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadAddUpdateMetadataStorageCache = exports.BaseReadMetadataStorageCache = exports.OutputStorageCache = exports.BlockLikeStorageCache = exports.ReadAllAddStorageCache = exports.ReadAllAddUpdateDeleteStorageCache = exports.ReadGetAllAddStorageCache = exports.ReadGetAllAddUpdateDeleteStorageCache = exports.ReadGetAllAddDeleteStorageCache = exports.ReadAddStorageCache = exports.ReadAddDeleteStorageCache = exports.ReadAddUpdateStorageCache = exports.ReadAddUpdateDeleteStorageCache = exports.BaseReadStorageCache = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nfunction createGet({ tryGetTracked, readStorage, }) {\n    return async (key) => {\n        const trackedChange = tryGetTracked(key);\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                throw new Error('Not found');\n            }\n            return trackedChange.value;\n        }\n        return readStorage().get(key);\n    };\n}\nfunction createTryGet({ tryGetTracked, readStorage, }) {\n    return async (key) => {\n        const trackedChange = tryGetTracked(key);\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                return undefined;\n            }\n            return trackedChange.value;\n        }\n        return readStorage().tryGet(key);\n    };\n}\nclass BaseReadStorageCache {\n    constructor(options) {\n        this.readStorage = options.readStorage;\n        this.name = options.name;\n        this.createAddChange = options.createAddChange;\n        this.createDeleteChange = options.createDeleteChange;\n        this.onAdd = options.onAdd;\n        this.mutableValues = {};\n        this.get = createGet({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGet = createTryGet({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGetValue = (key) => this.readStorage().tryGet(key);\n    }\n    getChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        return Object.values(this.mutableValues).map((value) => {\n            if (value.type === 'delete') {\n                if (createDeleteChange === undefined) {\n                    throw new Error('Invalid delete');\n                }\n                return { type: 'delete', change: createDeleteChange(value.key) };\n            }\n            return { type: 'add', change: this.createAddChange(value.addValue), subType: value.subType };\n        });\n    }\n    getTrackedChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        return Object.entries(this.mutableValues).map(([key, value]) => {\n            if (value.type === 'delete') {\n                if (createDeleteChange === undefined) {\n                    throw new Error('Invalid delete');\n                }\n                return { type: createDeleteChange(value.key).type, key, value };\n            }\n            return { type: this.createAddChange(value.addValue).type, key, value };\n        });\n    }\n    tryGetTracked(_key) {\n        throw new Error('Not Implemented');\n    }\n}\nexports.BaseReadStorageCache = BaseReadStorageCache;\nclass ReadStorageCache extends BaseReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.getKeyString = options.getKeyString;\n    }\n    tryGetTracked(key) {\n        return this.mutableValues[this.getKeyString(key)];\n    }\n    addTrackedChange(key, value) {\n        this.mutableValues[key] = value;\n    }\n}\nclass ReadAllStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: () => ({\n                get: options.readAllStorage().get,\n                tryGet: options.readAllStorage().tryGet,\n            }),\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.readAllStorage = options.readAllStorage;\n        this.getKeyFromValue = options.getKeyFromValue;\n        this.all$ = rxjs_1.concat(rxjs_1.defer(() => this.readAllStorage().all$.pipe(operators_1.concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n            if (trackedChange !== undefined) {\n                return rxjs_1.EMPTY;\n            }\n            return rxjs_1.of(value);\n        }))), rxjs_1.defer(() => rxjs_1.of(...Object.values(this.mutableValues)\n            .map((value) => (value.type === 'add' ? value.value : undefined))\n            .filter(utils_1.utils.notNull))));\n    }\n}\nclass ReadGetAllStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: () => ({\n                get: options.readGetAllStorage().get,\n                tryGet: options.readGetAllStorage().tryGet,\n            }),\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.readGetAllStorage = options.readGetAllStorage;\n        this.getKeyFromValue = options.getKeyFromValue;\n        this.matchesPartialKey = options.matchesPartialKey;\n        this.getAll$ = (key) => rxjs_1.concat(rxjs_1.defer(() => this.readGetAllStorage()\n            .getAll$(key)\n            .pipe(operators_1.concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n            if (trackedChange !== undefined) {\n                return rxjs_1.EMPTY;\n            }\n            return rxjs_1.of(value);\n        }))), rxjs_1.defer(() => rxjs_1.of(...Object.values(this.mutableValues)\n            .map((value) => value.type === 'add' && this.matchesPartialKey(value.value, key) ? value.value : undefined)\n            .filter(utils_1.utils.notNull))));\n    }\n}\nfunction createAdd({ cache, getKeyFromValue, getKeyString, allowDupes, }) {\n    return async (value) => {\n        const key = getKeyFromValue(value);\n        if (!allowDupes) {\n            const currentValue = await cache.tryGet(key);\n            if (currentValue !== undefined) {\n                throw new Error(`Attempted to add an already existing object for key ` + `${cache.name}:${getKeyString(key)}.`);\n            }\n        }\n        if (cache.onAdd !== undefined) {\n            await cache.onAdd(value);\n        }\n        const trackedChange = cache.tryGetTracked(key);\n        cache.mutableValues[cache.getKeyString(key)] = {\n            type: 'add',\n            addValue: value,\n            value,\n            subType: trackedChange === undefined ? 'add' : 'update',\n        };\n    };\n}\nfunction createUpdate({ cache, update: updateFunc, getKeyFromValue, }) {\n    return async (value, update) => {\n        const key = getKeyFromValue(value);\n        const updatedValue = updateFunc(value, update);\n        const trackedChange = cache.tryGetTracked(key);\n        cache.mutableValues[cache.getKeyString(key)] = {\n            type: 'add',\n            addValue: updatedValue,\n            value: updatedValue,\n            subType: trackedChange === undefined || trackedChange.type === 'delete' || trackedChange.subType === 'update'\n                ? 'update'\n                : 'add',\n        };\n        return updatedValue;\n    };\n}\nfunction createDelete({ cache }) {\n    return async (key) => {\n        const currentValue = await cache.tryGetValue(key);\n        if (currentValue === undefined) {\n            delete cache.mutableValues[cache.getKeyString(key)];\n        }\n        else {\n            cache.mutableValues[cache.getKeyString(key)] = { type: 'delete', key };\n        }\n    };\n}\nclass ReadAddUpdateDeleteStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAddUpdateDeleteStorageCache = ReadAddUpdateDeleteStorageCache;\nclass ReadAddUpdateStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n            allowDupes: options.allowDupes,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n    }\n}\nexports.ReadAddUpdateStorageCache = ReadAddUpdateStorageCache;\nclass ReadAddDeleteStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAddDeleteStorageCache = ReadAddDeleteStorageCache;\nclass ReadAddStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n            allowDupes: options.allowDupes,\n        });\n    }\n}\nexports.ReadAddStorageCache = ReadAddStorageCache;\nclass ReadGetAllAddDeleteStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadGetAllAddDeleteStorageCache = ReadGetAllAddDeleteStorageCache;\nclass ReadGetAllAddUpdateDeleteStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadGetAllAddUpdateDeleteStorageCache = ReadGetAllAddUpdateDeleteStorageCache;\nclass ReadGetAllAddStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n    }\n}\nexports.ReadGetAllAddStorageCache = ReadGetAllAddStorageCache;\nclass ReadAllAddUpdateDeleteStorageCache extends ReadAllStorageCache {\n    constructor(options) {\n        super({\n            readAllStorage: options.readAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAllAddUpdateDeleteStorageCache = ReadAllAddUpdateDeleteStorageCache;\nclass ReadAllAddStorageCache extends ReadAllStorageCache {\n    constructor(options) {\n        super({\n            readAllStorage: options.readAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n    }\n}\nexports.ReadAllAddStorageCache = ReadAllAddStorageCache;\nclass BlockLikeStorageCache extends BaseReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n        });\n        this.mutableIndexValues = {};\n    }\n    async add(value) {\n        const currentValue = await this.tryGet({ hashOrIndex: value.index });\n        if (currentValue !== undefined) {\n            throw new Error('Attempted to add an already existing object.');\n        }\n        const addValue = { type: 'add', addValue: value, value, subType: 'add' };\n        this.mutableValues[client_common_1.common.uInt256ToString(value.hash)] = addValue;\n        this.mutableIndexValues[`${value.index}`] = addValue;\n    }\n    tryGetTracked(key) {\n        if (typeof key.hashOrIndex !== 'number') {\n            return this.mutableValues[client_common_1.common.uInt256ToString(key.hashOrIndex)];\n        }\n        return this.mutableIndexValues[`${key.hashOrIndex}`];\n    }\n    addTrackedChange(key, value) {\n        this.mutableValues[key] = value;\n    }\n}\nexports.BlockLikeStorageCache = BlockLikeStorageCache;\nconst getOutputValueKeyString = (key) => `${client_common_1.common.uInt256ToHex(key.hash)}:${key.index}`;\nclass OutputStorageCache extends ReadStorageCache {\n    constructor(readStorage) {\n        super({\n            readStorage,\n            name: 'output',\n            getKeyString: getOutputValueKeyString,\n            createAddChange: (value) => ({ type: 'output', value }),\n        });\n        this.add = async (value) => {\n            const key = { hash: value.hash, index: value.index };\n            const currentValue = await this.tryGet(key);\n            if (currentValue !== undefined) {\n                throw new Error(`Attempted to add an already existing object for key ` + `${this.name}:${this.getKeyString(key)}.`);\n            }\n            this.mutableValues[this.getKeyString(key)] = {\n                type: 'add',\n                addValue: value,\n                value: value.output,\n                subType: 'add',\n            };\n        };\n    }\n}\nexports.OutputStorageCache = OutputStorageCache;\nfunction createGetMetadata({ tryGetTracked, readStorage, }) {\n    return async () => {\n        const trackedChange = tryGetTracked();\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                throw new Error('Not found');\n            }\n            return trackedChange.value;\n        }\n        return readStorage().get();\n    };\n}\nfunction createTryGetMetadata({ tryGetTracked, readStorage, }) {\n    return async () => {\n        const trackedChange = tryGetTracked();\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                return undefined;\n            }\n            return trackedChange.value;\n        }\n        return readStorage().tryGet();\n    };\n}\nclass BaseReadMetadataStorageCache {\n    constructor(options) {\n        this.readStorage = options.readStorage;\n        this.name = options.name;\n        this.createAddChange = options.createAddChange;\n        this.createDeleteChange = options.createDeleteChange;\n        this.onAdd = options.onAdd;\n        this.get = createGetMetadata({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGet = createTryGetMetadata({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n    }\n    getChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        const value = this.mutableValue;\n        if (value === undefined) {\n            return [];\n        }\n        if (value.type === 'delete') {\n            if (createDeleteChange === undefined) {\n                throw new Error('Invalid delete');\n            }\n            return [{ type: 'delete', change: createDeleteChange() }];\n        }\n        return [{ type: 'add', change: this.createAddChange(value.addValue), subType: value.subType }];\n    }\n    getTrackedChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        const value = this.mutableValue;\n        if (value === undefined) {\n            return [];\n        }\n        if (value.type === 'delete') {\n            if (createDeleteChange === undefined) {\n                throw new Error('Invalid delete');\n            }\n            return [{ type: createDeleteChange().type, key: 'metadata', value: Object.assign(Object.assign({}, value), { key: 'metadata' }) }];\n        }\n        return [{ type: this.createAddChange(value.addValue).type, key: 'metadata', value }];\n    }\n    tryGetTracked() {\n        return this.mutableValue;\n    }\n    addTrackedChange(_key, value) {\n        this.mutableValue = value;\n    }\n}\nexports.BaseReadMetadataStorageCache = BaseReadMetadataStorageCache;\nclass ReadMetadataStorageCache extends BaseReadMetadataStorageCache {\n}\nfunction createAddMetadata({ cache, }) {\n    return async (value) => {\n        if (cache.onAdd !== undefined) {\n            await cache.onAdd(value);\n        }\n        cache.mutableValue = {\n            type: 'add',\n            addValue: value,\n            value,\n            subType: 'add',\n        };\n    };\n}\nfunction createUpdateMetadata({ cache, update: updateFunc, }) {\n    return async (value, update) => {\n        const updatedValue = updateFunc(value, update);\n        cache.mutableValue = {\n            type: 'add',\n            addValue: updatedValue,\n            value: updatedValue,\n            subType: 'update',\n        };\n        return updatedValue;\n    };\n}\nclass ReadAddUpdateMetadataStorageCache extends ReadMetadataStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAddMetadata({\n            cache: this,\n        });\n        this.update = createUpdateMetadata({\n            cache: this,\n            update: options.update,\n        });\n    }\n}\nexports.ReadAddUpdateMetadataStorageCache = ReadAddUpdateMetadataStorageCache;\n\n//# sourceMappingURL=StorageCache.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"./Node\");\nObject.defineProperty(exports, \"Node\", { enumerable: true, get: function () { return Node_1.Node; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Node = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_consensus_1 = require(\"@neo-one/node-consensus\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bloem_1 = require(\"bloem\");\nconst bloom_filter_1 = tslib_1.__importDefault(require(\"bloom-filter\"));\nconst cross_fetch_1 = tslib_1.__importDefault(require(\"cross-fetch\"));\nconst ip_address_1 = require(\"ip-address\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst lru_cache_1 = tslib_1.__importDefault(require(\"lru-cache\"));\nconst Command_1 = require(\"./Command\");\nconst errors_1 = require(\"./errors\");\nconst Message_1 = require(\"./Message\");\nconst payload_1 = require(\"./payload\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'node-protocol' });\nconst createPeerBloomFilter = ({ filter, k, tweak, }) => new bloom_filter_1.default({\n    vData: Buffer.from(filter),\n    nHashFuncs: k,\n    nTweak: tweak,\n});\nconst createScalingBloomFilter = () => new bloem_1.ScalingBloem(0.05, {\n    initial_capacity: 100000,\n    scaling: 4,\n});\nconst compareTransactionAndFees = (val1, val2) => {\n    const a = val1.networkFee.divn(val1.transaction.size);\n    const b = val2.networkFee.divn(val2.transaction.size);\n    if (a.lt(b)) {\n        return -1;\n    }\n    if (b.lt(a)) {\n        return 1;\n    }\n    return val1.transaction.hash.compare(val2.transaction.hash);\n};\nconst MEM_POOL_SIZE = 5000;\nconst GET_ADDR_PEER_COUNT = 200;\nconst GET_BLOCKS_COUNT = 500;\nconst GET_BLOCKS_BUFFER = GET_BLOCKS_COUNT / 3;\nconst GET_BLOCKS_TIME_MS = 10000;\nconst GET_BLOCKS_THROTTLE_MS = 1000;\nconst TRIM_MEMPOOL_THROTTLE = 5000;\nconst GET_BLOCKS_CLOSE_COUNT = 2;\nconst UNHEALTHY_PEER_SECONDS = 300;\nconst LOCAL_HOST_ADDRESSES = new Set(['', '0.0.0.0', 'localhost', '127.0.0.1', '::', '::1']);\nclass Node {\n    constructor({ blockchain, createNetwork, options, }) {\n        this.mutableUnhealthyPeerSeconds = UNHEALTHY_PEER_SECONDS;\n        this.requestBlocks = lodash_1.default.debounce(() => {\n            const peer = this.mutableBestPeer;\n            const previousBlock = this.blockchain.previousBlock;\n            const block = previousBlock === undefined ? this.blockchain.currentBlock : previousBlock;\n            if (peer !== undefined && block.index < peer.data.startHeight) {\n                if (this.mutableGetBlocksRequestsCount > GET_BLOCKS_CLOSE_COUNT) {\n                    this.mutableBestPeer = this.findBestPeer(peer);\n                    this.network.blacklistAndClose(peer);\n                    this.mutableGetBlocksRequestsCount = 0;\n                }\n                else if (this.shouldRequestBlocks()) {\n                    if (this.mutableGetBlocksRequestsIndex === block.index) {\n                        this.mutableGetBlocksRequestsCount += 1;\n                    }\n                    else {\n                        this.mutableGetBlocksRequestsCount = 1;\n                        this.mutableGetBlocksRequestsIndex = block.index;\n                    }\n                    this.mutableGetBlocksRequestTime = Date.now();\n                    this.sendMessage(peer, this.createMessage({\n                        command: Command_1.Command.getblocks,\n                        payload: new payload_1.GetBlocksPayload({\n                            hashStart: [block.hash],\n                        }),\n                    }));\n                }\n                this.requestBlocks();\n            }\n        }, GET_BLOCKS_THROTTLE_MS);\n        this.onRequestEndpoints = lodash_1.default.throttle(() => {\n            this.relay(this.createMessage({ command: Command_1.Command.getaddr }));\n            this.fetchEndpointsFromRPC();\n        }, 5000);\n        this.trimMemPool = lodash_1.default.throttle(async () => {\n            const memPool = Object.values(this.mutableMemPool);\n            if (memPool.length > MEM_POOL_SIZE) {\n                const transactionAndFees = await Promise.all(memPool.map(async (transaction) => {\n                    const networkFee = await transaction.getNetworkFee({\n                        getOutput: this.blockchain.output.get,\n                        governingToken: this.blockchain.settings.governingToken,\n                        utilityToken: this.blockchain.settings.utilityToken,\n                        fees: this.blockchain.settings.fees,\n                        registerValidatorFee: this.blockchain.settings.registerValidatorFee,\n                    });\n                    return { transaction, networkFee };\n                }));\n                const hashesToRemove = lodash_1.default.take(transactionAndFees.slice().sort(compareTransactionAndFees), this.blockchain.settings.memPoolSize).map((transactionAndFee) => transactionAndFee.transaction.hashHex);\n                hashesToRemove.forEach((hash) => {\n                    delete this.mutableMemPool[hash];\n                });\n            }\n        }, TRIM_MEMPOOL_THROTTLE);\n        this.negotiate = async (peer) => {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.version,\n                payload: new payload_1.VersionPayload({\n                    protocolVersion: 0,\n                    services: payload_1.SERVICES.NODE_NETWORK,\n                    timestamp: Math.round(Date.now() / 1000),\n                    port: this.externalPort,\n                    nonce: this.nonce,\n                    userAgent: this.userAgent,\n                    startHeight: this.blockchain.currentBlockIndex,\n                    relay: true,\n                }),\n            }));\n            const message = await peer.receiveMessage(30000);\n            let versionPayload;\n            if (message.value.command === Command_1.Command.version) {\n                versionPayload = message.value.payload;\n            }\n            else {\n                throw new errors_1.NegotiationError(message);\n            }\n            this.checkVersion(peer, message, versionPayload);\n            const { host } = node_core_1.getEndpointConfig(peer.endpoint);\n            let address;\n            if (payload_1.NetworkAddress.isValid(host)) {\n                address = new payload_1.NetworkAddress({\n                    host,\n                    port: versionPayload.port,\n                    timestamp: versionPayload.timestamp,\n                    services: versionPayload.services,\n                });\n            }\n            this.sendMessage(peer, this.createMessage({ command: Command_1.Command.verack }));\n            const nextMessage = await peer.receiveMessage(30000);\n            if (nextMessage.value.command !== Command_1.Command.verack) {\n                throw new errors_1.NegotiationError(nextMessage);\n            }\n            return {\n                data: {\n                    nonce: versionPayload.nonce,\n                    startHeight: versionPayload.startHeight,\n                    mutableBloomFilter: undefined,\n                    address,\n                },\n                relay: versionPayload.relay,\n            };\n        };\n        this.checkPeerHealth = (peer, prevHealth) => {\n            const checkTimeSeconds = utils_1.utils.nowSeconds();\n            const blockIndex = this.mutableBlockIndex[peer.endpoint];\n            if (prevHealth === undefined) {\n                return { healthy: true, checkTimeSeconds, blockIndex };\n            }\n            if (prevHealth.blockIndex !== undefined && blockIndex !== undefined && prevHealth.blockIndex < blockIndex) {\n                return { healthy: true, checkTimeSeconds, blockIndex };\n            }\n            if (prevHealth.blockIndex === blockIndex &&\n                utils_1.utils.nowSeconds() - prevHealth.checkTimeSeconds < this.mutableUnhealthyPeerSeconds) {\n                return {\n                    healthy: true,\n                    checkTimeSeconds: prevHealth.checkTimeSeconds,\n                    blockIndex: prevHealth.blockIndex,\n                };\n            }\n            return { healthy: false, checkTimeSeconds, blockIndex };\n        };\n        this.onEvent = (event) => {\n            if (event.event === 'PEER_CONNECT_SUCCESS') {\n                const { connectedPeer } = event;\n                if (this.mutableBestPeer === undefined ||\n                    this.mutableBestPeer.data.startHeight + 100 < connectedPeer.data.startHeight) {\n                    this.mutableBestPeer = connectedPeer;\n                    this.resetRequestBlocks();\n                    this.requestBlocks();\n                }\n            }\n            else if (event.event === 'PEER_CLOSED' &&\n                this.mutableBestPeer !== undefined &&\n                this.mutableBestPeer.endpoint === event.peer.endpoint) {\n                this.mutableBestPeer = this.findBestPeer();\n                this.resetRequestBlocks();\n                this.requestBlocks();\n            }\n        };\n        this.blockchain = blockchain;\n        this.network = createNetwork({\n            negotiate: this.negotiate,\n            checkPeerHealth: this.checkPeerHealth,\n            createMessageTransform: () => new Message_1.MessageTransform(this.blockchain.deserializeWireContext),\n            onMessageReceived: (peer, message) => {\n                this.onMessageReceived(peer, message);\n            },\n            onRequestEndpoints: this.onRequestEndpoints.bind(this),\n            onEvent: this.onEvent,\n        });\n        this.options = options;\n        const { externalPort = 0 } = options;\n        this.externalPort = externalPort;\n        this.nonce = Math.floor(Math.random() * client_common_1.utils.UINT_MAX_NUMBER);\n        this.userAgent = `NEO:neo-one-js:1.0.0-preview`;\n        this.mutableMemPool = {};\n        this.mutableKnownBlockHashes = createScalingBloomFilter();\n        this.tempKnownBlockHashes = new Set();\n        this.mutableKnownTransactionHashes = createScalingBloomFilter();\n        this.tempKnownTransactionHashes = new Set();\n        this.mutableKnownHeaderHashes = createScalingBloomFilter();\n        this.tempKnownHeaderHashes = new Set();\n        this.mutableGetBlocksRequestsCount = 1;\n        this.consensusCache = new lru_cache_1.default(10000);\n        this.mutableBlockIndex = {};\n    }\n    get consensus() {\n        return this.mutableConsensus;\n    }\n    get connectedPeers() {\n        return this.network.connectedPeers.map((peer) => peer.endpoint);\n    }\n    get memPool() {\n        return this.mutableMemPool;\n    }\n    async reset() {\n        this.mutableMemPool = {};\n        this.mutableKnownBlockHashes = createScalingBloomFilter();\n        this.tempKnownBlockHashes.clear();\n        this.mutableKnownTransactionHashes = createScalingBloomFilter();\n        this.tempKnownTransactionHashes.clear();\n        this.mutableKnownHeaderHashes = createScalingBloomFilter();\n        this.tempKnownHeaderHashes.clear();\n        this.mutableGetBlocksRequestsCount = 1;\n        this.consensusCache.reset();\n        this.mutableBlockIndex = {};\n    }\n    async start() {\n        let disposable = utils_1.noopDisposable;\n        try {\n            this.network.start();\n            logger.debug({ name: 'neo_protocol_start' }, 'Protocol started.');\n            disposable = utils_1.composeDisposables(disposable, () => {\n                this.network.stop();\n                logger.debug({ name: 'neo_protocol_stop' }, 'Protocol stopped.');\n            });\n            if (this.options.consensus !== undefined) {\n                const mutableConsensus = new node_consensus_1.Consensus({\n                    options: this.options.consensus,\n                    node: this,\n                });\n                this.mutableConsensus = mutableConsensus;\n                const consensusDisposable = await mutableConsensus.start();\n                disposable = utils_1.composeDisposables(disposable, consensusDisposable);\n            }\n            this.mutableUnhealthyPeerSeconds =\n                this.options.unhealthyPeerSeconds === undefined ? UNHEALTHY_PEER_SECONDS : this.options.unhealthyPeerSeconds;\n            return disposable;\n        }\n        catch (err) {\n            await disposable();\n            throw err;\n        }\n    }\n    async relayTransaction(transaction, { throwVerifyError = false, forceAdd = false, } = {\n        throwVerifyError: false,\n        forceAdd: false,\n    }) {\n        const result = {};\n        if (transaction.type === node_core_1.TransactionType.Miner ||\n            this.mutableMemPool[transaction.hashHex] !== undefined ||\n            this.tempKnownTransactionHashes.has(transaction.hashHex)) {\n            return result;\n        }\n        if (!this.mutableKnownTransactionHashes.has(transaction.hash)) {\n            this.tempKnownTransactionHashes.add(transaction.hashHex);\n            try {\n                const memPool = Object.values(this.mutableMemPool);\n                if (memPool.length > MEM_POOL_SIZE / 2 && !forceAdd) {\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                    return result;\n                }\n                let logLabels = { [utils_1.Labels.NEO_TRANSACTION_HASH]: transaction.hashHex };\n                let finalResult;\n                try {\n                    let foundTransaction;\n                    try {\n                        foundTransaction = await this.blockchain.transaction.tryGet({\n                            hash: transaction.hash,\n                        });\n                    }\n                    finally {\n                        logLabels = Object.assign({ [utils_1.Labels.NEO_TRANSACTION_FOUND]: foundTransaction !== undefined }, logLabels);\n                    }\n                    let verifyResult;\n                    if (foundTransaction === undefined) {\n                        verifyResult = await this.blockchain.verifyTransaction({\n                            transaction,\n                            memPool: Object.values(this.mutableMemPool),\n                        });\n                        const verified = verifyResult.verifications.every(({ failureMessage }) => failureMessage === undefined);\n                        if (verified) {\n                            this.mutableMemPool[transaction.hashHex] = transaction;\n                            if (this.mutableConsensus !== undefined) {\n                                this.mutableConsensus.onTransactionReceived(transaction);\n                            }\n                            this.relayTransactionInternal(transaction);\n                            await this.trimMemPool();\n                        }\n                    }\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                    finalResult = { verifyResult };\n                    logger.debug(Object.assign({ name: 'neo_relay_transaction' }, logLabels));\n                }\n                catch (err) {\n                    logger.error(Object.assign({ name: 'neo_relay_transaction', err }, logLabels));\n                    throw err;\n                }\n                return finalResult;\n            }\n            catch (error) {\n                if (error.code === undefined ||\n                    typeof error.code !== 'string' ||\n                    !error.code.includes('VERIFY') ||\n                    throwVerifyError) {\n                    throw error;\n                }\n            }\n            finally {\n                this.tempKnownTransactionHashes.delete(transaction.hashHex);\n            }\n        }\n        return result;\n    }\n    async relayStrippedTransaction(verificationTransaction, relayTransaction, { throwVerifyError = false, forceAdd = false, } = {\n        throwVerifyError: false,\n        forceAdd: false,\n    }) {\n        const result = {};\n        if (verificationTransaction.type !== node_core_1.TransactionType.Invocation ||\n            relayTransaction.type !== node_core_1.TransactionType.Invocation) {\n            throw new errors_1.InvalidRelayStrippedTransactionType(verificationTransaction.type);\n        }\n        if (verificationTransaction.inputs.length !== relayTransaction.inputs.length ||\n            verificationTransaction.outputs.length !== relayTransaction.outputs.length ||\n            !lodash_1.default.zip(verificationTransaction.inputs, relayTransaction.inputs).every(([verify, relay]) => verify.equals(relay)) ||\n            !lodash_1.default.zip(verificationTransaction.outputs, relayTransaction.outputs).every(([verify, relay]) => verify.equals(relay)) ||\n            !verificationTransaction.script.equals(relayTransaction.script)) {\n            throw new errors_1.RelayStrippedTransactionMismatch();\n        }\n        if (!this.mutableKnownTransactionHashes.has(relayTransaction.hash)) {\n            this.tempKnownTransactionHashes.add(relayTransaction.hashHex);\n            try {\n                const memPool = Object.values(this.mutableMemPool);\n                if (memPool.length > MEM_POOL_SIZE / 2 && !forceAdd) {\n                    this.mutableKnownTransactionHashes.add(relayTransaction.hash);\n                    return result;\n                }\n                let logLabels = { [utils_1.Labels.NEO_TRANSACTION_HASH]: relayTransaction.hashHex };\n                let finalResult;\n                try {\n                    let foundTransaction;\n                    try {\n                        foundTransaction = await this.blockchain.transaction.tryGet({\n                            hash: relayTransaction.hash,\n                        });\n                    }\n                    finally {\n                        logLabels = Object.assign({ [utils_1.Labels.NEO_TRANSACTION_FOUND]: foundTransaction !== undefined }, logLabels);\n                    }\n                    let verifyResult;\n                    if (foundTransaction === undefined) {\n                        verifyResult = await this.blockchain.verifyTransaction({\n                            transaction: verificationTransaction,\n                            memPool: Object.values(this.mutableMemPool),\n                        });\n                        const verified = verifyResult.verifications.every(({ failureMessage }) => failureMessage === undefined);\n                        if (verified) {\n                            this.mutableMemPool[relayTransaction.hashHex] = relayTransaction;\n                            if (this.mutableConsensus !== undefined) {\n                                this.mutableConsensus.onTransactionReceived(relayTransaction);\n                            }\n                            this.relayTransactionInternal(relayTransaction);\n                            await this.trimMemPool();\n                        }\n                    }\n                    this.mutableKnownTransactionHashes.add(relayTransaction.hash);\n                    finalResult = { verifyResult };\n                    logger.debug(Object.assign({ name: 'neo_relay_transaction' }, logLabels));\n                }\n                catch (err) {\n                    logger.error(Object.assign({ name: 'neo_relay_transaction', err }, logLabels));\n                    throw err;\n                }\n                return finalResult;\n            }\n            catch (error) {\n                if (error.code === undefined ||\n                    typeof error.code !== 'string' ||\n                    !error.code.includes('VERIFY') ||\n                    throwVerifyError) {\n                    throw error;\n                }\n            }\n            finally {\n                this.tempKnownTransactionHashes.delete(relayTransaction.hashHex);\n            }\n        }\n        return result;\n    }\n    async relayBlock(block) {\n        await this.persistBlock(block);\n    }\n    relayConsensusPayload(payload) {\n        const message = this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Consensus,\n                hashes: [payload.hash],\n            }),\n        });\n        this.consensusCache.set(payload.hashHex, payload);\n        this.relay(message);\n    }\n    syncMemPool() {\n        this.relay(this.createMessage({ command: Command_1.Command.mempool }));\n    }\n    relay(message) {\n        this.network.relay(message.serializeWire());\n    }\n    relayTransactionInternal(transaction) {\n        const message = this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Transaction,\n                hashes: [transaction.hash],\n            }),\n        });\n        const messagePayload = message.serializeWire();\n        this.network.connectedPeers.forEach((peer) => {\n            if (peer.relay && this.testFilter(peer.data.mutableBloomFilter, transaction)) {\n                peer.write(messagePayload);\n            }\n        });\n    }\n    sendMessage(peer, message) {\n        peer.write(message.serializeWire());\n    }\n    findBestPeer(bestPeer) {\n        let peers = this.network.connectedPeers;\n        if (bestPeer !== undefined) {\n            peers = peers.filter((peer) => peer.endpoint !== bestPeer.endpoint);\n        }\n        const result = lodash_1.default.maxBy(peers, (peer) => peer.data.startHeight);\n        if (result === undefined) {\n            return undefined;\n        }\n        return lodash_1.default.shuffle(peers.filter((peer) => peer.data.startHeight === result.data.startHeight))[0];\n    }\n    resetRequestBlocks() {\n        this.mutableGetBlocksRequestsIndex = undefined;\n        this.mutableGetBlocksRequestsCount = 0;\n    }\n    shouldRequestBlocks() {\n        const block = this.blockchain.currentBlock;\n        const getBlocksRequestTime = this.mutableGetBlocksRequestTime;\n        return (this.mutableGetBlocksRequestsIndex === undefined ||\n            block.index - this.mutableGetBlocksRequestsIndex > GET_BLOCKS_BUFFER ||\n            getBlocksRequestTime === undefined ||\n            Date.now() - getBlocksRequestTime > GET_BLOCKS_TIME_MS);\n    }\n    checkVersion(peer, message, version) {\n        if (version.nonce === this.nonce) {\n            this.network.permanentlyBlacklist(peer.endpoint);\n            throw new errors_1.NegotiationError(message, 'Nonce equals my nonce.');\n        }\n        const connectedPeer = this.network.connectedPeers.find((otherPeer) => version.nonce === otherPeer.data.nonce);\n        if (connectedPeer !== undefined) {\n            throw new errors_1.AlreadyConnectedError('Already connected to nonce.');\n        }\n    }\n    ready() {\n        const peer = this.mutableBestPeer;\n        const block = this.blockchain.currentBlock;\n        return peer !== undefined && block.index >= peer.data.startHeight;\n    }\n    async fetchEndpointsFromRPC() {\n        try {\n            await this.doFetchEndpointsFromRPC();\n        }\n        catch (_a) {\n        }\n    }\n    async doFetchEndpointsFromRPC() {\n        const { rpcURLs = [] } = this.options;\n        await Promise.all(rpcURLs.map(async (rpcURL) => this.fetchEndpointsFromRPCURL(rpcURL)));\n    }\n    async fetchEndpointsFromRPCURL(rpcURL) {\n        try {\n            const response = await cross_fetch_1.default(rpcURL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    jsonrpc: '2.0',\n                    id: 1,\n                    method: 'getpeers',\n                    params: [],\n                }),\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch peers from ${rpcURL}: ${response.status} ${response.statusText}`);\n            }\n            const result = await response.json();\n            if (typeof result === 'object' &&\n                result.error !== undefined &&\n                typeof result.error === 'object' &&\n                typeof result.error.code === 'number' &&\n                typeof result.error.message === 'string') {\n                throw new Error(result.error);\n            }\n            const connected = result.result.connected;\n            connected\n                .map((peer) => {\n                const { address, port } = peer;\n                let canonicalForm = new ip_address_1.Address6(address).canonicalForm();\n                if (canonicalForm == undefined) {\n                    canonicalForm = ip_address_1.Address6.fromAddress4(address).canonicalForm();\n                }\n                return { host: canonicalForm == undefined ? '' : canonicalForm, port };\n            })\n                .filter((endpoint) => !LOCAL_HOST_ADDRESSES.has(endpoint.host))\n                .map((endpoint) => node_core_1.createEndpoint({\n                type: 'tcp',\n                host: endpoint.host,\n                port: endpoint.port,\n            }))\n                .forEach((endpoint) => this.network.addEndpoint(endpoint));\n        }\n        catch (err) {\n            logger.error({ name: 'neo_protocol_fetch_endpoints_error', [utils_1.Labels.HTTP_URL]: rpcURL, err }, `Failed to fetch endpoints from ${rpcURL}`);\n        }\n    }\n    onMessageReceived(peer, message) {\n        try {\n            new Promise(async (resolve) => {\n                switch (message.value.command) {\n                    case Command_1.Command.addr:\n                        this.onAddrMessageReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.block:\n                        await this.onBlockMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.consensus:\n                        await this.onConsensusMessageReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.filteradd:\n                        this.onFilterAddMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.filterclear:\n                        this.onFilterClearMessageReceived(peer);\n                        break;\n                    case Command_1.Command.filterload:\n                        this.onFilterLoadMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getaddr:\n                        this.onGetAddrMessageReceived(peer);\n                        break;\n                    case Command_1.Command.getblocks:\n                        await this.onGetBlocksMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getdata:\n                        await this.onGetDataMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getheaders:\n                        await this.onGetHeadersMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.headers:\n                        await this.onHeadersMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.inv:\n                        this.onInvMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.mempool:\n                        this.onMemPoolMessageReceived(peer);\n                        break;\n                    case Command_1.Command.tx:\n                        await this.onTransactionReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.verack:\n                        this.onVerackMessageReceived(peer);\n                        break;\n                    case Command_1.Command.version:\n                        this.onVersionMessageReceived(peer);\n                        break;\n                    case Command_1.Command.alert:\n                        break;\n                    case Command_1.Command.merkleblock:\n                        break;\n                    case Command_1.Command.notfound:\n                        break;\n                    case Command_1.Command.ping:\n                        break;\n                    case Command_1.Command.pong:\n                        break;\n                    case Command_1.Command.reject:\n                        break;\n                    default:\n                        utils_1.utils.assertNever(message.value);\n                }\n                resolve();\n            }).catch(() => {\n            });\n        }\n        catch (_a) {\n        }\n    }\n    onAddrMessageReceived(addr) {\n        addr.addresses\n            .filter((address) => !LOCAL_HOST_ADDRESSES.has(address.host))\n            .map((address) => node_core_1.createEndpoint({\n            type: 'tcp',\n            host: address.host,\n            port: address.port,\n        }))\n            .forEach((endpoint) => this.network.addEndpoint(endpoint));\n    }\n    async onBlockMessageReceived(peer, block) {\n        const blockIndex = this.mutableBlockIndex[peer.endpoint];\n        this.mutableBlockIndex[peer.endpoint] = Math.max(block.index, blockIndex === undefined ? 0 : blockIndex);\n        await this.relayBlock(block);\n    }\n    async persistBlock(block) {\n        if (this.blockchain.currentBlockIndex > block.index || this.tempKnownBlockHashes.has(block.hashHex)) {\n            return;\n        }\n        if (!this.mutableKnownBlockHashes.has(block.hash)) {\n            this.tempKnownBlockHashes.add(block.hashHex);\n            try {\n                const foundBlock = await this.blockchain.block.tryGet({\n                    hashOrIndex: block.hash,\n                });\n                if (foundBlock === undefined) {\n                    try {\n                        await this.blockchain.persistBlock({ block });\n                        if (this.mutableConsensus !== undefined) {\n                            this.mutableConsensus.onPersistBlock();\n                        }\n                        const peer = this.mutableBestPeer;\n                        if (peer !== undefined && block.index > peer.data.startHeight) {\n                            this.relay(this.createMessage({\n                                command: Command_1.Command.inv,\n                                payload: new payload_1.InvPayload({\n                                    type: payload_1.InventoryType.Block,\n                                    hashes: [block.hash],\n                                }),\n                            }));\n                        }\n                        logger.info({ name: 'neo_relay_block', [utils_1.Labels.NEO_BLOCK_INDEX]: block.index });\n                    }\n                    catch (err) {\n                        logger.error({ name: 'neo_relay_block', [utils_1.Labels.NEO_BLOCK_INDEX]: block.index, err });\n                        throw err;\n                    }\n                }\n                this.mutableKnownBlockHashes.add(block.hash);\n                this.mutableKnownHeaderHashes.add(block.hash);\n                block.transactions.forEach((transaction) => {\n                    delete this.mutableMemPool[transaction.hashHex];\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                });\n            }\n            finally {\n                this.tempKnownBlockHashes.delete(block.hashHex);\n            }\n        }\n    }\n    async onConsensusMessageReceived(payload) {\n        const { consensus } = this;\n        if (consensus !== undefined) {\n            await this.blockchain.verifyConsensusPayload(payload);\n            consensus.onConsensusPayloadReceived(payload);\n        }\n    }\n    onFilterAddMessageReceived(peer, filterAdd) {\n        if (peer.data.mutableBloomFilter !== undefined) {\n            peer.data.mutableBloomFilter.insert(filterAdd.data);\n        }\n    }\n    onFilterClearMessageReceived(peer) {\n        peer.data.mutableBloomFilter = undefined;\n    }\n    onFilterLoadMessageReceived(peer, filterLoad) {\n        peer.data.mutableBloomFilter = createPeerBloomFilter(filterLoad);\n    }\n    onGetAddrMessageReceived(peer) {\n        const addresses = lodash_1.default.take(lodash_1.default.shuffle(this.network.connectedPeers.map((connectedPeer) => connectedPeer.data.address).filter(utils_1.utils.notNull)), GET_ADDR_PEER_COUNT);\n        if (addresses.length > 0) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.addr,\n                payload: new payload_1.AddrPayload({ addresses }),\n            }));\n        }\n    }\n    async onGetBlocksMessageReceived(peer, getBlocks) {\n        const headers = await this.getHeaders(getBlocks, this.blockchain.currentBlockIndex);\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Block,\n                hashes: headers.map((header) => header.hash),\n            }),\n        }));\n    }\n    async onGetDataMessageReceived(peer, getData) {\n        switch (getData.type) {\n            case payload_1.InventoryType.Transaction:\n                await Promise.all(getData.hashes.map(async (hash) => {\n                    let transaction = this.mutableMemPool[client_common_1.common.uInt256ToHex(hash)];\n                    if (transaction === undefined) {\n                        transaction = await this.blockchain.transaction.tryGet({ hash });\n                    }\n                    if (transaction !== undefined) {\n                        this.sendMessage(peer, this.createMessage({\n                            command: Command_1.Command.tx,\n                            payload: transaction,\n                        }));\n                    }\n                }));\n                break;\n            case payload_1.InventoryType.Block:\n                await Promise.all(getData.hashes.map(async (hash) => {\n                    const block = await this.blockchain.block.tryGet({\n                        hashOrIndex: hash,\n                    });\n                    if (block !== undefined) {\n                        if (peer.data.mutableBloomFilter === undefined) {\n                            this.sendMessage(peer, this.createMessage({\n                                command: Command_1.Command.block,\n                                payload: block,\n                            }));\n                        }\n                        else {\n                            this.sendMessage(peer, this.createMessage({\n                                command: Command_1.Command.merkleblock,\n                                payload: this.createMerkleBlockPayload({\n                                    block,\n                                    flags: block.transactions.map((transaction) => this.testFilter(peer.data.mutableBloomFilter, transaction)),\n                                }),\n                            }));\n                        }\n                    }\n                }));\n                break;\n            case payload_1.InventoryType.Consensus:\n                getData.hashes.forEach((hash) => {\n                    const payload = this.consensusCache.get(client_common_1.common.uInt256ToHex(hash));\n                    if (payload !== undefined) {\n                        this.sendMessage(peer, this.createMessage({\n                            command: Command_1.Command.consensus,\n                            payload,\n                        }));\n                    }\n                });\n                break;\n            default:\n                utils_1.utils.assertNever(getData.type);\n        }\n    }\n    async onGetHeadersMessageReceived(peer, getBlocks) {\n        const headers = await this.getHeaders(getBlocks, this.blockchain.currentHeader.index);\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.headers,\n            payload: new payload_1.HeadersPayload({ headers }),\n        }));\n    }\n    async onHeadersMessageReceived(peer, headersPayload) {\n        const headers = headersPayload.headers.filter((header) => !this.mutableKnownHeaderHashes.has(header.hash) && !this.tempKnownHeaderHashes.has(header.hashHex));\n        if (headers.length > 0) {\n            headers.forEach((header) => {\n                this.tempKnownHeaderHashes.add(header.hashHex);\n            });\n            try {\n                await this.blockchain.persistHeaders(headers);\n                headers.forEach((header) => {\n                    this.mutableKnownHeaderHashes.add(header.hash);\n                });\n            }\n            finally {\n                headers.forEach((header) => {\n                    this.tempKnownHeaderHashes.delete(header.hashHex);\n                });\n            }\n        }\n        if (this.blockchain.currentHeader.index < peer.data.startHeight) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.getheaders,\n                payload: new payload_1.GetBlocksPayload({\n                    hashStart: [this.blockchain.currentHeader.hash],\n                }),\n            }));\n        }\n    }\n    onInvMessageReceived(peer, inv) {\n        let hashes;\n        switch (inv.type) {\n            case payload_1.InventoryType.Transaction:\n                hashes = inv.hashes.filter((hash) => !this.mutableKnownTransactionHashes.has(hash) &&\n                    !this.tempKnownTransactionHashes.has(client_common_1.common.uInt256ToHex(hash)));\n                break;\n            case payload_1.InventoryType.Block:\n                hashes = inv.hashes.filter((hash) => !this.mutableKnownBlockHashes.has(hash) && !this.tempKnownBlockHashes.has(client_common_1.common.uInt256ToHex(hash)));\n                break;\n            case payload_1.InventoryType.Consensus:\n                hashes = inv.hashes;\n                break;\n            default:\n                utils_1.utils.assertNever(inv.type);\n                hashes = [];\n        }\n        if (hashes.length > 0) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.getdata,\n                payload: new payload_1.InvPayload({ type: inv.type, hashes }),\n            }));\n        }\n    }\n    onMemPoolMessageReceived(peer) {\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Transaction,\n                hashes: Object.values(this.mutableMemPool).map((transaction) => transaction.hash),\n            }),\n        }));\n    }\n    async onTransactionReceived(transaction) {\n        if (this.ready()) {\n            if (transaction.type === node_core_1.TransactionType.Miner) {\n                if (this.mutableConsensus !== undefined) {\n                    this.mutableConsensus.onTransactionReceived(transaction);\n                }\n            }\n            else {\n                await this.relayTransaction(transaction);\n            }\n        }\n    }\n    onVerackMessageReceived(peer) {\n        peer.close();\n    }\n    onVersionMessageReceived(peer) {\n        peer.close();\n    }\n    async getHeaders(getBlocks, maxHeight) {\n        let hashStopIndexPromise = Promise.resolve(maxHeight);\n        if (!getBlocks.hashStop.equals(client_common_1.common.ZERO_UINT256)) {\n            hashStopIndexPromise = this.blockchain.header\n                .tryGet({ hashOrIndex: getBlocks.hashStop })\n                .then((hashStopHeader) => hashStopHeader === undefined ? maxHeight : Math.min(hashStopHeader.index, maxHeight));\n        }\n        const [hashStartHeaders, hashEnd] = await Promise.all([\n            Promise.all(getBlocks.hashStart.map(async (hash) => this.blockchain.header.tryGet({ hashOrIndex: hash }))),\n            hashStopIndexPromise,\n        ]);\n        const hashStartHeader = lodash_1.default.head(lodash_1.default.orderBy(hashStartHeaders.filter(utils_1.utils.notNull), [(header) => header.index]));\n        if (hashStartHeader === undefined) {\n            return [];\n        }\n        const hashStart = hashStartHeader.index + 1;\n        if (hashStart > maxHeight) {\n            return [];\n        }\n        return Promise.all(lodash_1.default.range(hashStart, Math.min(hashStart + GET_BLOCKS_COUNT, hashEnd)).map(async (index) => this.blockchain.header.get({ hashOrIndex: index })));\n    }\n    testFilter(bloomFilterIn, transaction) {\n        const bloomFilter = bloomFilterIn;\n        if (bloomFilter === undefined) {\n            return true;\n        }\n        return (bloomFilter.contains(transaction.hash) ||\n            transaction.outputs.some((output) => bloomFilter.contains(output.address)) ||\n            transaction.inputs.some((input) => bloomFilter.contains(input.serializeWire())) ||\n            transaction.scripts.some((script) => bloomFilter.contains(client_common_1.crypto.toScriptHash(script.verification))) ||\n            (transaction.type === node_core_1.TransactionType.Register &&\n                transaction instanceof node_core_1.RegisterTransaction &&\n                bloomFilter.contains(transaction.asset.admin)));\n    }\n    createMerkleBlockPayload({ block, flags, }) {\n        const tree = new node_core_1.MerkleTree(block.transactions.map((transaction) => transaction.hash)).trim(flags);\n        const mutableBuffer = Buffer.allocUnsafe(Math.floor((flags.length + 7) / 8));\n        for (let i = 0; i < flags.length; i += 1) {\n            if (flags[i]) {\n                mutableBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n            }\n        }\n        return new payload_1.MerkleBlockPayload({\n            version: block.version,\n            previousHash: block.previousHash,\n            merkleRoot: block.merkleRoot,\n            timestamp: block.timestamp,\n            index: block.index,\n            consensusData: block.consensusData,\n            nextConsensus: block.nextConsensus,\n            script: block.script,\n            transactionCount: block.transactions.length,\n            hashes: tree.toHashArray(),\n            flags: mutableBuffer,\n        });\n    }\n    createMessage(value) {\n        return new Message_1.Message({\n            magic: this.blockchain.settings.messageMagic,\n            value,\n        });\n    }\n}\nexports.Node = Node;\n\n//# sourceMappingURL=Node.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Consensus_1 = require(\"./Consensus\");\nObject.defineProperty(exports, \"Consensus\", { enumerable: true, get: function () { return Consensus_1.Consensus; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Consensus = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst asynciterablex_1 = require(\"@reactivex/ix-es2015-cjs/asynciterable/asynciterablex\");\nconst scan_1 = require(\"@reactivex/ix-es2015-cjs/asynciterable/pipe/scan\");\nconst common_1 = require(\"./common\");\nconst ConsensusContext_1 = require(\"./ConsensusContext\");\nconst ConsensusQueue_1 = require(\"./ConsensusQueue\");\nconst handleConsensusPayload_1 = require(\"./handleConsensusPayload\");\nconst handlePersistBlock_1 = require(\"./handlePersistBlock\");\nconst handleTransactionReceived_1 = require(\"./handleTransactionReceived\");\nconst runConsensus_1 = require(\"./runConsensus\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'consensus' });\nconst MS_IN_SECOND = 1000;\nclass Consensus {\n    constructor({ options, node }) {\n        this.mutableQueue = new ConsensusQueue_1.ConsensusQueue();\n        const privateKey = client_common_1.common.stringToPrivateKey(options.privateKey);\n        const publicKey = client_common_1.crypto.privateKeyToPublicKey(privateKey);\n        const feeAddress = client_common_1.crypto.publicKeyToScriptHash(publicKey);\n        this.options = {\n            privateKey,\n            publicKey,\n            feeAddress,\n            privateNet: options.privateNet,\n        };\n        this.node = node;\n        this.mutableConsensusContext = new ConsensusContext_1.ConsensusContext();\n    }\n    async start() {\n        let disposable = utils_1.noopDisposable;\n        try {\n            await this.pause();\n            this.doStart(this.options);\n            disposable = utils_1.composeDisposables(disposable, async () => {\n                await this.pause();\n            });\n            return disposable;\n        }\n        catch (err) {\n            await disposable();\n            throw err;\n        }\n    }\n    onPersistBlock() {\n        this.mutableQueue.write({ type: 'handlePersistBlock' });\n    }\n    onConsensusPayloadReceived(payload) {\n        this.mutableQueue.write({\n            type: 'handleConsensusPayload',\n            payload,\n        });\n    }\n    onTransactionReceived(transaction) {\n        this.mutableQueue.write({\n            type: 'handleTransactionReceived',\n            transaction,\n        });\n    }\n    async runConsensusNow() {\n        if (this.options.privateNet) {\n            await new Promise((resolve, reject) => {\n                this.mutableQueue.write({ type: 'timer', promise: { resolve, reject } });\n            });\n        }\n        else {\n            throw new Error('Can only force consensus on a private network.');\n        }\n    }\n    nowSeconds() {\n        return this.mutableConsensusContext.nowSeconds();\n    }\n    async fastForwardOffset(seconds) {\n        if (this.options.privateNet) {\n            this.mutableConsensusContext.fastForwardOffset(seconds);\n        }\n        else {\n            throw new Error('Can only fast forward on a private network.');\n        }\n    }\n    async fastForwardToTime(seconds) {\n        if (this.options.privateNet) {\n            this.mutableConsensusContext.fastForwardToTime(seconds);\n        }\n        else {\n            throw new Error('Can only fast forward on a private network.');\n        }\n    }\n    async pause() {\n        this.clearTimer();\n        this.mutableQueue.done();\n        this.mutableQueue = new ConsensusQueue_1.ConsensusQueue();\n        if (this.mutableStartPromise !== undefined) {\n            await this.mutableStartPromise;\n        }\n    }\n    async reset() {\n        this.mutableConsensusContext = new ConsensusContext_1.ConsensusContext();\n    }\n    async resume() {\n        this.doStart(this.options);\n    }\n    doStart(options) {\n        let completed = false;\n        const mutableStartPromise = this.startInternal(options).then(() => {\n            completed = true;\n            this.mutableStartPromise = undefined;\n        });\n        if (!completed) {\n            this.mutableStartPromise = mutableStartPromise;\n        }\n    }\n    async startInternal(options) {\n        logger.info({ name: 'neo_consensus_start' }, 'Consensus started.');\n        const initialResult = await common_1.initializeNewConsensus({\n            blockchain: this.node.blockchain,\n            publicKey: options.publicKey,\n            consensusContext: this.mutableConsensusContext,\n        });\n        await asynciterablex_1.AsyncIterableX.from(this.mutableQueue)\n            .pipe(scan_1.scan(async (context, event) => {\n            let result;\n            switch (event.type) {\n                case 'handlePersistBlock':\n                    result = await handlePersistBlock_1.handlePersistBlock({\n                        blockchain: this.node.blockchain,\n                        publicKey: options.publicKey,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'handleConsensusPayload':\n                    result = await handleConsensusPayload_1.handleConsensusPayload({\n                        context,\n                        node: this.node,\n                        privateKey: options.privateKey,\n                        payload: event.payload,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'handleTransactionReceived':\n                    result = await handleTransactionReceived_1.handleTransactionReceived({\n                        context,\n                        node: this.node,\n                        privateKey: options.privateKey,\n                        transaction: event.transaction,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'timer':\n                    result = await runConsensus_1.runConsensus({\n                        context,\n                        node: this.node,\n                        options,\n                        consensusContext: this.mutableConsensusContext,\n                    }).catch((err) => {\n                        if (event.promise !== undefined) {\n                            event.promise.reject(err);\n                        }\n                        throw err;\n                    });\n                    if (event.promise !== undefined) {\n                        event.promise.resolve();\n                    }\n                    break;\n                default:\n                    utils_1.utils.assertNever(event);\n                    throw new Error('For TS');\n            }\n            return this.handleResult(result);\n        }, this.handleResult(initialResult)))\n            .forEach(() => {\n        });\n        logger.info({ name: 'neo_consensus_stop' }, 'Consensus stopped.');\n    }\n    handleResult(result) {\n        if (result.timerSeconds !== undefined) {\n            this.handleTimer(result.timerSeconds);\n        }\n        return result.context;\n    }\n    handleTimer(mutableTimerSeconds) {\n        this.clearTimer();\n        this.mutableTimer = setTimeout(() => this.mutableQueue.write({ type: 'timer' }), mutableTimerSeconds * MS_IN_SECOND);\n    }\n    clearTimer() {\n        if (this.mutableTimer !== undefined) {\n            clearTimeout(this.mutableTimer);\n            this.mutableTimer = undefined;\n        }\n    }\n}\nexports.Consensus = Consensus;\n\n//# sourceMappingURL=Consensus.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestReceivedContext = void 0;\nconst HeaderContext_1 = require(\"./HeaderContext\");\nconst SignatureSentContext_1 = require(\"./SignatureSentContext\");\nconst ViewChangingContext_1 = require(\"./ViewChangingContext\");\nclass RequestReceivedContext extends HeaderContext_1.HeaderContext {\n    constructor({ viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        super({\n            type: 'backup',\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n            transactions,\n            signatures,\n            header,\n        });\n    }\n    clone({ transactions }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n            signatures: this.signatures,\n        });\n    }\n    cloneViewChanging({ expectedView }) {\n        return new ViewChangingContext_1.ViewChangingContext({\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n    cloneSignatureSent({ signatures, }) {\n        return new SignatureSentContext_1.SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n            signatures,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.RequestReceivedContext = RequestReceivedContext;\n\n//# sourceMappingURL=RequestReceivedContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=types.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneBlockSent = void 0;\nconst BlockSentContext_1 = require(\"./BlockSentContext\");\nfunction cloneBlockSent(context) {\n    return new BlockSentContext_1.BlockSentContext({\n        type: context.type,\n        previousHash: context.previousHash,\n        blockIndex: context.blockIndex,\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n    });\n}\nexports.cloneBlockSent = cloneBlockSent;\n\n//# sourceMappingURL=cloneBlockSent.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneInitial = void 0;\nconst InitialContext_1 = require(\"./InitialContext\");\nfunction cloneInitial(context, { type, previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n    return new InitialContext_1.InitialContext({\n        type,\n        previousHash: previousHash === undefined ? context.previousHash : previousHash,\n        blockIndex: blockIndex === undefined ? context.blockIndex : blockIndex,\n        viewNumber,\n        myIndex: myIndex === undefined ? context.myIndex : myIndex,\n        primaryIndex,\n        expectedView: expectedView === undefined ? context.expectedView : expectedView,\n        validators: validators === undefined ? context.validators : validators,\n        blockReceivedTimeSeconds: blockReceivedTimeSeconds === undefined ? context.blockReceivedTimeSeconds : blockReceivedTimeSeconds,\n    });\n}\nexports.cloneInitial = cloneInitial;\n\n//# sourceMappingURL=cloneInitial.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsensusContext = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nclass ConsensusContext {\n    constructor() {\n        this.mutableFastForwardSeconds = 0;\n    }\n    nowSeconds() {\n        return utils_1.utils.nowSeconds() + this.mutableFastForwardSeconds;\n    }\n    fastForwardOffset(seconds) {\n        if (seconds >= 0) {\n            this.mutableFastForwardSeconds += seconds;\n        }\n        else {\n            throw new Error('Can only fast forward to future time.');\n        }\n    }\n    fastForwardToTime(seconds) {\n        this.fastForwardOffset(seconds - this.nowSeconds());\n    }\n}\nexports.ConsensusContext = ConsensusContext;\n\n//# sourceMappingURL=ConsensusContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsensusQueue = void 0;\nclass ConsensusQueue {\n    constructor() {\n        this.mutableItems = [];\n        this.mutableResolvers = [];\n        this.mutableDoneInternal = false;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async next() {\n        const item = this.mutableItems.shift();\n        if (item !== undefined) {\n            if (item.type === 'error') {\n                return Promise.reject(item.error);\n            }\n            return Promise.resolve({ done: false, value: item.value });\n        }\n        if (this.mutableDoneInternal) {\n            return Promise.resolve({ done: true });\n        }\n        return new Promise((resolve, reject) => {\n            this.mutableResolvers.push({ resolve, reject });\n        });\n    }\n    write(value) {\n        let pushTimer = false;\n        if (value.type === 'handlePersistBlock') {\n            pushTimer = this.mutableItems.some((item) => item.type === 'value' && item.value.type === 'timer');\n            this.clear();\n        }\n        this.push({ type: 'value', value });\n        if (pushTimer) {\n            this.push({ type: 'value', value: { type: 'timer' } });\n        }\n    }\n    error(error) {\n        this.push({ type: 'error', error });\n    }\n    clear() {\n        this.mutableItems = [];\n    }\n    done() {\n        this.clear();\n        this.mutableResolvers.forEach(({ resolve }) => resolve({ done: true }));\n        this.mutableResolvers = [];\n        this.mutableDoneInternal = true;\n    }\n    push(item) {\n        if (this.mutableDoneInternal) {\n            throw new Error('ConsensusQueue already ended');\n        }\n        const resolver = this.mutableResolvers.shift();\n        if (resolver !== undefined) {\n            const { resolve, reject } = resolver;\n            if (item.type === 'error') {\n                reject(item.error);\n            }\n            else {\n                resolve({ done: false, value: item.value });\n            }\n        }\n        else {\n            this.mutableItems.push(item);\n        }\n    }\n}\nexports.ConsensusQueue = ConsensusQueue;\n\n//# sourceMappingURL=ConsensusQueue.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleConsensusPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nconst handleChangeView = ({ context: contextIn, node, payload, consensusContext, message, }) => {\n    let context = contextIn;\n    const viewNumber = message.newViewNumber;\n    if (viewNumber > context.expectedView[payload.validatorIndex]) {\n        const mutableExpectedView = [...context.expectedView];\n        mutableExpectedView[payload.validatorIndex] = viewNumber;\n        context = context.cloneExpectedView({ expectedView: mutableExpectedView });\n        if (common_1.checkExpectedView({ context, viewNumber })) {\n            return common_1.initializeConsensus({\n                node,\n                context,\n                viewNumber,\n                consensusContext,\n            });\n        }\n    }\n    return { context };\n};\nconst TEN_MINUTES_IN_SECONDS = 10 * 60;\nconst handlePrepareRequest = async ({ context: contextIn, node, privateKey, payload, consensusContext, message, }) => {\n    let context = contextIn;\n    if (context.type !== 'backup' ||\n        context instanceof context_1.RequestReceivedContext ||\n        payload.validatorIndex !== context.primaryIndex ||\n        payload.timestamp > consensusContext.nowSeconds() + TEN_MINUTES_IN_SECONDS) {\n        return { context };\n    }\n    const header = await node.blockchain.header.get({\n        hashOrIndex: context.previousHash,\n    });\n    if (payload.timestamp <= header.timestamp) {\n        return { context };\n    }\n    const mutableSignatures = [];\n    mutableSignatures[payload.validatorIndex] = message.signature;\n    const newContext = new context_1.RequestReceivedContext({\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n        transactions: {},\n        signatures: mutableSignatures,\n        header: {\n            type: 'new',\n            previousHash: context.previousHash,\n            transactionHashes: message.transactionHashes.map((hash) => client_common_1.common.uInt256ToHex(hash)),\n            blockIndex: context.blockIndex,\n            nonce: message.nonce,\n            timestamp: payload.timestamp,\n            nextConsensus: message.nextConsensus,\n        },\n    });\n    const verified = client_common_1.crypto.verify({\n        message: newContext.header.message,\n        signature: message.signature,\n        publicKey: context.validators[payload.validatorIndex],\n    });\n    if (!verified) {\n        return { context };\n    }\n    let nextContext = newContext;\n    for (const hash of newContext.transactionHashes.slice(1)) {\n        const transaction = node.memPool[hash];\n        if (transaction !== undefined) {\n            const res = await common_1.addTransaction({\n                context: nextContext,\n                node,\n                privateKey,\n                transaction,\n                verify: false,\n                consensusContext,\n            });\n            if (!(res.context instanceof context_1.RequestReceivedContext)) {\n                return res;\n            }\n            nextContext = res.context;\n        }\n    }\n    const result = await common_1.addTransaction({\n        context: nextContext,\n        node,\n        privateKey,\n        transaction: message.minerTransaction,\n        verify: true,\n        consensusContext,\n    });\n    if (!(result.context instanceof context_1.RequestReceivedContext)) {\n        return result;\n    }\n    context = result.context;\n    node.syncMemPool();\n    return { context };\n};\nconst handlePrepareResponse = async ({ context, node, payload, message, }) => {\n    if (context instanceof context_1.HeaderContext &&\n        context.signatures[payload.validatorIndex] === undefined &&\n        client_common_1.crypto.verify({\n            message: context.header.message,\n            signature: message.signature,\n            publicKey: context.validators[payload.validatorIndex],\n        })) {\n        const mutableSignatures = [...context.signatures];\n        mutableSignatures[payload.validatorIndex] = message.signature;\n        const newContext = context.cloneSignatures({ signatures: mutableSignatures });\n        return common_1.checkSignatures({ context: newContext, node });\n    }\n    return { context };\n};\nexports.handleConsensusPayload = async ({ context, node, privateKey, payload, consensusContext, }) => {\n    const { consensusMessage } = payload;\n    if (payload.validatorIndex === context.myIndex ||\n        payload.version !== context.version ||\n        !client_common_1.common.uInt256Equal(payload.previousHash, context.previousHash) ||\n        payload.blockIndex !== context.blockIndex ||\n        payload.validatorIndex >= context.validators.length ||\n        (consensusMessage.type !== node_core_1.ConsensusMessageType.ChangeView && consensusMessage.viewNumber !== context.viewNumber)) {\n        return { context };\n    }\n    switch (consensusMessage.type) {\n        case node_core_1.ConsensusMessageType.ChangeView:\n            return handleChangeView({\n                context,\n                node,\n                payload,\n                consensusContext,\n                message: consensusMessage,\n            });\n        case node_core_1.ConsensusMessageType.PrepareRequest:\n            return handlePrepareRequest({\n                context,\n                node,\n                privateKey,\n                payload,\n                consensusContext,\n                message: consensusMessage,\n            });\n        case node_core_1.ConsensusMessageType.PrepareResponse:\n            return handlePrepareResponse({\n                context,\n                node,\n                payload,\n                message: consensusMessage,\n            });\n        default:\n            utils_1.utils.assertNever(consensusMessage);\n            throw new Error('For TS');\n    }\n};\n\n//# sourceMappingURL=handleConsensusPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handlePersistBlock = void 0;\nconst common_1 = require(\"./common\");\nexports.handlePersistBlock = async ({ blockchain, publicKey, consensusContext, }) => common_1.initializeNewConsensus({\n    blockchain,\n    publicKey,\n    consensusContext,\n});\n\n//# sourceMappingURL=handlePersistBlock.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleTransactionReceived = void 0;\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nexports.handleTransactionReceived = async ({ context, node, privateKey, transaction, consensusContext, }) => {\n    if (!(context instanceof context_1.RequestReceivedContext) ||\n        context.transactions[transaction.hashHex] !== undefined ||\n        !context.transactionHashesSet.has(transaction.hashHex)) {\n        return { context };\n    }\n    return common_1.addTransaction({\n        context,\n        node,\n        privateKey,\n        transaction,\n        verify: true,\n        consensusContext,\n    });\n};\n\n//# sourceMappingURL=handleTransactionReceived.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runConsensus = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bignumber_js_1 = tslib_1.__importDefault(require(\"bignumber.js\"));\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nconst createMinerTransaction = async ({ node, feeAddress, transactions, nonce, }) => {\n    const networkFee = await node_core_1.Block.calculateNetworkFee(node.blockchain.feeContext, transactions);\n    const outputs = networkFee.isZero()\n        ? []\n        : [\n            new node_core_1.Output({\n                asset: node.blockchain.settings.utilityToken.hash,\n                value: networkFee,\n                address: feeAddress,\n            }),\n        ];\n    return new node_core_1.MinerTransaction({\n        nonce: nonce.mod(node_core_1.utils.UINT_MAX.addn(1)).toNumber(),\n        outputs,\n    });\n};\nconst requestChangeView = ({ context: contextIn, node, privateKey, consensusContext, }) => {\n    let context = contextIn;\n    context = context.cloneExpectedView({\n        expectedView: common_1.incrementExpectedView(context),\n    });\n    common_1.signAndRelayChangeView({ context, node, privateKey });\n    const viewNumber = context.expectedView[context.myIndex];\n    if (common_1.checkExpectedView({ context, viewNumber })) {\n        return common_1.initializeConsensusInitial({\n            blockchain: node.blockchain,\n            context,\n            viewNumber,\n            consensusContext,\n        });\n    }\n    const { secondsPerBlock } = node.blockchain.settings;\n    return {\n        context,\n        timerSeconds: secondsPerBlock << (viewNumber + 1),\n    };\n};\nexports.runConsensus = async ({ context, node, options: { privateKey, feeAddress, privateNet }, consensusContext, }) => {\n    if (context.type === 'primary' && !(context instanceof context_1.RequestSentContext)) {\n        let requestSentContext;\n        if (context instanceof context_1.SignatureSentContext) {\n            requestSentContext = context.cloneRequestSent();\n        }\n        else {\n            const nonce = node_core_1.utils.randomUInt64();\n            let mutableTransactions = Object.values(node.memPool);\n            const minerTransaction = await createMinerTransaction({\n                node,\n                feeAddress,\n                transactions: mutableTransactions,\n                nonce,\n            });\n            if (mutableTransactions.length >= node.blockchain.settings.maxTransactionsPerBlock) {\n                const mutableNetworkFees = await Promise.all(mutableTransactions.map(async (transaction) => {\n                    const networkFee = await transaction.getNetworkFee(node.blockchain.feeContext);\n                    return [transaction, new bignumber_js_1.default(networkFee.toString(10))];\n                }));\n                mutableNetworkFees.sort(([first, a], [second, b]) => b.div(second.size).comparedTo(a.div(first.size)));\n                mutableTransactions = lodash_1.default.take(mutableNetworkFees, node.blockchain.settings.maxTransactionsPerBlock - 1)\n                    .map(([transaction, _unused]) => transaction);\n            }\n            mutableTransactions.unshift(minerTransaction);\n            const [previousHeader, validators] = await Promise.all([\n                node.blockchain.header.get({ hashOrIndex: context.previousHash }),\n                node.blockchain.getValidators(mutableTransactions),\n            ]);\n            const newContext = new context_1.RequestSentContext({\n                viewNumber: context.viewNumber,\n                myIndex: context.myIndex,\n                primaryIndex: context.primaryIndex,\n                expectedView: context.expectedView,\n                validators: context.validators,\n                blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n                transactions: mutableTransactions.reduce((acc, transaction) => (Object.assign(Object.assign({}, acc), { [transaction.hashHex]: transaction })), {}),\n                signatures: [],\n                header: {\n                    type: 'new',\n                    previousHash: context.previousHash,\n                    transactionHashes: mutableTransactions.map((transaction) => transaction.hashHex),\n                    blockIndex: context.blockIndex,\n                    nonce,\n                    timestamp: Math.max(consensusContext.nowSeconds(), previousHeader.timestamp + 1),\n                    nextConsensus: client_common_1.crypto.getConsensusAddress(validators),\n                },\n            });\n            const mutableSignatures = [];\n            mutableSignatures[newContext.myIndex] = client_common_1.crypto.sign({\n                message: newContext.header.message,\n                privateKey,\n            });\n            requestSentContext = newContext.cloneSignatures({ signatures: mutableSignatures });\n        }\n        if (privateNet) {\n            return common_1.checkSignatures({ node, context: requestSentContext });\n        }\n        common_1.signAndRelay({\n            context: requestSentContext,\n            node,\n            privateKey,\n            consensusMessage: new node_core_1.PrepareRequestConsensusMessage({\n                viewNumber: requestSentContext.viewNumber,\n                nonce: requestSentContext.header.consensusData,\n                nextConsensus: requestSentContext.header.nextConsensus,\n                transactionHashes: requestSentContext.transactionHashes.map((hash) => client_common_1.common.hexToUInt256(hash)),\n                minerTransaction: utils_1.utils.nullthrows(requestSentContext.transactions[requestSentContext.transactionHashes[0]]),\n                signature: utils_1.utils.nullthrows(requestSentContext.signatures[requestSentContext.myIndex]),\n            }),\n        });\n        const { secondsPerBlock } = node.blockchain.settings;\n        return {\n            context: requestSentContext,\n            timerSeconds: secondsPerBlock << (requestSentContext.viewNumber + 1),\n        };\n    }\n    if (context instanceof context_1.RequestSentContext || context.type === 'backup') {\n        return requestChangeView({\n            context,\n            node,\n            privateKey,\n            consensusContext,\n        });\n    }\n    return { context };\n};\n\n//# sourceMappingURL=runConsensus.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RelayStrippedTransactionMismatch = exports.InvalidRelayStrippedTransactionType = exports.AlreadyConnectedError = exports.NegotiationError = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nexports.NegotiationError = utils_1.makeErrorWithCode('NEGOTIATION', (message, reason) => `Negotiation failed. Unexpected message received: ${message.value.command}${reason === undefined ? '' : `. ${reason}`}`);\nexports.AlreadyConnectedError = utils_1.makeErrorWithCode('ALREADY_CONNECTED', (reason) => `Negotiation failed: ${reason}`);\nexports.InvalidRelayStrippedTransactionType = utils_1.makeErrorWithCode('INVALID_TRANSACTION_TYPE_FOR_STRIPPED_RELAY', (type) => `tried to use relayStrippedTransaction on a ${type} transaction`);\nexports.RelayStrippedTransactionMismatch = utils_1.makeErrorWithCode('RELAY_STRIPPED_TRANSACTION_MISMATCH', () => \"verificationTransaction and relayTransaction weren't identical transactions\");\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageTransform = exports.InvalidMessageTransformEncodingError = exports.Message = exports.PAYLOAD_MAX_SIZE = exports.COMMAND_LENGTH = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst stream_1 = require(\"stream\");\nconst Command_1 = require(\"./Command\");\nconst payload_1 = require(\"./payload\");\nexports.COMMAND_LENGTH = 12;\nexports.PAYLOAD_MAX_SIZE = 0x02000000;\nconst calculateChecksum = (buffer) => client_common_1.common.toUInt32LE(client_common_1.crypto.hash256(buffer));\nconst deserializeMessageHeader = ({ context, reader, }) => {\n    if (reader.readUInt32LE() !== context.messageMagic) {\n        throw new client_common_1.InvalidFormatError(`Expected BinaryReader readUInt32LE(0) to equal ${context.messageMagic}. Received: ${context.messageMagic}`);\n    }\n    const command = Command_1.assertCommand(reader.readFixedString(exports.COMMAND_LENGTH));\n    const length = reader.readUInt32LE();\n    if (length > exports.PAYLOAD_MAX_SIZE) {\n        throw new client_common_1.InvalidFormatError(`Expected buffer readout to be less than max payload size of ${exports.PAYLOAD_MAX_SIZE}. Received: ${length}`);\n    }\n    const checksum = reader.readUInt32LE();\n    return { command, length, checksum };\n};\nclass Message {\n    constructor({ magic, value }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.magic = magic;\n        this.value = value;\n    }\n    static deserializeWireBase(options) {\n        const { reader, context } = options;\n        const { command, length, checksum } = deserializeMessageHeader(options);\n        const payloadBuffer = reader.readBytes(length);\n        const payloadBufferChecksum = calculateChecksum(payloadBuffer);\n        if (payloadBufferChecksum !== checksum) {\n            throw new client_common_1.InvalidFormatError(`Expected payloadBuffer checksum to be ${checksum}. Received: ${payloadBufferChecksum}`);\n        }\n        const payloadOptions = {\n            context: options.context,\n            buffer: payloadBuffer,\n        };\n        let value;\n        switch (command) {\n            case Command_1.Command.addr:\n                value = {\n                    command: Command_1.Command.addr,\n                    payload: payload_1.AddrPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.block:\n                value = {\n                    command: Command_1.Command.block,\n                    payload: node_core_1.Block.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.consensus:\n                value = {\n                    command: Command_1.Command.consensus,\n                    payload: node_core_1.ConsensusPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.filteradd:\n                value = {\n                    command: Command_1.Command.filteradd,\n                    payload: payload_1.FilterAddPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.filterclear:\n                value = { command: Command_1.Command.filterclear };\n                break;\n            case Command_1.Command.filterload:\n                value = {\n                    command: Command_1.Command.filterload,\n                    payload: payload_1.FilterLoadPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getaddr:\n                value = { command: Command_1.Command.getaddr };\n                break;\n            case Command_1.Command.getblocks:\n                value = {\n                    command: Command_1.Command.getblocks,\n                    payload: payload_1.GetBlocksPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getdata:\n                value = {\n                    command: Command_1.Command.getdata,\n                    payload: payload_1.InvPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getheaders:\n                value = {\n                    command: Command_1.Command.getheaders,\n                    payload: payload_1.GetBlocksPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.headers:\n                value = {\n                    command: Command_1.Command.headers,\n                    payload: payload_1.HeadersPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.inv:\n                value = {\n                    command: Command_1.Command.inv,\n                    payload: payload_1.InvPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.mempool:\n                value = { command: Command_1.Command.mempool };\n                break;\n            case Command_1.Command.tx:\n                value = {\n                    command: Command_1.Command.tx,\n                    payload: node_core_1.deserializeTransactionWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.verack:\n                value = { command: Command_1.Command.verack };\n                break;\n            case Command_1.Command.version:\n                value = {\n                    command: Command_1.Command.version,\n                    payload: payload_1.VersionPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.alert:\n                value = { command: Command_1.Command.alert };\n                break;\n            case Command_1.Command.merkleblock:\n                value = {\n                    command: Command_1.Command.merkleblock,\n                    payload: payload_1.MerkleBlockPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.notfound:\n                value = { command: Command_1.Command.notfound };\n                break;\n            case Command_1.Command.ping:\n                value = { command: Command_1.Command.ping };\n                break;\n            case Command_1.Command.pong:\n                value = { command: Command_1.Command.pong };\n                break;\n            case Command_1.Command.reject:\n                value = { command: Command_1.Command.reject };\n                break;\n            default:\n                utils_1.utils.assertNever(command);\n                throw new client_common_1.InvalidFormatError(``);\n        }\n        return new this({ magic: context.messageMagic, value });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        const { value } = this;\n        writer.writeUInt32LE(this.magic);\n        writer.writeFixedString(value.command, exports.COMMAND_LENGTH);\n        let payload = Buffer.alloc(0);\n        switch (value.command) {\n            case Command_1.Command.addr:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.block:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.consensus:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.filteradd:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.filterclear:\n                break;\n            case Command_1.Command.filterload:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getaddr:\n                break;\n            case Command_1.Command.getblocks:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getdata:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getheaders:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.headers:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.inv:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.mempool:\n                break;\n            case Command_1.Command.tx:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.verack:\n                break;\n            case Command_1.Command.version:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.alert:\n                break;\n            case Command_1.Command.merkleblock:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.notfound:\n                break;\n            case Command_1.Command.ping:\n                break;\n            case Command_1.Command.pong:\n                break;\n            case Command_1.Command.reject:\n                break;\n            default:\n                utils_1.utils.assertNever(value);\n                throw new client_common_1.InvalidFormatError('Command does not exist');\n        }\n        writer.writeUInt32LE(payload.length);\n        writer.writeUInt32LE(calculateChecksum(payload));\n        writer.writeBytes(payload);\n    }\n}\nexports.Message = Message;\nexports.InvalidMessageTransformEncodingError = utils_1.makeErrorWithCode('INVALID_MESSAGE_TRANSFORM_ENCODING', (message) => message);\nconst SIZE_OF_MESSAGE_HEADER = client_common_1.IOHelper.sizeOfUInt32LE +\n    client_common_1.IOHelper.sizeOfFixedString(exports.COMMAND_LENGTH) +\n    client_common_1.IOHelper.sizeOfUInt32LE +\n    client_common_1.IOHelper.sizeOfUInt32LE;\nclass MessageTransform extends stream_1.Transform {\n    constructor(context) {\n        super({ readableObjectMode: true });\n        this.context = context;\n        this.mutableBuffer = Buffer.from([]);\n    }\n    _transform(chunk, encoding, callback) {\n        if (typeof chunk === 'string') {\n            throw new exports.InvalidMessageTransformEncodingError(`Invalid Message Transform Chunk Type. Expected chunk type to be 'string', found: ${typeof chunk}`);\n        }\n        if (encoding !== 'buffer') {\n            throw new exports.InvalidMessageTransformEncodingError(`Invalid Message Transform Encoding. Expected: 'buffer', found: ${encoding}`);\n        }\n        this.mutableBuffer = Buffer.concat([this.mutableBuffer, chunk]);\n        try {\n            const { remainingBuffer, mutableMessages } = this.processBuffer(new node_core_1.BinaryReader(this.mutableBuffer));\n            this.mutableBuffer = remainingBuffer;\n            mutableMessages.forEach((message) => this.push(message));\n            callback(undefined);\n        }\n        catch (error) {\n            callback(error);\n        }\n    }\n    processBuffer(reader) {\n        if (reader.remaining < SIZE_OF_MESSAGE_HEADER) {\n            return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n        }\n        const { length } = deserializeMessageHeader({\n            context: this.context,\n            reader: reader.clone(),\n        });\n        if (reader.remaining < SIZE_OF_MESSAGE_HEADER + length) {\n            return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n        }\n        const message = Message.deserializeWireBase({\n            context: this.context,\n            reader,\n        });\n        const { remainingBuffer, mutableMessages } = this.processBuffer(reader);\n        mutableMessages.push(message);\n        return { remainingBuffer, mutableMessages };\n    }\n}\nexports.MessageTransform = MessageTransform;\n\n//# sourceMappingURL=Message.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddrPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst NetworkAddress_1 = require(\"./NetworkAddress\");\nclass AddrPayload {\n    constructor({ addresses }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.addresses = addresses;\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const addresses = reader.readArray(() => NetworkAddress_1.NetworkAddress.deserializeWireBase(options));\n        return new this({ addresses });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.addresses, (address) => address.serializeWireBase(writer));\n    }\n}\nexports.AddrPayload = AddrPayload;\n\n//# sourceMappingURL=AddrPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterAddPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass FilterAddPayload {\n    constructor({ data }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.data = data;\n    }\n    static deserializeWireBase({ reader }) {\n        const data = reader.readVarBytesLE(520);\n        return new this({ data });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeVarBytesLE(this.data);\n    }\n}\nexports.FilterAddPayload = FilterAddPayload;\n\n//# sourceMappingURL=FilterAddPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterLoadPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass FilterLoadPayload {\n    constructor({ filter, k, tweak }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.filter = filter;\n        this.k = k;\n        this.tweak = tweak;\n    }\n    static deserializeWireBase({ reader }) {\n        const filter = reader.readVarBytesLE(36000);\n        const k = reader.readUInt8();\n        const tweak = reader.readUInt32LE();\n        if (k > 50) {\n            throw new client_common_1.InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be less than 50. Received: ${k}`);\n        }\n        return new this({ filter, k, tweak });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeVarBytesLE(this.filter);\n        writer.writeUInt8(this.k);\n        writer.writeUInt32LE(this.tweak);\n    }\n}\nexports.FilterLoadPayload = FilterLoadPayload;\n\n//# sourceMappingURL=FilterLoadPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBlocksPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass GetBlocksPayload {\n    constructor({ hashStart, hashStop = client_common_1.common.ZERO_UINT256 }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.hashStart = hashStart;\n        this.hashStop = hashStop;\n    }\n    static deserializeWireBase({ reader }) {\n        const hashStart = reader.readArray(() => reader.readUInt256());\n        const hashStop = reader.readUInt256();\n        return new this({ hashStart, hashStop });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.hashStart, (value) => {\n            writer.writeUInt256(value);\n        });\n        writer.writeUInt256(this.hashStop);\n    }\n}\nexports.GetBlocksPayload = GetBlocksPayload;\n\n//# sourceMappingURL=GetBlocksPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeadersPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass HeadersPayload {\n    constructor({ headers }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.headers = headers;\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const headers = reader.readArray(() => node_core_1.Header.deserializeWireBase(options));\n        return new this({ headers });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.headers, (header) => header.serializeWireBase(writer));\n    }\n}\nexports.HeadersPayload = HeadersPayload;\n\n//# sourceMappingURL=HeadersPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst InventoryType_1 = require(\"./InventoryType\");\nclass InvPayload {\n    constructor({ type, hashes }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.type = type;\n        this.hashes = hashes;\n    }\n    static deserializeWireBase({ reader }) {\n        const type = InventoryType_1.assertInventoryType(reader.readUInt8());\n        const hashes = reader.readArray(() => reader.readUInt256());\n        return new this({ type, hashes });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeUInt8(this.type);\n        writer.writeArray(this.hashes, (value) => {\n            writer.writeUInt256(value);\n        });\n    }\n}\nexports.InvPayload = InvPayload;\n\n//# sourceMappingURL=InvPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleBlockPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass MerkleBlockPayload extends node_core_1.BlockBase {\n    constructor({ version, previousHash, merkleRoot, timestamp, index, consensusData, nextConsensus, script, transactionCount, hashes, flags, }) {\n        super({\n            version,\n            previousHash,\n            merkleRoot,\n            timestamp,\n            index,\n            consensusData,\n            nextConsensus,\n            script,\n        });\n        this.transactionCount = transactionCount;\n        this.hashes = hashes;\n        this.flags = flags;\n        this.merkleBlockPayloadSizeInternal = node_core_1.utils.lazy(() => super.size +\n            client_common_1.IOHelper.sizeOfUInt32LE +\n            client_common_1.IOHelper.sizeOfArray(this.hashes, () => client_common_1.IOHelper.sizeOfUInt256) +\n            client_common_1.IOHelper.sizeOfVarBytesLE(this.flags));\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const blockBase = super.deserializeBlockBaseWireBase(options);\n        const transactionCount = reader.readVarUIntLE(node_core_1.utils.INT_MAX_VALUE).toNumber();\n        const hashes = reader.readArray(() => reader.readUInt256());\n        const flags = reader.readVarBytesLE();\n        return new this({\n            version: blockBase.version,\n            previousHash: blockBase.previousHash,\n            merkleRoot: blockBase.merkleRoot,\n            timestamp: blockBase.timestamp,\n            index: blockBase.index,\n            consensusData: blockBase.consensusData,\n            nextConsensus: blockBase.nextConsensus,\n            script: blockBase.script,\n            transactionCount,\n            hashes,\n            flags,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    get size() {\n        return this.merkleBlockPayloadSizeInternal();\n    }\n    serializeWireBase(writer) {\n        super.serializeWireBase(writer);\n        writer.writeVarUIntLE(this.transactionCount);\n        writer.writeArray(this.hashes, (hash) => {\n            writer.writeUInt256(hash);\n        });\n        writer.writeVarBytesLE(this.flags);\n    }\n}\nexports.MerkleBlockPayload = MerkleBlockPayload;\n\n//# sourceMappingURL=MerkleBlockPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VersionPayload = exports.SERVICES = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nexports.SERVICES = {\n    NODE_NETWORK: new bn_js_1.BN(1),\n};\nclass VersionPayload {\n    constructor({ protocolVersion, services, timestamp, port, nonce, userAgent, startHeight, relay, }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.protocolVersion = protocolVersion;\n        this.services = services;\n        this.timestamp = timestamp;\n        this.port = port;\n        this.nonce = nonce;\n        this.userAgent = userAgent;\n        this.startHeight = startHeight;\n        this.relay = relay;\n    }\n    static deserializeWireBase({ reader }) {\n        const protocolVersion = reader.readUInt32LE();\n        const services = reader.readUInt64LE();\n        const timestamp = reader.readUInt32LE();\n        const port = reader.readUInt16LE();\n        const nonce = reader.readUInt32LE();\n        const userAgent = reader.readVarString(1024);\n        const startHeight = reader.readUInt32LE();\n        const relay = reader.readBoolean();\n        return new this({\n            protocolVersion,\n            services,\n            timestamp,\n            port,\n            nonce,\n            userAgent,\n            startHeight,\n            relay,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeUInt32LE(this.protocolVersion);\n        writer.writeUInt64LE(this.services);\n        writer.writeUInt32LE(this.timestamp);\n        writer.writeUInt16LE(this.port);\n        writer.writeUInt32LE(this.nonce);\n        writer.writeVarString(this.userAgent);\n        writer.writeUInt32LE(this.startHeight);\n        writer.writeBoolean(this.relay);\n    }\n}\nexports.VersionPayload = VersionPayload;\n\n//# sourceMappingURL=VersionPayload.js.map\n","import { ConnectedPeer, Endpoint } from '@neo-one/node-core';\n\nexport class Network<Message, PeerData> {\n  public readonly connectedPeers: ReadonlyArray<ConnectedPeer<Message, PeerData>> = [];\n  public blacklistAndClose(_peer: ConnectedPeer<Message, PeerData>): void {\n    // do nothing\n  }\n  public start(): void {\n    // do nothing\n  }\n  public stop(): void {\n    // do nothing\n  }\n  public relay(_buffer: Buffer): void {\n    // do nothing\n  }\n  public permanentlyBlacklist(_endpoint: Endpoint): void {\n    // do nothing\n  }\n  public addEndpoint(_endpoint: Endpoint): void {\n    // do nothing\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./createHandler\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHandler = exports.JSONRPCError = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst operators_1 = require(\"rxjs/operators\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'rpc-handler' });\nclass JSONRPCError {\n    constructor(code, message) {\n        this.code = code;\n        this.message = message;\n    }\n}\nexports.JSONRPCError = JSONRPCError;\nconst RPC_METHODS = {\n    getaccountstate: 'getaccountstate',\n    getassetstate: 'getassetstate',\n    getbestblockhash: 'getbestblockhash',\n    getblock: 'getblock',\n    getblockcount: 'getblockcount',\n    getblockhash: 'getblockhash',\n    getblocksysfee: 'getblocksysfee',\n    getconnectioncount: 'getconnectioncount',\n    getcontractstate: 'getcontractstate',\n    getrawmempool: 'getrawmempool',\n    getrawtransaction: 'getrawtransaction',\n    getstorage: 'getstorage',\n    gettxout: 'gettxout',\n    invoke: 'invoke',\n    invokefunction: 'invokefunction',\n    invokescript: 'invokescript',\n    sendrawtransaction: 'sendrawtransaction',\n    submitblock: 'submitblock',\n    validateaddress: 'validateaddress',\n    getpeers: 'getpeers',\n    relaytransaction: 'relaytransaction',\n    relaystrippedtransaction: 'relaystrippedtransaction',\n    getoutput: 'getoutput',\n    getclaimamount: 'getclaimamount',\n    getallstorage: 'getallstorage',\n    testinvocation: 'testinvocation',\n    gettransactionreceipt: 'gettransactionreceipt',\n    getinvocationdata: 'getinvocationdata',\n    getvalidators: 'getvalidators',\n    getnetworksettings: 'getnetworksettings',\n    runconsensusnow: 'runconsensusnow',\n    updatesettings: 'updatesettings',\n    getsettings: 'getsettings',\n    fastforwardoffset: 'fastforwardoffset',\n    fastforwardtotime: 'fastforwardtotime',\n    reset: 'reset',\n    getneotrackerurl: 'getneotrackerurl',\n    resetproject: 'resetproject',\n    UNKNOWN: 'UNKNOWN',\n    INVALID: 'INVALID',\n};\nconst createJSONRPCHandler = (handlers) => {\n    const validateRequest = (request) => {\n        if (request !== undefined &&\n            typeof request === 'object' &&\n            request.jsonrpc === '2.0' &&\n            request.method !== undefined &&\n            typeof request.method === 'string' &&\n            (request.params === undefined || Array.isArray(request.params) || typeof request.params === 'object') &&\n            (request.id === undefined || typeof request.id === 'string' || typeof request.id === 'number')) {\n            return request;\n        }\n        throw new JSONRPCError(-32600, 'Invalid Request');\n    };\n    const handleSingleRequest = async (requestIn) => {\n        let labels = {};\n        let method = RPC_METHODS.UNKNOWN;\n        try {\n            let request;\n            try {\n                request = validateRequest(requestIn);\n            }\n            finally {\n                if (request !== undefined) {\n                    ({ method } = request);\n                }\n                else if (typeof requestIn === 'object') {\n                    ({ method } = requestIn);\n                }\n                if (RPC_METHODS[method] === undefined) {\n                    method = RPC_METHODS.INVALID;\n                }\n                labels = { [utils_1.Labels.RPC_METHOD]: method };\n            }\n            const handler = handlers[request.method];\n            if (handler === undefined) {\n                throw new JSONRPCError(-32601, 'Method not found');\n            }\n            const { params } = request;\n            let handlerParams;\n            if (params === undefined) {\n                handlerParams = [];\n            }\n            else if (Array.isArray(params)) {\n                handlerParams = params;\n            }\n            else {\n                handlerParams = [params];\n            }\n            const result = await handler(handlerParams);\n            logger.debug(Object.assign({ name: 'jsonrpc_server_single_request' }, labels));\n            return {\n                jsonrpc: '2.0',\n                result,\n                id: request.id === undefined ? undefined : request.id,\n            };\n        }\n        catch (err) {\n            logger.error(Object.assign(Object.assign({ name: 'jsonrpc_server_single_request' }, labels), { err }));\n            throw err;\n        }\n    };\n    const handleRequest = async (request) => {\n        if (Array.isArray(request)) {\n            return Promise.all(request.map(async (batchRequest) => handleSingleRequest(batchRequest)));\n        }\n        return handleSingleRequest(request);\n    };\n    const handleRequestSafe = async (labels, request) => {\n        try {\n            let result;\n            try {\n                result = await handleRequest(request);\n                logger.debug(Object.assign({ name: 'jsonrpc_server_request' }, labels));\n            }\n            catch (err) {\n                logger.error(Object.assign(Object.assign({ name: 'jsonrpc_server_request' }, labels), { err }));\n                throw err;\n            }\n            return result;\n        }\n        catch (error) {\n            let errorResponse = {\n                code: -32603,\n                message: error.message === undefined ? 'Internal error' : error.message,\n            };\n            if (error.code !== undefined &&\n                error.message !== undefined &&\n                typeof error.code === 'number' &&\n                typeof error.message === 'string') {\n                errorResponse = { code: error.code, message: error.message };\n            }\n            return {\n                jsonrpc: '2.0',\n                error: errorResponse,\n                id: undefined,\n            };\n        }\n    };\n    return async (request) => handleRequestSafe({ [utils_1.Labels.RPC_TYPE]: 'jsonrpc' }, request);\n};\nconst getTransactionReceipt = (value) => ({\n    blockIndex: value.startHeight,\n    blockHash: client_common_1.JSONHelper.writeUInt256(value.blockHash),\n    transactionIndex: value.index,\n    globalIndex: client_common_1.JSONHelper.writeUInt64(value.globalIndex),\n});\nexports.createHandler = ({ blockchain, node, handleGetNEOTrackerURL, handleResetProject, }) => {\n    const checkHeight = (height) => {\n        if (height < 0 || height > blockchain.currentBlockIndex) {\n            throw new JSONRPCError(-100, 'Invalid Height');\n        }\n    };\n    const handlers = {\n        [RPC_METHODS.getaccountstate]: async (args) => {\n            const hash = client_common_1.crypto.addressToScriptHash({\n                addressVersion: blockchain.settings.addressVersion,\n                address: args[0],\n            });\n            let account = await blockchain.account.tryGet({ hash });\n            if (account === undefined) {\n                account = new node_core_1.Account({ hash });\n            }\n            return account.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getassetstate]: async (args) => {\n            const asset = await blockchain.asset.tryGet({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            if (asset === undefined) {\n                throw new JSONRPCError(-100, 'Unknown asset');\n            }\n            return asset.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getbestblockhash]: async () => client_common_1.JSONHelper.writeUInt256(blockchain.currentBlock.hash),\n        [RPC_METHODS.getblock]: async (args) => {\n            let hashOrIndex = args[0];\n            if (typeof args[0] === 'string') {\n                hashOrIndex = client_common_1.JSONHelper.readUInt256(args[0]);\n            }\n            let watchTimeoutMS;\n            if (args[1] !== undefined && typeof args[1] === 'number' && args[1] !== 1) {\n                watchTimeoutMS = args[1];\n            }\n            else if (args[2] !== undefined && typeof args[2] === 'number') {\n                watchTimeoutMS = args[2];\n            }\n            let block = await blockchain.block.tryGet({ hashOrIndex });\n            if (block === undefined) {\n                if (watchTimeoutMS === undefined) {\n                    throw new JSONRPCError(-100, 'Unknown block');\n                }\n                try {\n                    block = await blockchain.block$\n                        .pipe(operators_1.filter((value) => value.hashHex === args[0] || value.index === args[0]), operators_1.take(1), operators_1.timeout(new Date(Date.now() + watchTimeoutMS)))\n                        .toPromise();\n                }\n                catch (_a) {\n                    throw new JSONRPCError(-100, 'Unknown block');\n                }\n            }\n            if (args[1] === true || args[1] === 1) {\n                return block.serializeJSON(blockchain.serializeJSONContext);\n            }\n            return block.serializeWire().toString('hex');\n        },\n        [RPC_METHODS.getblockcount]: async () => blockchain.currentBlockIndex + 1,\n        [RPC_METHODS.getblockhash]: async (args) => {\n            const height = args[0];\n            checkHeight(height);\n            const block = await blockchain.block.get({ hashOrIndex: height });\n            return client_common_1.JSONHelper.writeUInt256(block.hash);\n        },\n        [RPC_METHODS.getblocksysfee]: async (args) => {\n            const height = args[0];\n            checkHeight(height);\n            const header = await blockchain.header.get({ hashOrIndex: height });\n            const blockData = await blockchain.blockData.get({\n                hash: header.hash,\n            });\n            return blockData.systemFee.toString(10);\n        },\n        [RPC_METHODS.getconnectioncount]: async () => node.connectedPeers.length,\n        [RPC_METHODS.getcontractstate]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const contract = await blockchain.contract.tryGet({ hash });\n            if (contract === undefined) {\n                throw new JSONRPCError(-100, 'Unknown contract');\n            }\n            return contract.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getrawmempool]: async () => Object.values(node.memPool).map((transaction) => client_common_1.JSONHelper.writeUInt256(transaction.hash)),\n        [RPC_METHODS.getrawtransaction]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            let transaction = node.memPool[client_common_1.common.uInt256ToHex(hash)];\n            if (transaction === undefined) {\n                transaction = await blockchain.transaction.tryGet({ hash });\n            }\n            if (transaction === undefined) {\n                throw new JSONRPCError(-100, 'Unknown transaction');\n            }\n            if (args[1] === true || args[1] === 1) {\n                return transaction.serializeJSON(blockchain.serializeJSONContext);\n            }\n            return transaction.serializeWire().toString('hex');\n        },\n        [RPC_METHODS.getstorage]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const key = Buffer.from(args[1], 'hex');\n            const item = await blockchain.storageItem.tryGet({ hash, key });\n            return item === undefined ? undefined : item.value.toString('hex');\n        },\n        [RPC_METHODS.gettxout]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            const [output, spentCoins] = await Promise.all([\n                blockchain.output.tryGet({ hash, index }),\n                blockchain.transactionData.tryGet({ hash }),\n            ]);\n            if (spentCoins !== undefined && spentCoins.endHeights[index] !== undefined) {\n                return undefined;\n            }\n            return output === undefined ? undefined : output.serializeJSON(blockchain.serializeJSONContext, index);\n        },\n        [RPC_METHODS.invoke]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.invokefunction]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.invokescript]: async (args) => {\n            const script = client_common_1.JSONHelper.readBuffer(args[0]);\n            const receipt = await blockchain.invokeScript(script);\n            return {\n                result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n                actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n            };\n        },\n        [RPC_METHODS.sendrawtransaction]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            try {\n                await node.relayTransaction(transaction, { throwVerifyError: true, forceAdd: true });\n                return true;\n            }\n            catch (_a) {\n                return false;\n            }\n        },\n        [RPC_METHODS.submitblock]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.validateaddress]: async (args) => {\n            let scriptHash;\n            try {\n                scriptHash = client_common_1.crypto.addressToScriptHash({\n                    addressVersion: blockchain.settings.addressVersion,\n                    address: args[0],\n                });\n            }\n            catch (_a) {\n            }\n            return { address: args[0], isvalid: scriptHash !== undefined };\n        },\n        [RPC_METHODS.getpeers]: async () => ({\n            connected: node.connectedPeers.map((endpoint) => {\n                const { host, port } = node_core_1.getEndpointConfig(endpoint);\n                return { address: host, port };\n            }),\n        }),\n        [RPC_METHODS.relaytransaction]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            try {\n                const [transactionJSON, result] = await Promise.all([\n                    transaction.serializeJSON(blockchain.serializeJSONContext),\n                    node.relayTransaction(transaction, { forceAdd: true, throwVerifyError: true }),\n                ]);\n                const resultJSON = result.verifyResult === undefined\n                    ? {}\n                    : {\n                        verifyResult: {\n                            verifications: result.verifyResult.verifications.map((verification) => ({\n                                hash: client_common_1.JSONHelper.writeUInt160(verification.hash),\n                                witness: verification.witness.serializeJSON(blockchain.serializeJSONContext),\n                                actions: verification.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                                failureMessage: verification.failureMessage,\n                            })),\n                        },\n                    };\n                return Object.assign(Object.assign({}, resultJSON), { transaction: transactionJSON });\n            }\n            catch (error) {\n                throw new JSONRPCError(-110, `Relay transaction failed: ${error.message}`);\n            }\n        },\n        [RPC_METHODS.relaystrippedtransaction]: async (args) => {\n            const verificationTransaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            const relayTransaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[1]),\n            });\n            try {\n                const [transactionJSON, result] = await Promise.all([\n                    relayTransaction.serializeJSON(blockchain.serializeJSONContext),\n                    node.relayStrippedTransaction(verificationTransaction, relayTransaction, {\n                        forceAdd: true,\n                        throwVerifyError: true,\n                    }),\n                ]);\n                const resultJSON = result.verifyResult === undefined\n                    ? {}\n                    : {\n                        verifyResult: {\n                            verifications: result.verifyResult.verifications.map((verification) => ({\n                                hash: client_common_1.JSONHelper.writeUInt160(verification.hash),\n                                witness: verification.witness.serializeJSON(blockchain.serializeJSONContext),\n                                actions: verification.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                                failureMessage: verification.failureMessage,\n                            })),\n                        },\n                    };\n                return Object.assign(Object.assign({}, resultJSON), { transaction: transactionJSON });\n            }\n            catch (error) {\n                throw new JSONRPCError(-110, `Relay transaction failed: ${error.message}`);\n            }\n        },\n        [RPC_METHODS.getoutput]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            const output = await blockchain.output.tryGet({ hash, index });\n            if (output === undefined) {\n                throw new JSONRPCError(-100, 'Unknown output');\n            }\n            return output.serializeJSON(blockchain.serializeJSONContext, index);\n        },\n        [RPC_METHODS.getclaimamount]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            try {\n                const value = await blockchain.calculateClaimAmount([\n                    new node_core_1.Input({\n                        hash,\n                        index,\n                    }),\n                ]);\n                return client_common_1.common.fixed8ToDecimal(value).toString();\n            }\n            catch (error) {\n                throw new JSONRPCError(-102, error.message);\n            }\n        },\n        [RPC_METHODS.getallstorage]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const items = await blockchain.storageItem.getAll$({ hash }).pipe(operators_1.toArray()).toPromise();\n            return items.map((item) => item.serializeJSON(blockchain.serializeJSONContext));\n        },\n        [RPC_METHODS.testinvocation]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            if (transaction instanceof node_core_1.InvocationTransaction) {\n                const receipt = await blockchain.invokeTransaction(transaction);\n                return {\n                    result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n                    actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                };\n            }\n            throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n        },\n        [RPC_METHODS.gettransactionreceipt]: async (args) => {\n            const transactionData = await blockchain.transactionData.tryGet({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            let watchTimeoutMS;\n            if (args[1] !== undefined && typeof args[1] === 'number') {\n                watchTimeoutMS = args[1];\n            }\n            let result;\n            if (transactionData === undefined) {\n                if (watchTimeoutMS === undefined) {\n                    throw new JSONRPCError(-100, 'Unknown transaction');\n                }\n                try {\n                    result = await blockchain.block$\n                        .pipe(operators_1.switchMap(async () => {\n                        const data = await blockchain.transactionData.tryGet({\n                            hash: client_common_1.JSONHelper.readUInt256(args[0]),\n                        });\n                        return data === undefined ? undefined : getTransactionReceipt(data);\n                    }), operators_1.filter((receipt) => receipt !== undefined), operators_1.take(1), operators_1.timeout(new Date(Date.now() + watchTimeoutMS)))\n                        .toPromise();\n                }\n                catch (_a) {\n                    throw new JSONRPCError(-100, 'Unknown transaction');\n                }\n            }\n            else {\n                result = getTransactionReceipt(transactionData);\n            }\n            return result;\n        },\n        [RPC_METHODS.getinvocationdata]: async (args) => {\n            const transaction = await blockchain.transaction.get({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            const result = await transaction.serializeJSON(blockchain.serializeJSONContext);\n            if (result.type !== 'InvocationTransaction' || result.invocationData === undefined) {\n                throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n            }\n            return result.invocationData;\n        },\n        [RPC_METHODS.getvalidators]: async () => {\n            const validators = await blockchain.validator.all$.pipe(operators_1.toArray()).toPromise();\n            return validators.map((validator) => validator.serializeJSON(blockchain.serializeJSONContext));\n        },\n        [RPC_METHODS.getnetworksettings]: async () => {\n            const fee = blockchain.settings.fees[node_core_1.TransactionType.Issue];\n            const issueGASFee = client_common_1.common.fixed8ToDecimal(fee === undefined ? client_common_1.utils.ZERO : fee);\n            return {\n                issueGASFee: issueGASFee.toString(),\n            };\n        },\n        [RPC_METHODS.runconsensusnow]: async () => {\n            if (node.consensus) {\n                await node.consensus.runConsensusNow();\n            }\n            else {\n                throw new Error('This node does not support triggering consensus.');\n            }\n            return true;\n        },\n        [RPC_METHODS.updatesettings]: async (args) => {\n            const { settings } = blockchain;\n            const newSettings = Object.assign(Object.assign({}, settings), { secondsPerBlock: args[0].secondsPerBlock });\n            blockchain.updateSettings(newSettings);\n            return true;\n        },\n        [RPC_METHODS.getsettings]: async () => ({\n            secondsPerBlock: blockchain.settings.secondsPerBlock,\n        }),\n        [RPC_METHODS.fastforwardoffset]: async (args) => {\n            if (node.consensus) {\n                await node.consensus.fastForwardOffset(args[0]);\n            }\n            else {\n                throw new Error('This node does not support fast forwarding.');\n            }\n            return true;\n        },\n        [RPC_METHODS.fastforwardtotime]: async (args) => {\n            if (node.consensus !== undefined) {\n                await node.consensus.fastForwardToTime(args[0]);\n            }\n            else {\n                throw new Error('This node does not support fast forwarding.');\n            }\n            return true;\n        },\n        [RPC_METHODS.reset]: async () => {\n            if (node.consensus !== undefined) {\n                await node.consensus.pause();\n                await node.consensus.reset();\n            }\n            await node.reset();\n            await blockchain.reset();\n            if (node.consensus !== undefined) {\n                await node.consensus.resume();\n            }\n            return true;\n        },\n        [RPC_METHODS.getneotrackerurl]: async () => handleGetNEOTrackerURL(),\n        [RPC_METHODS.resetproject]: async () => {\n            await handleResetProject();\n            return true;\n        },\n    };\n    return createJSONRPCHandler(handlers);\n};\n\n//# sourceMappingURL=createHandler.js.map\n","import {\n  DeveloperClient,\n  JSONRPCProvider,\n  JSONRPCRequest,\n  JSONRPCResponse,\n  NEOONEDataProvider,\n} from '@neo-one/client-core';\nimport { constants } from '@neo-one/utils';\nimport { FullNode, FullNodeOptions } from './FullNode';\n\n// tslint:disable-next-line no-let\nlet startPromise: Promise<FullNode> | undefined;\nconst start = async (options: FullNodeOptions, provider: JSONRPCLocalProvider, build: () => Promise<void>) => {\n  if (startPromise === undefined) {\n    const node = new FullNode(\n      options,\n      new DeveloperClient(new NEOONEDataProvider({ network: constants.LOCAL_NETWORK_NAME, rpcURL: provider })),\n      build,\n    );\n    startPromise = node.start().then(() => node);\n  }\n\n  return startPromise;\n};\n\nconst handleRequest = async (\n  options: FullNodeOptions,\n  provider: JSONRPCLocalProvider,\n  build: () => Promise<void>,\n  req: JSONRPCRequest,\n) => {\n  const node = await start(options, provider, build);\n  const { watchTimeoutMS, params = [] } = req;\n\n  return node.handleRequest({\n    jsonrpc: '2.0',\n    id: 1,\n    method: req.method,\n    params: watchTimeoutMS === undefined ? params : params.concat([watchTimeoutMS]),\n  });\n};\n\nexport interface JSONRPCLocalProviderOptions {\n  readonly options: FullNodeOptions;\n  readonly build: () => Promise<void>;\n}\n\nexport class JSONRPCLocalProvider extends JSONRPCProvider {\n  public constructor(private readonly options: JSONRPCLocalProviderOptions) {\n    super();\n  }\n\n  public async request(req: JSONRPCRequest): Promise<JSONRPCResponse> {\n    // Something weird with comlink causes the property to be wrapped in a function, so we do this as a workaround.\n    const options = await this.getOptions();\n    const response = await handleRequest(options.options, this, options.build, req);\n\n    return this.handleResponse(response);\n  }\n\n  private async getOptions(): Promise<JSONRPCLocalProviderOptions> {\n    return this.options;\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addTransaction = exports.incrementExpectedView = exports.initializeConsensusInitial = exports.checkExpectedView = exports.signAndRelayChangeView = exports.checkSignatures = exports.initializeConsensus = exports.initializeNewConsensus = exports.getInitialContextAdd = exports.signAndRelay = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst context_1 = require(\"./context\");\nexports.signAndRelay = ({ node, privateKey, context, consensusMessage, }) => {\n    const payload = node_core_1.ConsensusPayload.sign(new node_core_1.UnsignedConsensusPayload({\n        version: context.version,\n        previousHash: context.previousHash,\n        blockIndex: context.blockIndex,\n        validatorIndex: context.myIndex,\n        consensusMessage,\n    }), privateKey);\n    node.relayConsensusPayload(payload);\n};\nexports.getInitialContextAdd = ({ blockchain, publicKey, validators, blockReceivedTimeSeconds, }) => {\n    const blockIndex = blockchain.currentBlock.index + 1;\n    const primaryIndex = blockIndex % validators.length;\n    const myIndex = lodash_1.default.findIndex(validators, (validator) => client_common_1.common.ecPointEqual(validator, publicKey));\n    return {\n        type: primaryIndex === myIndex ? 'primary' : 'backup',\n        previousHash: blockchain.currentBlock.hash,\n        blockIndex,\n        viewNumber: 0,\n        myIndex,\n        primaryIndex,\n        expectedView: lodash_1.default.range(0, validators.length).map(() => 0),\n        validators,\n        blockReceivedTimeSeconds,\n    };\n};\nfunction initializeConsensusCommon({ context, blockchain, consensusContext, }) {\n    if (context.myIndex < 0) {\n        return { context };\n    }\n    if (context.type === 'primary') {\n        return {\n            context,\n            timerSeconds: Math.max(0, blockchain.settings.secondsPerBlock - (consensusContext.nowSeconds() - context.blockReceivedTimeSeconds)),\n        };\n    }\n    const { secondsPerBlock } = blockchain.settings;\n    return {\n        context,\n        timerSeconds: secondsPerBlock << (context.viewNumber + 1),\n    };\n}\nexports.initializeNewConsensus = async ({ blockchain, publicKey, consensusContext, }) => {\n    const validators = await blockchain.getValidators([]);\n    const blockReceivedTimeSeconds = blockchain.currentBlock.timestamp;\n    const blockIndex = blockchain.currentBlock.index + 1;\n    const primaryIndex = blockIndex % validators.length;\n    const myIndex = lodash_1.default.findIndex(validators, (validator) => client_common_1.common.ecPointEqual(validator, publicKey));\n    const context = new context_1.InitialContext({\n        type: primaryIndex === myIndex ? 'primary' : 'backup',\n        previousHash: blockchain.currentBlock.hash,\n        blockIndex,\n        viewNumber: 0,\n        myIndex,\n        primaryIndex,\n        expectedView: lodash_1.default.range(0, validators.length).map(() => 0),\n        validators,\n        blockReceivedTimeSeconds,\n    });\n    return initializeConsensusCommon({ context, blockchain, consensusContext });\n};\nconst getPrimaryIndexType = ({ context, viewNumber, }) => {\n    let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n    if (primaryIndex < 0) {\n        primaryIndex += context.validators.length;\n    }\n    return {\n        type: primaryIndex === context.myIndex ? 'primary' : 'backup',\n        primaryIndex,\n    };\n};\nexports.initializeConsensus = ({ node, context: contextIn, viewNumber, consensusContext, }) => {\n    if (viewNumber <= 0) {\n        throw new Error('Programming error');\n    }\n    const { blockchain } = node;\n    let context = contextIn;\n    let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n    if (primaryIndex < 0) {\n        primaryIndex += context.validators.length;\n    }\n    const type = primaryIndex === context.myIndex ? 'primary' : 'backup';\n    context =\n        type === 'primary' && context instanceof context_1.SignatureSentContext\n            ? context.clone({ type, primaryIndex, viewNumber })\n            : context_1.cloneInitial(context, { type, primaryIndex, viewNumber });\n    return initializeConsensusCommon({ blockchain, context, consensusContext });\n};\nasync function checkSignatures({ node, context, }) {\n    const signaturesLength = context.signatures.filter((p) => p !== undefined).length;\n    if (signaturesLength >= context.M &&\n        context.transactionHashes.every((hash) => context.transactions[hash] !== undefined)) {\n        const mutablePublicKeyToSignature = {};\n        for (let i = 0, j = 0; i < context.validators.length && j < context.M; i += 1) {\n            const validator = context.validators[i];\n            const signature = context.signatures[i];\n            if (signature !== undefined) {\n                mutablePublicKeyToSignature[client_common_1.common.ecPointToHex(validator)] = signature;\n                j += 1;\n            }\n        }\n        const script = client_common_1.crypto.createMultiSignatureWitness(context.M, context.validators, mutablePublicKeyToSignature, node_core_1.Witness);\n        const block = context.header.clone({\n            transactions: context.transactionHashes.map((hash) => context.transactions[hash]).filter(utils_1.utils.notNull),\n            script,\n        });\n        await node.relayBlock(block);\n        return { context: context_1.cloneBlockSent(context) };\n    }\n    return { context };\n}\nexports.checkSignatures = checkSignatures;\nexports.signAndRelayChangeView = ({ node, privateKey, context, }) => {\n    exports.signAndRelay({\n        node,\n        privateKey,\n        context,\n        consensusMessage: new node_core_1.ChangeViewConsensusMessage({\n            viewNumber: context.viewNumber,\n            newViewNumber: context.expectedView[context.myIndex],\n        }),\n    });\n};\nexports.checkExpectedView = ({ context, viewNumber, }) => context.viewNumber !== viewNumber && context.expectedView.filter((p) => p === viewNumber).length >= context.M;\nexports.initializeConsensusInitial = ({ blockchain, context, viewNumber, consensusContext, }) => {\n    const { primaryIndex, type } = getPrimaryIndexType({ context, viewNumber });\n    return initializeConsensusCommon({\n        blockchain,\n        context: context_1.cloneInitial(context, { type, primaryIndex, viewNumber }),\n        consensusContext,\n    });\n};\nexports.incrementExpectedView = (context) => {\n    const mutableExpectedView = [...context.expectedView];\n    mutableExpectedView[context.myIndex] += 1;\n    return mutableExpectedView;\n};\nconst requestChangeViewBackup = ({ context: contextIn, node, privateKey, consensusContext, }) => {\n    const context = contextIn.cloneViewChanging({\n        expectedView: exports.incrementExpectedView(contextIn),\n    });\n    exports.signAndRelayChangeView({ context, node, privateKey });\n    const viewNumber = context.expectedView[context.myIndex];\n    if (exports.checkExpectedView({ context, viewNumber })) {\n        return exports.initializeConsensusInitial({\n            blockchain: node.blockchain,\n            context,\n            viewNumber,\n            consensusContext,\n        });\n    }\n    return { context };\n};\nexports.addTransaction = async ({ context: contextIn, node, privateKey, transaction, verify, consensusContext, }) => {\n    let context = contextIn;\n    const { blockchain } = node;\n    const tx = await blockchain.transaction.tryGet({ hash: transaction.hash });\n    if (tx !== undefined) {\n        return { context };\n    }\n    if (verify) {\n        let verified = true;\n        try {\n            const { verifications } = await blockchain.verifyTransaction({\n                transaction,\n                memPool: Object.values(context.transactions).filter(utils_1.utils.notNull),\n            });\n            verified = verifications.every(({ failureMessage }) => failureMessage === undefined);\n        }\n        catch (_a) {\n            verified = false;\n        }\n        if (!verified) {\n            return { context };\n        }\n    }\n    context = context.clone({\n        transactions: Object.assign(Object.assign({}, context.transactions), { [transaction.hashHex]: transaction }),\n    });\n    const transactionsLength = Object.values(context.transactions).length;\n    if (context.transactionHashes.length === transactionsLength) {\n        const validators = await blockchain.getValidators(Object.values(context.transactions).filter(utils_1.utils.notNull));\n        const consensusAddress = client_common_1.crypto.getConsensusAddress(validators);\n        if (client_common_1.common.uInt160Equal(consensusAddress, context.header.nextConsensus)) {\n            const mutableSignatures = [...context.signatures];\n            mutableSignatures[context.myIndex] = client_common_1.crypto.sign({\n                message: context.header.message,\n                privateKey,\n            });\n            const newContext = context.cloneSignatureSent({ signatures: mutableSignatures });\n            exports.signAndRelay({\n                node,\n                context: newContext,\n                privateKey,\n                consensusMessage: new node_core_1.PrepareResponseConsensusMessage({\n                    viewNumber: newContext.viewNumber,\n                    signature: utils_1.utils.nullthrows(mutableSignatures[newContext.myIndex]),\n                }),\n            });\n            return checkSignatures({ node, context: newContext });\n        }\n        return requestChangeViewBackup({\n            context,\n            node,\n            privateKey,\n            consensusContext,\n        });\n    }\n    return { context };\n};\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nclass Context {\n    constructor({ type, previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n        this.version = 0;\n        this.type = type;\n        this.previousHash = previousHash;\n        this.blockIndex = blockIndex;\n        this.viewNumber = viewNumber;\n        this.myIndex = myIndex;\n        this.primaryIndex = primaryIndex;\n        this.expectedView = expectedView;\n        this.validators = validators;\n        this.blockReceivedTimeSeconds = blockReceivedTimeSeconds;\n    }\n    get M() {\n        return Math.floor(this.validators.length - (this.validators.length - 1) / 3);\n    }\n    cloneExpectedView(_options) {\n        throw new Error('Not Implemented');\n    }\n    toJSON() {\n        return {\n            class: this.constructor.name,\n            version: this.version,\n            type: this.type,\n            previousHash: client_common_1.common.uInt256ToString(this.previousHash),\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: [...this.expectedView],\n            validators: this.validators.map((validator) => client_common_1.common.ecPointToString(validator)),\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        };\n    }\n}\nexports.Context = Context;\n\n//# sourceMappingURL=Context.js.map\n","import * as comlink from './comlink';\nimport * as endpoint from './endpoint';\n\nexport { comlink, endpoint };\nexport * from './WorkerManager';\nexport { Disposable } from './types';\n","// tslint:disable\nexport interface Endpoint {\n  postMessage(message: any, transfer?: any[]): void;\n  addEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n  removeEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n}\nexport type Proxy = Function;\ntype CBProxyCallback = (bpcd: CBProxyCallbackDescriptor) => {}; // eslint-disable-line no-unused-vars\ntype Transferable = MessagePort | ArrayBuffer; // eslint-disable-line no-unused-vars\nexport type Exposable = Function | Object; // eslint-disable-line no-unused-vars\n\ninterface InvocationResult {\n  type: 'RETURN';\n  id?: string;\n  value: WrappedValue;\n}\n\ntype WrappedValue = RawWrappedValue | HandledWrappedValue;\n\ninterface PropertyIteratorEntry {\n  value: {};\n  path: string[];\n}\n\ninterface WrappedChildValue {\n  path: string[];\n  wrappedValue: HandledWrappedValue;\n}\n\ninterface RawWrappedValue {\n  type: 'RAW';\n  value: {};\n  wrappedChildren?: WrappedChildValue[];\n}\n\ninterface HandledWrappedValue {\n  type: string;\n  value: {};\n}\n\ntype CBProxyCallbackDescriptor = CBPCDGet | CBPCDApply | CBPCDConstruct | CBPCDSet; // eslint-disable-line no-unused-vars\n\ninterface CBPCDGet {\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface CBPCDApply {\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDConstruct {\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDSet {\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: {};\n}\n\ntype InvocationRequest =\n  | GetInvocationRequest\n  | ApplyInvocationRequest\n  | ConstructInvocationRequest\n  | SetInvocationRequest;\n\ninterface GetInvocationRequest {\n  id?: string;\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface ApplyInvocationRequest {\n  id?: string;\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface ConstructInvocationRequest {\n  id?: string;\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface SetInvocationRequest {\n  id?: string;\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: WrappedValue;\n}\n\nexport interface TransferHandler {\n  canHandle: (obj: {}) => Boolean;\n  serialize: (obj: {}) => {};\n  deserialize: (obj: {}) => {};\n}\n\nconst TRANSFERABLE_TYPES = [ArrayBuffer, MessagePort];\nconst uid: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n\nconst proxyValueSymbol = Symbol('proxyValue');\nconst throwSymbol = Symbol('throw');\nconst proxyTransferHandler: TransferHandler = {\n  canHandle: (obj: {}): Boolean => {\n    return obj && ((obj as any)[proxyValueSymbol] || obj instanceof Function);\n  },\n  serialize: (obj: {}): {} => {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return port2;\n  },\n  deserialize: (obj: {}): {} => {\n    return proxy(obj as MessagePort);\n  },\n};\n\nconst throwTransferHandler = {\n  canHandle: (obj: {}): Boolean => (obj && (obj as any)[throwSymbol]) || obj instanceof Error,\n  serialize: (obj: any): {} => {\n    const message = obj && obj.message;\n    const stack = obj && obj.stack;\n    return Object.assign({}, obj, { message, stack });\n  },\n  deserialize: (obj: {}): {} => {\n    throw Object.assign(Error(), obj);\n  },\n};\n\nexport const transferHandlers: Map<string, TransferHandler> = new Map([\n  ['PROXY', proxyTransferHandler] as const,\n  ['THROW', throwTransferHandler] as const,\n]);\n\nlet pingPongMessageCounter: number = 0;\n\nexport function proxy(endpoint: Endpoint | Window, target?: any): Proxy {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  return cbProxy(\n    async (irequest) => {\n      let args: WrappedValue[] = [];\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') args = irequest.argumentsList.map(wrapValue);\n      const response = await pingPongMessage(\n        endpoint as Endpoint,\n        Object.assign({}, irequest, { argumentsList: args }),\n        transferableProperties(args),\n      );\n      const result = response.data as InvocationResult;\n      return unwrapValue(result.value);\n    },\n    [],\n    target,\n  );\n}\n\nexport function proxyValue<T>(obj: T): T {\n  if (obj instanceof MessagePort) {\n    return obj;\n  }\n\n  (obj as any)[proxyValueSymbol] = true;\n  return obj;\n}\n\nexport function expose(rootObj: Exposable, endpoint: Endpoint | Window): void {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  attachMessageHandler(endpoint, async function (event: MessageEvent) {\n    if (!event.data.id || !event.data.callPath) return;\n    let iresult;\n    const irequest = event.data as InvocationRequest;\n    try {\n      const that = await irequest.callPath.slice(0, -1).reduce((obj, propName) => obj[propName], rootObj as any);\n      let args: Array<{}> = [];\n\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') {\n        args = irequest.argumentsList.map(unwrapValue);\n      }\n      if (irequest.type === 'APPLY') {\n        if (irequest.callPath.length > 0) {\n          iresult = await that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await that(...args);\n        }\n      }\n      if (irequest.type === 'CONSTRUCT') {\n        if (irequest.callPath.length > 0) {\n          iresult = await new that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await new that(...args);\n        }\n        iresult = proxyValue(iresult);\n      }\n      if (irequest.type === 'SET' || irequest.type === 'GET') {\n        const obj = irequest.callPath.length > 0 ? await that[irequest.callPath[irequest.callPath.length - 1]] : that;\n        if (irequest.type === 'SET') {\n          obj[irequest.property] = irequest.value;\n          // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n          // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n          iresult = true;\n        } else {\n          iresult = obj;\n        }\n      }\n    } catch (e) {\n      iresult = e;\n      iresult[throwSymbol] = true;\n    }\n\n    iresult = makeInvocationResult(irequest, iresult);\n    return (endpoint as Endpoint).postMessage(iresult, transferableProperties([iresult]));\n  });\n}\n\nfunction wrapValue(arg: {}): WrappedValue {\n  // Is arg itself handled by a TransferHandler?\n  for (const [key, transferHandler] of transferHandlers) {\n    if (transferHandler.canHandle(arg)) {\n      return {\n        type: key,\n\n        value: transferHandler.serialize(arg),\n      };\n    }\n  }\n\n  // If not, traverse the entire object and find handled values.\n  let wrappedChildren: WrappedChildValue[] = [];\n  iterateUnhandledProperties(arg, (value, path) => {\n    for (const [key, transferHandler] of transferHandlers) {\n      if (transferHandler.canHandle(value)) {\n        wrappedChildren.push({\n          path,\n          wrappedValue: {\n            type: key,\n            value: transferHandler.serialize(value),\n          },\n        });\n\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  for (const wrappedChild of wrappedChildren) {\n    const container = wrappedChild.path.slice(0, -1).reduce((obj, key) => obj[key], arg as any);\n    container[wrappedChild.path[wrappedChild.path.length - 1]] = null;\n  }\n  return {\n    type: 'RAW',\n    value: arg,\n    wrappedChildren,\n  };\n}\n\nfunction unwrapValue(arg: WrappedValue): {} {\n  if (transferHandlers.has(arg.type)) {\n    const transferHandler = transferHandlers.get(arg.type)!;\n    return transferHandler.deserialize(arg.value);\n  } else if (isRawWrappedValue(arg)) {\n    for (const wrappedChildValue of arg.wrappedChildren || []) {\n      if (!transferHandlers.has(wrappedChildValue.wrappedValue.type))\n        throw Error(`Unknown value type \"${arg.type}\" at ${wrappedChildValue.path.join('.')}`);\n      const transferHandler = transferHandlers.get(wrappedChildValue.wrappedValue.type)!;\n      const newValue = transferHandler.deserialize(wrappedChildValue.wrappedValue.value);\n      replaceValueInObjectAtPath(arg.value, wrappedChildValue.path, newValue);\n    }\n    return arg.value;\n  } else {\n    throw Error(`Unknown value type \"${arg.type}\"`);\n  }\n}\n\nfunction replaceValueInObjectAtPath(obj: {}, path: string[], newVal: {}) {\n  const lastKey = path.slice(-1)[0];\n  const lastObj = path.slice(0, -1).reduce((obj: any, key: string) => obj[key], obj);\n  lastObj[lastKey] = newVal;\n}\n\nfunction isRawWrappedValue(arg: WrappedValue): arg is RawWrappedValue {\n  return arg.type === 'RAW';\n}\n\nfunction windowEndpoint(w: Window): Endpoint {\n  if (self.constructor.name !== 'Window') throw Error('self is not a window');\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n  };\n}\n\nexport function isEndpoint(endpoint: any): endpoint is Endpoint {\n  return 'addEventListener' in endpoint && 'removeEventListener' in endpoint && 'postMessage' in endpoint;\n}\n\nfunction activateEndpoint(endpoint: Endpoint): void {\n  if (isMessagePort(endpoint)) endpoint.start();\n}\n\nfunction attachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Checking all possible types of `endpoint` manually satisfies TypeScript’s\n  // type checker. Not sure why the inference is failing here. Since it’s\n  // unnecessary code I’m going to resort to `any` for now.\n  // if(isWorker(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isMessagePort(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isOtherWindow(endpoint))\n  //   endpoint.addEventListener('message', f);\n  (endpoint as any).addEventListener('message', f);\n}\n\nfunction detachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Same as above.\n  (<any>endpoint).removeEventListener('message', f);\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === 'MessagePort';\n}\n\nfunction isWindow(endpoint: Endpoint | Window): endpoint is Window {\n  // TODO: This doesn’t work on cross-origin iframes.\n  // return endpoint.constructor.name === 'Window';\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\n/**\n * `pingPongMessage` sends a `postMessage` and waits for a reply. Replies are\n * identified by a unique id that is attached to the payload.\n */\nfunction pingPongMessage(endpoint: Endpoint, msg: Object, transferables: Transferable[]): Promise<MessageEvent> {\n  const id = `${uid}-${pingPongMessageCounter++}`;\n\n  return new Promise((resolve) => {\n    attachMessageHandler(endpoint, function handler(event: MessageEvent) {\n      if (event.data.id !== id || event.data.type !== 'RETURN') return;\n      detachMessageHandler(endpoint, handler);\n      resolve(event);\n    });\n\n    // Copy msg and add `id` property\n    msg = Object.assign({}, msg, { id });\n    endpoint.postMessage(msg, transferables);\n  });\n}\n\nfunction cbProxy(cb: CBProxyCallback, callPath: PropertyKey[] = [], target = function () {}): Proxy {\n  return new Proxy(target, {\n    construct(_target, argumentsList, proxy) {\n      return cb({\n        type: 'CONSTRUCT',\n        callPath,\n        argumentsList,\n      });\n    },\n    apply(_target, _thisArg, argumentsList) {\n      // We use `bind` as an indicator to have a remote function bound locally.\n      // The actual target for `bind()` is currently ignored.\n      if (callPath[callPath.length - 1] === 'bind') return cbProxy(cb, callPath.slice(0, -1));\n      return cb({\n        type: 'APPLY',\n        callPath: callPath[callPath.length - 1] === 'apply' ? callPath.slice(0, -1) : callPath,\n        argumentsList: callPath[callPath.length - 1] === 'apply' ? argumentsList[1] : argumentsList,\n      });\n    },\n    get(_target, property, proxy) {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      if (property === 'then' && callPath.length === 0) {\n        return { then: () => proxy };\n      } else if (property === 'then') {\n        const r = cb({\n          type: 'GET',\n          callPath,\n        });\n        return Promise.resolve(r).then.bind(r);\n      } else {\n        return cbProxy(cb, callPath.concat(property), (<any>_target)[property]);\n      }\n    },\n    set(_target, property, value, _proxy): boolean {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      return cb({\n        type: 'SET',\n        callPath,\n        property,\n        value,\n      }) as boolean;\n    },\n  });\n}\n\nexport function isTransferable(thing: {}): thing is Transferable {\n  return TRANSFERABLE_TYPES.some((type) => thing instanceof type);\n}\n\nfunction iterateUnhandledProperties(\n  value: {} | undefined,\n  handleProperty: (value: any, path: string[]) => boolean,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): void {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  if (handleProperty(value, path)) return;\n\n  const keys = Object.keys(value);\n  for (const key of keys) iterateUnhandledProperties((value as any)[key], handleProperty, [...path, key], visited);\n}\n\nfunction* iterateAllProperties(\n  value: {} | undefined,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): Iterable<PropertyIteratorEntry> {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  yield { value, path };\n\n  const keys = Object.keys(value);\n  for (const key of keys) yield* iterateAllProperties((value as any)[key], [...path, key], visited);\n}\n\nexport function transferableProperties(obj: {}[] | undefined): Transferable[] {\n  const r: Transferable[] = [];\n  for (const prop of iterateAllProperties(obj)) {\n    if (isTransferable(prop.value)) r.push(prop.value);\n  }\n  return r;\n}\n\nfunction makeInvocationResult(irequest: InvocationRequest, obj: {}): InvocationResult {\n  return {\n    type: 'RETURN',\n    id: irequest.id,\n    value: wrapValue(obj),\n  };\n}\n","// tslint:disable no-any\nimport * as comlink from './comlink';\n\nexport type EndpointLike = comlink.Endpoint | Window | Worker | WorkerEndpoint;\nexport interface WorkerEndpoint extends comlink.Endpoint {\n  readonly start: () => void;\n  readonly close: () => void;\n}\n\nfunction isWorkerEndpoint(endpoint: EndpointLike): endpoint is WorkerEndpoint {\n  return ['postMessage', 'addEventListener', 'removeEventListener', 'start', 'close'].every((prop) => prop in endpoint);\n}\n\nfunction isWindow(endpoint: EndpointLike): endpoint is Window {\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\nfunction isWorker(endpoint: EndpointLike): endpoint is Worker {\n  return ['onmessage', 'postMessage', 'terminate', 'addEventListener', 'removeEventListener'].every(\n    (prop) => prop in endpoint,\n  );\n}\n\nfunction windowEndpoint(w: Window): WorkerEndpoint {\n  if (self.constructor.name !== 'Window') {\n    throw Error('self is not a window');\n  }\n\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n    start: () => {\n      // do nothing\n    },\n    close: () => {\n      // do nothing\n    },\n  };\n}\n\nfunction workerEndpoint(worker: Worker): WorkerEndpoint {\n  return {\n    addEventListener: worker.addEventListener.bind(worker) as any,\n    removeEventListener: worker.removeEventListener.bind(worker) as any,\n    postMessage: worker.postMessage.bind(worker) as any,\n    start: () => {\n      // do nothing\n    },\n    close: worker.terminate.bind(worker),\n  };\n}\n\nfunction endpointEndpoint(endpoint: comlink.Endpoint): WorkerEndpoint {\n  return {\n    addEventListener: endpoint.addEventListener.bind(endpoint),\n    removeEventListener: endpoint.removeEventListener.bind(endpoint),\n    postMessage: endpoint.postMessage.bind(endpoint),\n    start: () => {\n      activate(endpoint);\n    },\n    close: () => {\n      if ((endpoint as any).close) {\n        (endpoint as any).close();\n      }\n    },\n  };\n}\n\nexport function getEndpoint(endpointIn: EndpointLike): WorkerEndpoint {\n  return isWorkerEndpoint(endpointIn)\n    ? endpointIn\n    : isWindow(endpointIn)\n    ? windowEndpoint(endpointIn)\n    : isWorker(endpointIn)\n    ? workerEndpoint(endpointIn)\n    : endpointEndpoint(endpointIn);\n}\n\nexport function activate(endpoint: any): void {\n  if (endpoint.start) {\n    endpoint.start();\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./loggers\"), exports);\ntslib_1.__exportStar(require(\"./types\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Context\"), exports);\ntslib_1.__exportStar(require(\"./BlockSentContext\"), exports);\ntslib_1.__exportStar(require(\"./HeaderContext\"), exports);\ntslib_1.__exportStar(require(\"./InitialContext\"), exports);\ntslib_1.__exportStar(require(\"./RequestReceivedContext\"), exports);\ntslib_1.__exportStar(require(\"./RequestSentContext\"), exports);\ntslib_1.__exportStar(require(\"./SignatureSentContext\"), exports);\ntslib_1.__exportStar(require(\"./ViewChangingContext\"), exports);\ntslib_1.__exportStar(require(\"./types\"), exports);\ntslib_1.__exportStar(require(\"./cloneBlockSent\"), exports);\ntslib_1.__exportStar(require(\"./cloneInitial\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeaderContext = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst Context_1 = require(\"./Context\");\nclass HeaderContext extends Context_1.Context {\n    constructor({ type, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        const previousHash = header.type === 'existing' ? header.block.previousHash : header.previousHash;\n        const transactionHashes = header.transactionHashes;\n        const blockIndex = header.type === 'existing' ? header.block.index : header.blockIndex;\n        const nonce = header.type === 'existing' ? header.block.consensusData : header.nonce;\n        const timestamp = header.type === 'existing' ? header.block.timestamp : header.timestamp;\n        const nextConsensus = header.type === 'existing' ? header.block.nextConsensus : header.nextConsensus;\n        super({\n            type,\n            previousHash,\n            blockIndex,\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n        });\n        this.transactions = transactions;\n        this.transactionHashes = transactionHashes;\n        this.transactionHashesSet = new Set(transactionHashes);\n        this.signatures = signatures;\n        if (header.type === 'existing') {\n            this.header = header.block;\n        }\n        else {\n            this.header = new node_core_1.Block({\n                version: this.version,\n                previousHash: this.previousHash,\n                merkleRoot: node_core_1.MerkleTree.computeRoot(this.transactionHashes.map((hash) => client_common_1.common.hexToUInt256(hash))),\n                timestamp,\n                index: this.blockIndex,\n                consensusData: nonce,\n                nextConsensus,\n                transactions: [],\n            });\n        }\n    }\n    cloneSignatures(_options) {\n        throw new Error('Not Implemented');\n    }\n    toJSON() {\n        return Object.assign(Object.assign({}, super.toJSON()), { transactionHashes: this.transactionHashes.map((hash) => client_common_1.common.uInt256ToString(hash)), signatures: this.signatures.map((signature) => signature === undefined ? 'undefined' : signature.toString('hex')) });\n    }\n}\nexports.HeaderContext = HeaderContext;\n\n//# sourceMappingURL=HeaderContext.js.map\n"],"sourceRoot":""}